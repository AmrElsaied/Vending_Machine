
CoffeeMachine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006728  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08006834  08006834  00007834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a60  08006a60  00008a14  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006a60  08006a60  00008a14  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006a60  08006a60  00008a14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a60  08006a60  00007a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a64  08006a64  00007a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000a14  20000000  08006a68  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012e0  20000a14  0800747c  00008a14  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cf4  0800747c  00008cf4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008a14  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de08  00000000  00000000  00008a3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031de  00000000  00000000  00016845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00019a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009be  00000000  00000000  0001a758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001755f  00000000  00000000  0001b116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e43  00000000  00000000  00032675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000707c2  00000000  00000000  000444b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4c7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032b4  00000000  00000000  000b4cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  000b7f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000a14 	.word	0x20000a14
 8000128:	00000000 	.word	0x00000000
 800012c:	0800681c 	.word	0x0800681c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000a18 	.word	0x20000a18
 8000148:	0800681c 	.word	0x0800681c

0800014c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000152:	4b47      	ldr	r3, [pc, #284]	@ (8000270 <MX_GPIO_Init+0x124>)
 8000154:	699b      	ldr	r3, [r3, #24]
 8000156:	4a46      	ldr	r2, [pc, #280]	@ (8000270 <MX_GPIO_Init+0x124>)
 8000158:	f043 0310 	orr.w	r3, r3, #16
 800015c:	6193      	str	r3, [r2, #24]
 800015e:	4b44      	ldr	r3, [pc, #272]	@ (8000270 <MX_GPIO_Init+0x124>)
 8000160:	699b      	ldr	r3, [r3, #24]
 8000162:	f003 0310 	and.w	r3, r3, #16
 8000166:	60fb      	str	r3, [r7, #12]
 8000168:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800016a:	4b41      	ldr	r3, [pc, #260]	@ (8000270 <MX_GPIO_Init+0x124>)
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	4a40      	ldr	r2, [pc, #256]	@ (8000270 <MX_GPIO_Init+0x124>)
 8000170:	f043 0320 	orr.w	r3, r3, #32
 8000174:	6193      	str	r3, [r2, #24]
 8000176:	4b3e      	ldr	r3, [pc, #248]	@ (8000270 <MX_GPIO_Init+0x124>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	f003 0320 	and.w	r3, r3, #32
 800017e:	60bb      	str	r3, [r7, #8]
 8000180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000182:	4b3b      	ldr	r3, [pc, #236]	@ (8000270 <MX_GPIO_Init+0x124>)
 8000184:	699b      	ldr	r3, [r3, #24]
 8000186:	4a3a      	ldr	r2, [pc, #232]	@ (8000270 <MX_GPIO_Init+0x124>)
 8000188:	f043 0304 	orr.w	r3, r3, #4
 800018c:	6193      	str	r3, [r2, #24]
 800018e:	4b38      	ldr	r3, [pc, #224]	@ (8000270 <MX_GPIO_Init+0x124>)
 8000190:	699b      	ldr	r3, [r3, #24]
 8000192:	f003 0304 	and.w	r3, r3, #4
 8000196:	607b      	str	r3, [r7, #4]
 8000198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800019a:	4b35      	ldr	r3, [pc, #212]	@ (8000270 <MX_GPIO_Init+0x124>)
 800019c:	699b      	ldr	r3, [r3, #24]
 800019e:	4a34      	ldr	r2, [pc, #208]	@ (8000270 <MX_GPIO_Init+0x124>)
 80001a0:	f043 0308 	orr.w	r3, r3, #8
 80001a4:	6193      	str	r3, [r2, #24]
 80001a6:	4b32      	ldr	r3, [pc, #200]	@ (8000270 <MX_GPIO_Init+0x124>)
 80001a8:	699b      	ldr	r3, [r3, #24]
 80001aa:	f003 0308 	and.w	r3, r3, #8
 80001ae:	603b      	str	r3, [r7, #0]
 80001b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BREAK_GPIO_Port, BREAK_Pin, GPIO_PIN_RESET);
 80001b2:	2200      	movs	r2, #0
 80001b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80001b8:	482e      	ldr	r0, [pc, #184]	@ (8000274 <MX_GPIO_Init+0x128>)
 80001ba:	f001 f955 	bl	8001468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_ON_GPIO_Port, USB_ON_Pin, GPIO_PIN_RESET);
 80001be:	2200      	movs	r2, #0
 80001c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001c4:	482c      	ldr	r0, [pc, #176]	@ (8000278 <MX_GPIO_Init+0x12c>)
 80001c6:	f001 f94f 	bl	8001468 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80001ca:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80001ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80001d0:	2303      	movs	r3, #3
 80001d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001d4:	f107 0310 	add.w	r3, r7, #16
 80001d8:	4619      	mov	r1, r3
 80001da:	4828      	ldr	r0, [pc, #160]	@ (800027c <MX_GPIO_Init+0x130>)
 80001dc:	f000 febc 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA5 PA6 PA7 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80001e0:	f248 03ff 	movw	r3, #33023	@ 0x80ff
 80001e4:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80001e6:	2303      	movs	r3, #3
 80001e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001ea:	f107 0310 	add.w	r3, r7, #16
 80001ee:	4619      	mov	r1, r3
 80001f0:	4821      	ldr	r0, [pc, #132]	@ (8000278 <MX_GPIO_Init+0x12c>)
 80001f2:	f000 feb1 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB3 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 80001f6:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80001fa:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80001fc:	2303      	movs	r3, #3
 80001fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000200:	f107 0310 	add.w	r3, r7, #16
 8000204:	4619      	mov	r1, r3
 8000206:	481b      	ldr	r0, [pc, #108]	@ (8000274 <MX_GPIO_Init+0x128>)
 8000208:	f000 fea6 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BREAK_Pin;
 800020c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000210:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000212:	2311      	movs	r3, #17
 8000214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000216:	2300      	movs	r3, #0
 8000218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800021a:	2302      	movs	r3, #2
 800021c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BREAK_GPIO_Port, &GPIO_InitStruct);
 800021e:	f107 0310 	add.w	r3, r7, #16
 8000222:	4619      	mov	r1, r3
 8000224:	4813      	ldr	r0, [pc, #76]	@ (8000274 <MX_GPIO_Init+0x128>)
 8000226:	f000 fe97 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_ON_Pin;
 800022a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800022e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000230:	2301      	movs	r3, #1
 8000232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000234:	2300      	movs	r3, #0
 8000236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000238:	2302      	movs	r3, #2
 800023a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_ON_GPIO_Port, &GPIO_InitStruct);
 800023c:	f107 0310 	add.w	r3, r7, #16
 8000240:	4619      	mov	r1, r3
 8000242:	480d      	ldr	r0, [pc, #52]	@ (8000278 <MX_GPIO_Init+0x12c>)
 8000244:	f000 fe88 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : VENDING_EN_PIN*/
  GPIO_InitStruct.Pin = VENDING_EN_Pin;
 8000248:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800024c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800024e:	2300      	movs	r3, #0
 8000250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000252:	2301      	movs	r3, #1
 8000254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000256:	2302      	movs	r3, #2
 8000258:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VENDING_EN_GPIO_Port, &GPIO_InitStruct);
 800025a:	f107 0310 	add.w	r3, r7, #16
 800025e:	4619      	mov	r1, r3
 8000260:	4804      	ldr	r0, [pc, #16]	@ (8000274 <MX_GPIO_Init+0x128>)
 8000262:	f000 fe79 	bl	8000f58 <HAL_GPIO_Init>
}
 8000266:	bf00      	nop
 8000268:	3720      	adds	r7, #32
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40021000 	.word	0x40021000
 8000274:	40010c00 	.word	0x40010c00
 8000278:	40010800 	.word	0x40010800
 800027c:	40011000 	.word	0x40011000

08000280 <CDC_Break_Callback>:
void MDB_SendResponseWithModeBit(uint16_t *data, uint8_t dataLength);


/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
void CDC_Break_Callback() {
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  break_timer = BREAK_DELAY;
 8000284:	4b03      	ldr	r3, [pc, #12]	@ (8000294 <CDC_Break_Callback+0x14>)
 8000286:	2264      	movs	r2, #100	@ 0x64
 8000288:	801a      	strh	r2, [r3, #0]
}
 800028a:	bf00      	nop
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	20000a34 	.word	0x20000a34

08000298 <CDC_Receive_Callback>:

void CDC_Receive_Callback(uint8_t* Buf, uint32_t Len) {
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
 80002a0:	6039      	str	r1, [r7, #0]
}
 80002a2:	bf00      	nop
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr

080002ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  if (huart == &huart1) {
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	4a37      	ldr	r2, [pc, #220]	@ (8000394 <HAL_UART_RxCpltCallback+0xe8>)
 80002b8:	4293      	cmp	r3, r2
 80002ba:	d167      	bne.n	800038c <HAL_UART_RxCpltCallback+0xe0>
    uint16_t word = mdb_rx_buf[0]&0x1FF;
 80002bc:	4b36      	ldr	r3, [pc, #216]	@ (8000398 <HAL_UART_RxCpltCallback+0xec>)
 80002be:	881b      	ldrh	r3, [r3, #0]
 80002c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80002c4:	81bb      	strh	r3, [r7, #12]
    // check if the BV_CMD_RXhandler is ready to recieve a new command
    switch (BV_StateManager.BV_CMD_RX_StateHandler)
 80002c6:	4b35      	ldr	r3, [pc, #212]	@ (800039c <HAL_UART_RxCpltCallback+0xf0>)
 80002c8:	785b      	ldrb	r3, [r3, #1]
 80002ca:	2b03      	cmp	r3, #3
 80002cc:	d856      	bhi.n	800037c <HAL_UART_RxCpltCallback+0xd0>
 80002ce:	a201      	add	r2, pc, #4	@ (adr r2, 80002d4 <HAL_UART_RxCpltCallback+0x28>)
 80002d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d4:	080002e5 	.word	0x080002e5
 80002d8:	08000339 	.word	0x08000339
 80002dc:	0800037d 	.word	0x0800037d
 80002e0:	0800037d 	.word	0x0800037d
    {
    case CMD_RX_READY:
      // Check if the first byte is a valid VMC command
      for (uint8_t i = 0; i < VMC_CMD_MAX_NUMBER; i++)
 80002e4:	2300      	movs	r3, #0
 80002e6:	73fb      	strb	r3, [r7, #15]
 80002e8:	e022      	b.n	8000330 <HAL_UART_RxCpltCallback+0x84>
      {
        if( word == VMC_CMDs[i].CMD[0])
 80002ea:	7bfb      	ldrb	r3, [r7, #15]
 80002ec:	4a2c      	ldr	r2, [pc, #176]	@ (80003a0 <HAL_UART_RxCpltCallback+0xf4>)
 80002ee:	2194      	movs	r1, #148	@ 0x94
 80002f0:	fb01 f303 	mul.w	r3, r1, r3
 80002f4:	4413      	add	r3, r2
 80002f6:	881b      	ldrh	r3, [r3, #0]
 80002f8:	89ba      	ldrh	r2, [r7, #12]
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d115      	bne.n	800032a <HAL_UART_RxCpltCallback+0x7e>
        {
          // Command found, recieve rest of the command
          BV_StateManager.BV_CMD_RX_StateHandler = CMD_RX_INPROGRESS;
 80002fe:	4b27      	ldr	r3, [pc, #156]	@ (800039c <HAL_UART_RxCpltCallback+0xf0>)
 8000300:	2201      	movs	r2, #1
 8000302:	705a      	strb	r2, [r3, #1]
          BV_MDB_BusManager.MDB_RX_CMD_Index = i; // Store the Rx command index
 8000304:	4a27      	ldr	r2, [pc, #156]	@ (80003a4 <HAL_UART_RxCpltCallback+0xf8>)
 8000306:	7bfb      	ldrb	r3, [r7, #15]
 8000308:	f882 3094 	strb.w	r3, [r2, #148]	@ 0x94
          BV_MDB_BusManager.MDB_RXbuffer[BV_MDB_BusManager.RXBuffer_index++] = word;
 800030c:	4b25      	ldr	r3, [pc, #148]	@ (80003a4 <HAL_UART_RxCpltCallback+0xf8>)
 800030e:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8000312:	1c5a      	adds	r2, r3, #1
 8000314:	b2d1      	uxtb	r1, r2
 8000316:	4a23      	ldr	r2, [pc, #140]	@ (80003a4 <HAL_UART_RxCpltCallback+0xf8>)
 8000318:	f882 1090 	strb.w	r1, [r2, #144]	@ 0x90
 800031c:	4619      	mov	r1, r3
 800031e:	4a21      	ldr	r2, [pc, #132]	@ (80003a4 <HAL_UART_RxCpltCallback+0xf8>)
 8000320:	89bb      	ldrh	r3, [r7, #12]
 8000322:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
          break;
 8000326:	bf00      	nop
        }
      }
      break;
 8000328:	e02b      	b.n	8000382 <HAL_UART_RxCpltCallback+0xd6>
      for (uint8_t i = 0; i < VMC_CMD_MAX_NUMBER; i++)
 800032a:	7bfb      	ldrb	r3, [r7, #15]
 800032c:	3301      	adds	r3, #1
 800032e:	73fb      	strb	r3, [r7, #15]
 8000330:	7bfb      	ldrb	r3, [r7, #15]
 8000332:	2b0d      	cmp	r3, #13
 8000334:	d9d9      	bls.n	80002ea <HAL_UART_RxCpltCallback+0x3e>
      break;
 8000336:	e024      	b.n	8000382 <HAL_UART_RxCpltCallback+0xd6>
    case CMD_RX_INPROGRESS:
      // Store the received word in the RX buffer
      BV_MDB_BusManager.MDB_RXbuffer[BV_MDB_BusManager.RXBuffer_index++] = word;
 8000338:	4b1a      	ldr	r3, [pc, #104]	@ (80003a4 <HAL_UART_RxCpltCallback+0xf8>)
 800033a:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800033e:	1c5a      	adds	r2, r3, #1
 8000340:	b2d1      	uxtb	r1, r2
 8000342:	4a18      	ldr	r2, [pc, #96]	@ (80003a4 <HAL_UART_RxCpltCallback+0xf8>)
 8000344:	f882 1090 	strb.w	r1, [r2, #144]	@ 0x90
 8000348:	4619      	mov	r1, r3
 800034a:	4a16      	ldr	r2, [pc, #88]	@ (80003a4 <HAL_UART_RxCpltCallback+0xf8>)
 800034c:	89bb      	ldrh	r3, [r7, #12]
 800034e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
      // Check if the command is fully received
      if (BV_MDB_BusManager.RXBuffer_index >= VMC_CMDs[BV_MDB_BusManager.MDB_RX_CMD_Index].CMD_Length)
 8000352:	4b14      	ldr	r3, [pc, #80]	@ (80003a4 <HAL_UART_RxCpltCallback+0xf8>)
 8000354:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8000358:	4619      	mov	r1, r3
 800035a:	4b12      	ldr	r3, [pc, #72]	@ (80003a4 <HAL_UART_RxCpltCallback+0xf8>)
 800035c:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8000360:	4618      	mov	r0, r3
 8000362:	4a0f      	ldr	r2, [pc, #60]	@ (80003a0 <HAL_UART_RxCpltCallback+0xf4>)
 8000364:	2394      	movs	r3, #148	@ 0x94
 8000366:	fb00 f303 	mul.w	r3, r0, r3
 800036a:	4413      	add	r3, r2
 800036c:	3348      	adds	r3, #72	@ 0x48
 800036e:	881b      	ldrh	r3, [r3, #0]
 8000370:	4299      	cmp	r1, r3
 8000372:	d305      	bcc.n	8000380 <HAL_UART_RxCpltCallback+0xd4>
      {
        // Command fully received, process it
        BV_StateManager.BV_CMD_RX_StateHandler = CMD_RX_DONE;
 8000374:	4b09      	ldr	r3, [pc, #36]	@ (800039c <HAL_UART_RxCpltCallback+0xf0>)
 8000376:	2202      	movs	r2, #2
 8000378:	705a      	strb	r2, [r3, #1]
        // MDB_HandleCommand(BV_MDB_BusManager.MDB_RXbuffer, BV_MDB_BusManager.RXBuffer_index);
      }
      break;
 800037a:	e001      	b.n	8000380 <HAL_UART_RxCpltCallback+0xd4>
      break;
    case CMD_RX_BUSY:
      //TODO handle the state of processing at this time
      break;
    default:
      break;
 800037c:	bf00      	nop
 800037e:	e000      	b.n	8000382 <HAL_UART_RxCpltCallback+0xd6>
      break;
 8000380:	bf00      	nop
    }
    HAL_UART_Receive_IT(huart, (uint8_t *) mdb_rx_buf, 1);
 8000382:	2201      	movs	r2, #1
 8000384:	4904      	ldr	r1, [pc, #16]	@ (8000398 <HAL_UART_RxCpltCallback+0xec>)
 8000386:	6878      	ldr	r0, [r7, #4]
 8000388:	f002 ff9c 	bl	80032c4 <HAL_UART_Receive_IT>
  }
}
 800038c:	bf00      	nop
 800038e:	3710      	adds	r7, #16
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	20000a38 	.word	0x20000a38
 8000398:	20000a30 	.word	0x20000a30
 800039c:	20000098 	.word	0x20000098
 80003a0:	2000009c 	.word	0x2000009c
 80003a4:	20000000 	.word	0x20000000

080003a8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]

  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	68da      	ldr	r2, [r3, #12]
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80003be:	60da      	str	r2, [r3, #12]
  __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	68da      	ldr	r2, [r3, #12]
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80003ce:	60da      	str	r2, [r3, #12]

  /* Check if a receive process is ongoing or not */
  if(huart->gState == HAL_UART_STATE_BUSY_TX_RX)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	2b23      	cmp	r3, #35	@ 0x23
 80003da:	d104      	bne.n	80003e6 <HAL_UART_ErrorCallback+0x3e>
  {
    huart->gState = HAL_UART_STATE_BUSY_RX;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	2222      	movs	r2, #34	@ 0x22
 80003e0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80003e4:	e003      	b.n	80003ee <HAL_UART_ErrorCallback+0x46>
  }
  else
  {
    huart->gState = HAL_UART_STATE_READY;
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	2220      	movs	r2, #32
 80003ea:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }
   HAL_UART_RxCpltCallback(huart);
 80003ee:	6878      	ldr	r0, [r7, #4]
 80003f0:	f7ff ff5c 	bl	80002ac <HAL_UART_RxCpltCallback>
}
 80003f4:	bf00      	nop
 80003f6:	3708      	adds	r7, #8
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}

080003fc <MDB_Peripheral_Init>:


// MDB Peripheral Initialization Function
void MDB_Peripheral_Init(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  BV_StateManager.BV_StateHnadler = STATE_RESTART; // Set initial state to RESTART
 8000400:	4b04      	ldr	r3, [pc, #16]	@ (8000414 <MDB_Peripheral_Init+0x18>)
 8000402:	2203      	movs	r2, #3
 8000404:	701a      	strb	r2, [r3, #0]
  BV_StateManager.BV_CMD_RX_StateHandler = CMD_RX_READY; // Set command reception state to READY
 8000406:	4b03      	ldr	r3, [pc, #12]	@ (8000414 <MDB_Peripheral_Init+0x18>)
 8000408:	2200      	movs	r2, #0
 800040a:	705a      	strb	r2, [r3, #1]
}
 800040c:	bf00      	nop
 800040e:	46bd      	mov	sp, r7
 8000410:	bc80      	pop	{r7}
 8000412:	4770      	bx	lr
 8000414:	20000098 	.word	0x20000098

08000418 <MDB_SendResponseWithModeBit>:

void MDB_SendResponseWithModeBit(uint16_t *data, uint8_t dataLength)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	460b      	mov	r3, r1
 8000422:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit_IT(&huart1, (uint8_t *)data, dataLength);
 8000424:	78fb      	ldrb	r3, [r7, #3]
 8000426:	b29b      	uxth	r3, r3
 8000428:	461a      	mov	r2, r3
 800042a:	6879      	ldr	r1, [r7, #4]
 800042c:	4803      	ldr	r0, [pc, #12]	@ (800043c <MDB_SendResponseWithModeBit+0x24>)
 800042e:	f002 ff05 	bl	800323c <HAL_UART_Transmit_IT>
}
 8000432:	bf00      	nop
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	20000a38 	.word	0x20000a38

08000440 <MDB_HandleCommand>:
//         MDB_SendResponseWithModeBit(mdb_tx_buf, BV_MDB_BusManager.TXBuffer_index);
//         BV_StateManager.BV_CMD_TX_StateHandler = CMD_TX_DONE; // Set the state to DONE after transmission
//     }
// }
void MDB_HandleCommand(uint16_t *BV_RxBuffer, uint8_t length)
{
 8000440:	b590      	push	{r4, r7, lr}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
 8000448:	460b      	mov	r3, r1
 800044a:	70fb      	strb	r3, [r7, #3]
  switch (BV_StateManager.BV_CMD_Process_StateHandler)
 800044c:	4b85      	ldr	r3, [pc, #532]	@ (8000664 <MDB_HandleCommand+0x224>)
 800044e:	78db      	ldrb	r3, [r3, #3]
 8000450:	2b02      	cmp	r3, #2
 8000452:	f000 80f6 	beq.w	8000642 <MDB_HandleCommand+0x202>
 8000456:	2b02      	cmp	r3, #2
 8000458:	f300 80fb 	bgt.w	8000652 <MDB_HandleCommand+0x212>
 800045c:	2b00      	cmp	r3, #0
 800045e:	d003      	beq.n	8000468 <MDB_HandleCommand+0x28>
 8000460:	2b01      	cmp	r3, #1
 8000462:	f000 80f8 	beq.w	8000656 <MDB_HandleCommand+0x216>
      BV_MDB_BusManager.RXBuffer_index = 0; // Reset the RX buffer index for the next command
      break;
    default:
      // Error: Command processing state is not ready or in progress
      // TODO Handle error appropriately
      return;
 8000466:	e0f4      	b.n	8000652 <MDB_HandleCommand+0x212>
      if (BV_StateManager.BV_CMD_RX_StateHandler == CMD_RX_DONE)
 8000468:	4b7e      	ldr	r3, [pc, #504]	@ (8000664 <MDB_HandleCommand+0x224>)
 800046a:	785b      	ldrb	r3, [r3, #1]
 800046c:	2b02      	cmp	r3, #2
 800046e:	f040 80f4 	bne.w	800065a <MDB_HandleCommand+0x21a>
        BV_StateManager.BV_CMD_RX_StateHandler = CMD_RX_BUSY; // Set the state to BUSY
 8000472:	4b7c      	ldr	r3, [pc, #496]	@ (8000664 <MDB_HandleCommand+0x224>)
 8000474:	2203      	movs	r2, #3
 8000476:	705a      	strb	r2, [r3, #1]
        BV_StateManager.BV_CMD_Process_StateHandler = CMD_PROCESS_INPROGRESS; // Set the command processing state to INPROGRESS
 8000478:	4b7a      	ldr	r3, [pc, #488]	@ (8000664 <MDB_HandleCommand+0x224>)
 800047a:	2201      	movs	r2, #1
 800047c:	70da      	strb	r2, [r3, #3]
        int temp_index = BV_MDB_BusManager.MDB_RX_CMD_Index;
 800047e:	4b7a      	ldr	r3, [pc, #488]	@ (8000668 <MDB_HandleCommand+0x228>)
 8000480:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8000484:	60fb      	str	r3, [r7, #12]
        int temp_length = VMC_CMDs[temp_index].CMD_Length;
 8000486:	4a79      	ldr	r2, [pc, #484]	@ (800066c <MDB_HandleCommand+0x22c>)
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	2194      	movs	r1, #148	@ 0x94
 800048c:	fb01 f303 	mul.w	r3, r1, r3
 8000490:	4413      	add	r3, r2
 8000492:	3348      	adds	r3, #72	@ 0x48
 8000494:	881b      	ldrh	r3, [r3, #0]
 8000496:	60bb      	str	r3, [r7, #8]
        if (BV_MDB_BusManager.RXBuffer_index != VMC_CMDs[temp_index].CMD_Length)
 8000498:	4b73      	ldr	r3, [pc, #460]	@ (8000668 <MDB_HandleCommand+0x228>)
 800049a:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800049e:	4618      	mov	r0, r3
 80004a0:	4a72      	ldr	r2, [pc, #456]	@ (800066c <MDB_HandleCommand+0x22c>)
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	2194      	movs	r1, #148	@ 0x94
 80004a6:	fb01 f303 	mul.w	r3, r1, r3
 80004aa:	4413      	add	r3, r2
 80004ac:	3348      	adds	r3, #72	@ 0x48
 80004ae:	881b      	ldrh	r3, [r3, #0]
 80004b0:	4298      	cmp	r0, r3
 80004b2:	f040 80bb 	bne.w	800062c <MDB_HandleCommand+0x1ec>
          if (BV_RxBuffer[(BV_MDB_BusManager.RXBuffer_index)-1] == VMC_CMDs[temp_index].CMD[temp_length-1])
 80004b6:	4b6c      	ldr	r3, [pc, #432]	@ (8000668 <MDB_HandleCommand+0x228>)
 80004b8:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 80004bc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80004c0:	3b01      	subs	r3, #1
 80004c2:	005b      	lsls	r3, r3, #1
 80004c4:	687a      	ldr	r2, [r7, #4]
 80004c6:	4413      	add	r3, r2
 80004c8:	881a      	ldrh	r2, [r3, #0]
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	3b01      	subs	r3, #1
 80004ce:	4867      	ldr	r0, [pc, #412]	@ (800066c <MDB_HandleCommand+0x22c>)
 80004d0:	68f9      	ldr	r1, [r7, #12]
 80004d2:	244a      	movs	r4, #74	@ 0x4a
 80004d4:	fb04 f101 	mul.w	r1, r4, r1
 80004d8:	440b      	add	r3, r1
 80004da:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80004de:	429a      	cmp	r2, r3
 80004e0:	f040 80a4 	bne.w	800062c <MDB_HandleCommand+0x1ec>
            BV_MDB_BusManager.MDB_Process_CMD_Index = temp_index; // Set the command index to the command being processed
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	b2da      	uxtb	r2, r3
 80004e8:	4b5f      	ldr	r3, [pc, #380]	@ (8000668 <MDB_HandleCommand+0x228>)
 80004ea:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
            if (VMC_CMDs[temp_index].CMD[0] == VMC_CMDs[VMC_CMD_0x0066].CMD[0])
 80004ee:	4a5f      	ldr	r2, [pc, #380]	@ (800066c <MDB_HandleCommand+0x22c>)
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	2194      	movs	r1, #148	@ 0x94
 80004f4:	fb01 f303 	mul.w	r3, r1, r3
 80004f8:	4413      	add	r3, r2
 80004fa:	881a      	ldrh	r2, [r3, #0]
 80004fc:	4b5b      	ldr	r3, [pc, #364]	@ (800066c <MDB_HandleCommand+0x22c>)
 80004fe:	f8b3 3534 	ldrh.w	r3, [r3, #1332]	@ 0x534
 8000502:	429a      	cmp	r2, r3
 8000504:	d166      	bne.n	80005d4 <MDB_HandleCommand+0x194>
              switch (BV_StateManager.BV_StateHnadler)
 8000506:	4b57      	ldr	r3, [pc, #348]	@ (8000664 <MDB_HandleCommand+0x224>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b03      	cmp	r3, #3
 800050c:	d006      	beq.n	800051c <MDB_HandleCommand+0xdc>
 800050e:	2b03      	cmp	r3, #3
 8000510:	dc5c      	bgt.n	80005cc <MDB_HandleCommand+0x18c>
 8000512:	2b00      	cmp	r3, #0
 8000514:	d013      	beq.n	800053e <MDB_HandleCommand+0xfe>
 8000516:	2b02      	cmp	r3, #2
 8000518:	d01f      	beq.n	800055a <MDB_HandleCommand+0x11a>
 800051a:	e057      	b.n	80005cc <MDB_HandleCommand+0x18c>
                VMC_CMDs[VMC_CMD_0x0066].CMD_Response[0] = 0x0006;
 800051c:	4b53      	ldr	r3, [pc, #332]	@ (800066c <MDB_HandleCommand+0x22c>)
 800051e:	2206      	movs	r2, #6
 8000520:	f8a3 257e 	strh.w	r2, [r3, #1406]	@ 0x57e
                VMC_CMDs[VMC_CMD_0x0066].CMD_Response[1] = 0x0106;
 8000524:	4b51      	ldr	r3, [pc, #324]	@ (800066c <MDB_HandleCommand+0x22c>)
 8000526:	f44f 7283 	mov.w	r2, #262	@ 0x106
 800052a:	f8a3 2580 	strh.w	r2, [r3, #1408]	@ 0x580
                VMC_CMDs[VMC_CMD_0x0066].CMD_Response_Length = 2;
 800052e:	4b4f      	ldr	r3, [pc, #316]	@ (800066c <MDB_HandleCommand+0x22c>)
 8000530:	2202      	movs	r2, #2
 8000532:	f8a3 25c6 	strh.w	r2, [r3, #1478]	@ 0x5c6
                BV_StateManager.BV_StateHnadler = STATE_DISABLED; // Set the system state to disabled
 8000536:	4b4b      	ldr	r3, [pc, #300]	@ (8000664 <MDB_HandleCommand+0x224>)
 8000538:	2200      	movs	r2, #0
 800053a:	701a      	strb	r2, [r3, #0]
                break;
 800053c:	e05b      	b.n	80005f6 <MDB_HandleCommand+0x1b6>
                VMC_CMDs[VMC_CMD_0x0066].CMD_Response[0] = 0x0009;
 800053e:	4b4b      	ldr	r3, [pc, #300]	@ (800066c <MDB_HandleCommand+0x22c>)
 8000540:	2209      	movs	r2, #9
 8000542:	f8a3 257e 	strh.w	r2, [r3, #1406]	@ 0x57e
                VMC_CMDs[VMC_CMD_0x0066].CMD_Response[1] = 0x0109;
 8000546:	4b49      	ldr	r3, [pc, #292]	@ (800066c <MDB_HandleCommand+0x22c>)
 8000548:	f240 1209 	movw	r2, #265	@ 0x109
 800054c:	f8a3 2580 	strh.w	r2, [r3, #1408]	@ 0x580
                VMC_CMDs[VMC_CMD_0x0066].CMD_Response_Length = 2;
 8000550:	4b46      	ldr	r3, [pc, #280]	@ (800066c <MDB_HandleCommand+0x22c>)
 8000552:	2202      	movs	r2, #2
 8000554:	f8a3 25c6 	strh.w	r2, [r3, #1478]	@ 0x5c6
                break;
 8000558:	e04d      	b.n	80005f6 <MDB_HandleCommand+0x1b6>
                if (HAL_GPIO_ReadPin(VENDING_EN_GPIO_Port, VENDING_EN_Pin) == GPIO_PIN_RESET
 800055a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800055e:	4844      	ldr	r0, [pc, #272]	@ (8000670 <MDB_HandleCommand+0x230>)
 8000560:	f000 ff62 	bl	8001428 <HAL_GPIO_ReadPin>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d117      	bne.n	800059a <MDB_HandleCommand+0x15a>
                                     && Vending_EN == false)
 800056a:	4b42      	ldr	r3, [pc, #264]	@ (8000674 <MDB_HandleCommand+0x234>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	f083 0301 	eor.w	r3, r3, #1
 8000572:	b2db      	uxtb	r3, r3
 8000574:	2b00      	cmp	r3, #0
 8000576:	d010      	beq.n	800059a <MDB_HandleCommand+0x15a>
                    VMC_CMDs[VMC_CMD_0x0066].CMD_Response[0] = 0x0083;
 8000578:	4b3c      	ldr	r3, [pc, #240]	@ (800066c <MDB_HandleCommand+0x22c>)
 800057a:	2283      	movs	r2, #131	@ 0x83
 800057c:	f8a3 257e 	strh.w	r2, [r3, #1406]	@ 0x57e
                    VMC_CMDs[VMC_CMD_0x0066].CMD_Response[1] = 0x0183;
 8000580:	4b3a      	ldr	r3, [pc, #232]	@ (800066c <MDB_HandleCommand+0x22c>)
 8000582:	f240 1283 	movw	r2, #387	@ 0x183
 8000586:	f8a3 2580 	strh.w	r2, [r3, #1408]	@ 0x580
                    VMC_CMDs[VMC_CMD_0x0066].CMD_Response_Length = 2;
 800058a:	4b38      	ldr	r3, [pc, #224]	@ (800066c <MDB_HandleCommand+0x22c>)
 800058c:	2202      	movs	r2, #2
 800058e:	f8a3 25c6 	strh.w	r2, [r3, #1478]	@ 0x5c6
                    Vending_EN = true;
 8000592:	4b38      	ldr	r3, [pc, #224]	@ (8000674 <MDB_HandleCommand+0x234>)
 8000594:	2201      	movs	r2, #1
 8000596:	701a      	strb	r2, [r3, #0]
 8000598:	e008      	b.n	80005ac <MDB_HandleCommand+0x16c>
                    VMC_CMDs[VMC_CMD_0x0066].CMD_Response[0] = 0x0100;
 800059a:	4b34      	ldr	r3, [pc, #208]	@ (800066c <MDB_HandleCommand+0x22c>)
 800059c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005a0:	f8a3 257e 	strh.w	r2, [r3, #1406]	@ 0x57e
                    VMC_CMDs[VMC_CMD_0x0066].CMD_Response_Length = 1;
 80005a4:	4b31      	ldr	r3, [pc, #196]	@ (800066c <MDB_HandleCommand+0x22c>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	f8a3 25c6 	strh.w	r2, [r3, #1478]	@ 0x5c6
                  if (HAL_GPIO_ReadPin(VENDING_EN_GPIO_Port, VENDING_EN_Pin) == GPIO_PIN_SET
 80005ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005b0:	482f      	ldr	r0, [pc, #188]	@ (8000670 <MDB_HandleCommand+0x230>)
 80005b2:	f000 ff39 	bl	8001428 <HAL_GPIO_ReadPin>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d11b      	bne.n	80005f4 <MDB_HandleCommand+0x1b4>
                                     && Vending_EN == true)
 80005bc:	4b2d      	ldr	r3, [pc, #180]	@ (8000674 <MDB_HandleCommand+0x234>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d017      	beq.n	80005f4 <MDB_HandleCommand+0x1b4>
                    Vending_EN = false;
 80005c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000674 <MDB_HandleCommand+0x234>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
                break;
 80005ca:	e013      	b.n	80005f4 <MDB_HandleCommand+0x1b4>
                BV_StateManager.BV_StateHnadler = STATE_ERROR; // Set the system state to error
 80005cc:	4b25      	ldr	r3, [pc, #148]	@ (8000664 <MDB_HandleCommand+0x224>)
 80005ce:	2204      	movs	r2, #4
 80005d0:	701a      	strb	r2, [r3, #0]
                break;
 80005d2:	e010      	b.n	80005f6 <MDB_HandleCommand+0x1b6>
            else if (VMC_CMDs[temp_index].CMD[0] == VMC_CMDs[VMC_CMD_0x009D].CMD[0])
 80005d4:	4a25      	ldr	r2, [pc, #148]	@ (800066c <MDB_HandleCommand+0x22c>)
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	2194      	movs	r1, #148	@ 0x94
 80005da:	fb01 f303 	mul.w	r3, r1, r3
 80005de:	4413      	add	r3, r2
 80005e0:	881a      	ldrh	r2, [r3, #0]
 80005e2:	4b22      	ldr	r3, [pc, #136]	@ (800066c <MDB_HandleCommand+0x22c>)
 80005e4:	f8b3 3784 	ldrh.w	r3, [r3, #1924]	@ 0x784
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d104      	bne.n	80005f6 <MDB_HandleCommand+0x1b6>
              BV_StateManager.BV_StateHnadler = STATE_READY; // Set the system state to ready
 80005ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000664 <MDB_HandleCommand+0x224>)
 80005ee:	2202      	movs	r2, #2
 80005f0:	701a      	strb	r2, [r3, #0]
 80005f2:	e000      	b.n	80005f6 <MDB_HandleCommand+0x1b6>
                break;
 80005f4:	bf00      	nop
            MDB_SendResponseWithModeBit(VMC_CMDs[BV_MDB_BusManager.MDB_Process_CMD_Index].CMD_Response,
 80005f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000668 <MDB_HandleCommand+0x228>)
 80005f8:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 80005fc:	461a      	mov	r2, r3
 80005fe:	2394      	movs	r3, #148	@ 0x94
 8000600:	fb02 f303 	mul.w	r3, r2, r3
 8000604:	3348      	adds	r3, #72	@ 0x48
 8000606:	4a19      	ldr	r2, [pc, #100]	@ (800066c <MDB_HandleCommand+0x22c>)
 8000608:	4413      	add	r3, r2
 800060a:	1c9a      	adds	r2, r3, #2
                                        VMC_CMDs[BV_MDB_BusManager.MDB_Process_CMD_Index].CMD_Response_Length);
 800060c:	4b16      	ldr	r3, [pc, #88]	@ (8000668 <MDB_HandleCommand+0x228>)
 800060e:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 8000612:	4618      	mov	r0, r3
 8000614:	4915      	ldr	r1, [pc, #84]	@ (800066c <MDB_HandleCommand+0x22c>)
 8000616:	2394      	movs	r3, #148	@ 0x94
 8000618:	fb00 f303 	mul.w	r3, r0, r3
 800061c:	440b      	add	r3, r1
 800061e:	3392      	adds	r3, #146	@ 0x92
 8000620:	881b      	ldrh	r3, [r3, #0]
            MDB_SendResponseWithModeBit(VMC_CMDs[BV_MDB_BusManager.MDB_Process_CMD_Index].CMD_Response,
 8000622:	b2db      	uxtb	r3, r3
 8000624:	4619      	mov	r1, r3
 8000626:	4610      	mov	r0, r2
 8000628:	f7ff fef6 	bl	8000418 <MDB_SendResponseWithModeBit>
        BV_StateManager.BV_CMD_RX_StateHandler = CMD_RX_READY; // Set the state to READY for the next command
 800062c:	4b0d      	ldr	r3, [pc, #52]	@ (8000664 <MDB_HandleCommand+0x224>)
 800062e:	2200      	movs	r2, #0
 8000630:	705a      	strb	r2, [r3, #1]
        BV_StateManager.BV_CMD_Process_StateHandler = CMD_PROCESS_READY; // Set the command processing state to DONE
 8000632:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <MDB_HandleCommand+0x224>)
 8000634:	2200      	movs	r2, #0
 8000636:	70da      	strb	r2, [r3, #3]
        BV_MDB_BusManager.RXBuffer_index = 0; // Reset the RX buffer index
 8000638:	4b0b      	ldr	r3, [pc, #44]	@ (8000668 <MDB_HandleCommand+0x228>)
 800063a:	2200      	movs	r2, #0
 800063c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      break;
 8000640:	e00c      	b.n	800065c <MDB_HandleCommand+0x21c>
      BV_StateManager.BV_CMD_Process_StateHandler = CMD_PROCESS_READY; // Set the command processing state to READY
 8000642:	4b08      	ldr	r3, [pc, #32]	@ (8000664 <MDB_HandleCommand+0x224>)
 8000644:	2200      	movs	r2, #0
 8000646:	70da      	strb	r2, [r3, #3]
      BV_MDB_BusManager.RXBuffer_index = 0; // Reset the RX buffer index for the next command
 8000648:	4b07      	ldr	r3, [pc, #28]	@ (8000668 <MDB_HandleCommand+0x228>)
 800064a:	2200      	movs	r2, #0
 800064c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      break;
 8000650:	e004      	b.n	800065c <MDB_HandleCommand+0x21c>
      return;
 8000652:	bf00      	nop
 8000654:	e002      	b.n	800065c <MDB_HandleCommand+0x21c>
      return;
 8000656:	bf00      	nop
 8000658:	e000      	b.n	800065c <MDB_HandleCommand+0x21c>
        return;
 800065a:	bf00      	nop
  }
}
 800065c:	3714      	adds	r7, #20
 800065e:	46bd      	mov	sp, r7
 8000660:	bd90      	pop	{r4, r7, pc}
 8000662:	bf00      	nop
 8000664:	20000098 	.word	0x20000098
 8000668:	20000000 	.word	0x20000000
 800066c:	2000009c 	.word	0x2000009c
 8000670:	40010c00 	.word	0x40010c00
 8000674:	20000a32 	.word	0x20000a32

08000678 <main>:

int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067c:	f000 fa24 	bl	8000ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000680:	f000 f822 	bl	80006c8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000684:	f7ff fd62 	bl	800014c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000688:	f005 fc0a 	bl	8005ea0 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 800068c:	f000 f986 	bl	800099c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  usb_break_timer = SETUP_DELAY;
 8000690:	4b09      	ldr	r3, [pc, #36]	@ (80006b8 <main+0x40>)
 8000692:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000696:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 2 */

  // Initialize MDB Peripheral
  MDB_Peripheral_Init();
 8000698:	f7ff feb0 	bl	80003fc <MDB_Peripheral_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wmissing-noreturn"
  HAL_UART_Receive_IT(&huart1, (uint8_t *) mdb_rx_buf, 1);
 800069c:	2201      	movs	r2, #1
 800069e:	4907      	ldr	r1, [pc, #28]	@ (80006bc <main+0x44>)
 80006a0:	4807      	ldr	r0, [pc, #28]	@ (80006c0 <main+0x48>)
 80006a2:	f002 fe0f 	bl	80032c4 <HAL_UART_Receive_IT>
    //   HAL_GPIO_WritePin(USB_ON_GPIO_Port, USB_ON_Pin, GPIO_PIN_RESET);
    // } else {
    //   HAL_GPIO_WritePin(USB_ON_GPIO_Port, USB_ON_Pin, GPIO_PIN_SET);
    // }

    MDB_HandleCommand(BV_MDB_BusManager.MDB_RXbuffer, BV_MDB_BusManager.RXBuffer_index);
 80006a6:	4b07      	ldr	r3, [pc, #28]	@ (80006c4 <main+0x4c>)
 80006a8:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 80006ac:	4619      	mov	r1, r3
 80006ae:	4805      	ldr	r0, [pc, #20]	@ (80006c4 <main+0x4c>)
 80006b0:	f7ff fec6 	bl	8000440 <MDB_HandleCommand>
 80006b4:	e7f7      	b.n	80006a6 <main+0x2e>
 80006b6:	bf00      	nop
 80006b8:	20000a36 	.word	0x20000a36
 80006bc:	20000a30 	.word	0x20000a30
 80006c0:	20000a38 	.word	0x20000a38
 80006c4:	20000000 	.word	0x20000000

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	@ 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ce:	2301      	movs	r3, #1
 80006d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e0:	2302      	movs	r3, #2
 80006e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80006ea:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80006ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006f4:	4618      	mov	r0, r3
 80006f6:	f001 fe41 	bl	800237c <HAL_RCC_OscConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d004      	beq.n	800070a <SystemClock_Config+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000700:	f44f 71bb 	mov.w	r1, #374	@ 0x176
 8000704:	4821      	ldr	r0, [pc, #132]	@ (800078c <SystemClock_Config+0xc4>)
 8000706:	f000 f845 	bl	8000794 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070a:	230f      	movs	r3, #15
 800070c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070e:	2302      	movs	r3, #2
 8000710:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000716:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800071a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	2101      	movs	r1, #1
 8000726:	4618      	mov	r0, r3
 8000728:	f002 f986 	bl	8002a38 <HAL_RCC_ClockConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d004      	beq.n	800073c <SystemClock_Config+0x74>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000732:	f44f 71c2 	mov.w	r1, #388	@ 0x184
 8000736:	4815      	ldr	r0, [pc, #84]	@ (800078c <SystemClock_Config+0xc4>)
 8000738:	f000 f82c 	bl	8000794 <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800073c:	2310      	movs	r3, #16
 800073e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000740:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000744:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	4618      	mov	r0, r3
 800074a:	f002 fbc5 	bl	8002ed8 <HAL_RCCEx_PeriphCLKConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d004      	beq.n	800075e <SystemClock_Config+0x96>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000754:	f240 118b 	movw	r1, #395	@ 0x18b
 8000758:	480c      	ldr	r0, [pc, #48]	@ (800078c <SystemClock_Config+0xc4>)
 800075a:	f000 f81b 	bl	8000794 <_Error_Handler>
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800075e:	f002 fb6b 	bl	8002e38 <HAL_RCC_GetHCLKFreq>
 8000762:	4603      	mov	r3, r0
 8000764:	4a0a      	ldr	r2, [pc, #40]	@ (8000790 <SystemClock_Config+0xc8>)
 8000766:	fba2 2303 	umull	r2, r3, r2, r3
 800076a:	099b      	lsrs	r3, r3, #6
 800076c:	4618      	mov	r0, r3
 800076e:	f000 fb3d 	bl	8000dec <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000772:	2004      	movs	r0, #4
 8000774:	f000 fb46 	bl	8000e04 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000778:	2200      	movs	r2, #0
 800077a:	2100      	movs	r1, #0
 800077c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000780:	f000 faf0 	bl	8000d64 <HAL_NVIC_SetPriority>
}
 8000784:	bf00      	nop
 8000786:	3750      	adds	r7, #80	@ 0x50
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	08006834 	.word	0x08006834
 8000790:	10624dd3 	.word	0x10624dd3

08000794 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800079e:	bf00      	nop
 80007a0:	e7fd      	b.n	800079e <_Error_Handler+0xa>

080007a2 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{
 80007a2:	b480      	push	{r7}
 80007a4:	b083      	sub	sp, #12
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
 80007aa:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80007ac:	bf00      	nop
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr
	...

080007b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007be:	4b2b      	ldr	r3, [pc, #172]	@ (800086c <HAL_MspInit+0xb4>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	4a2a      	ldr	r2, [pc, #168]	@ (800086c <HAL_MspInit+0xb4>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6193      	str	r3, [r2, #24]
 80007ca:	4b28      	ldr	r3, [pc, #160]	@ (800086c <HAL_MspInit+0xb4>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	4b25      	ldr	r3, [pc, #148]	@ (800086c <HAL_MspInit+0xb4>)
 80007d8:	69db      	ldr	r3, [r3, #28]
 80007da:	4a24      	ldr	r2, [pc, #144]	@ (800086c <HAL_MspInit+0xb4>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007e0:	61d3      	str	r3, [r2, #28]
 80007e2:	4b22      	ldr	r3, [pc, #136]	@ (800086c <HAL_MspInit+0xb4>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ee:	2003      	movs	r0, #3
 80007f0:	f000 fa98 	bl	8000d24 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2100      	movs	r1, #0
 80007f8:	f06f 000b 	mvn.w	r0, #11
 80007fc:	f000 fab2 	bl	8000d64 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000800:	2200      	movs	r2, #0
 8000802:	2100      	movs	r1, #0
 8000804:	f06f 000a 	mvn.w	r0, #10
 8000808:	f000 faac 	bl	8000d64 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800080c:	2200      	movs	r2, #0
 800080e:	2100      	movs	r1, #0
 8000810:	f06f 0009 	mvn.w	r0, #9
 8000814:	f000 faa6 	bl	8000d64 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000818:	2200      	movs	r2, #0
 800081a:	2100      	movs	r1, #0
 800081c:	f06f 0004 	mvn.w	r0, #4
 8000820:	f000 faa0 	bl	8000d64 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000824:	2200      	movs	r2, #0
 8000826:	2100      	movs	r1, #0
 8000828:	f06f 0003 	mvn.w	r0, #3
 800082c:	f000 fa9a 	bl	8000d64 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000830:	2200      	movs	r2, #0
 8000832:	2100      	movs	r1, #0
 8000834:	f06f 0001 	mvn.w	r0, #1
 8000838:	f000 fa94 	bl	8000d64 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800083c:	2200      	movs	r2, #0
 800083e:	2100      	movs	r1, #0
 8000840:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000844:	f000 fa8e 	bl	8000d64 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000848:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <HAL_MspInit+0xb8>)
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	4a04      	ldr	r2, [pc, #16]	@ (8000870 <HAL_MspInit+0xb8>)
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40021000 	.word	0x40021000
 8000870:	40010000 	.word	0x40010000

08000874 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr

08000880 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <HardFault_Handler+0x4>

08000888 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <MemManage_Handler+0x4>

08000890 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <BusFault_Handler+0x4>

08000898 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <UsageFault_Handler+0x4>

080008a0 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr

080008ac <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr

080008b8 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr

080008c4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  if (break_timer > 0) break_timer--;
 80008c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000904 <SysTick_Handler+0x40>)
 80008ca:	881b      	ldrh	r3, [r3, #0]
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d006      	beq.n	80008e0 <SysTick_Handler+0x1c>
 80008d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <SysTick_Handler+0x40>)
 80008d4:	881b      	ldrh	r3, [r3, #0]
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	3b01      	subs	r3, #1
 80008da:	b29a      	uxth	r2, r3
 80008dc:	4b09      	ldr	r3, [pc, #36]	@ (8000904 <SysTick_Handler+0x40>)
 80008de:	801a      	strh	r2, [r3, #0]
  if (usb_break_timer > 0) usb_break_timer--;
 80008e0:	4b09      	ldr	r3, [pc, #36]	@ (8000908 <SysTick_Handler+0x44>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d006      	beq.n	80008f8 <SysTick_Handler+0x34>
 80008ea:	4b07      	ldr	r3, [pc, #28]	@ (8000908 <SysTick_Handler+0x44>)
 80008ec:	881b      	ldrh	r3, [r3, #0]
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	3b01      	subs	r3, #1
 80008f2:	b29a      	uxth	r2, r3
 80008f4:	4b04      	ldr	r3, [pc, #16]	@ (8000908 <SysTick_Handler+0x44>)
 80008f6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f8:	f000 f92c 	bl	8000b54 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80008fc:	f000 faaa 	bl	8000e54 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000a34 	.word	0x20000a34
 8000908:	20000a36 	.word	0x20000a36

0800090c <USB_LP_CAN1_RX0_IRQHandler>:

/**
* @brief This function handles USB low priority or CAN RX0 interrupts.
*/
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000910:	4802      	ldr	r0, [pc, #8]	@ (800091c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000912:	f000 fee3 	bl	80016dc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20001674 	.word	0x20001674

08000920 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000924:	4802      	ldr	r0, [pc, #8]	@ (8000930 <USART1_IRQHandler+0x10>)
 8000926:	f002 fd21 	bl	800336c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000a38 	.word	0x20000a38

08000934 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000938:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <SystemInit+0x5c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a14      	ldr	r2, [pc, #80]	@ (8000990 <SystemInit+0x5c>)
 800093e:	f043 0301 	orr.w	r3, r3, #1
 8000942:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000944:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <SystemInit+0x5c>)
 8000946:	685a      	ldr	r2, [r3, #4]
 8000948:	4911      	ldr	r1, [pc, #68]	@ (8000990 <SystemInit+0x5c>)
 800094a:	4b12      	ldr	r3, [pc, #72]	@ (8000994 <SystemInit+0x60>)
 800094c:	4013      	ands	r3, r2
 800094e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000950:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <SystemInit+0x5c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a0e      	ldr	r2, [pc, #56]	@ (8000990 <SystemInit+0x5c>)
 8000956:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 800095a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800095e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000960:	4b0b      	ldr	r3, [pc, #44]	@ (8000990 <SystemInit+0x5c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a0a      	ldr	r2, [pc, #40]	@ (8000990 <SystemInit+0x5c>)
 8000966:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800096a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800096c:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <SystemInit+0x5c>)
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	4a07      	ldr	r2, [pc, #28]	@ (8000990 <SystemInit+0x5c>)
 8000972:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 8000976:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000978:	4b05      	ldr	r3, [pc, #20]	@ (8000990 <SystemInit+0x5c>)
 800097a:	f44f 021f 	mov.w	r2, #10420224	@ 0x9f0000
 800097e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000980:	4b05      	ldr	r3, [pc, #20]	@ (8000998 <SystemInit+0x64>)
 8000982:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000986:	609a      	str	r2, [r3, #8]
#endif 
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	40021000 	.word	0x40021000
 8000994:	f8ff0000 	.word	0xf8ff0000
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80009a0:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <MX_USART1_UART_Init+0x50>)
 80009a2:	4a13      	ldr	r2, [pc, #76]	@ (80009f0 <MX_USART1_UART_Init+0x54>)
 80009a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80009a6:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <MX_USART1_UART_Init+0x50>)
 80009a8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80009ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80009ae:	4b0f      	ldr	r3, [pc, #60]	@ (80009ec <MX_USART1_UART_Init+0x50>)
 80009b0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80009b4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009b6:	4b0d      	ldr	r3, [pc, #52]	@ (80009ec <MX_USART1_UART_Init+0x50>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009bc:	4b0b      	ldr	r3, [pc, #44]	@ (80009ec <MX_USART1_UART_Init+0x50>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009c2:	4b0a      	ldr	r3, [pc, #40]	@ (80009ec <MX_USART1_UART_Init+0x50>)
 80009c4:	220c      	movs	r2, #12
 80009c6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c8:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <MX_USART1_UART_Init+0x50>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ce:	4b07      	ldr	r3, [pc, #28]	@ (80009ec <MX_USART1_UART_Init+0x50>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009d4:	4805      	ldr	r0, [pc, #20]	@ (80009ec <MX_USART1_UART_Init+0x50>)
 80009d6:	f002 fb89 	bl	80030ec <HAL_UART_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d003      	beq.n	80009e8 <MX_USART1_UART_Init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80009e0:	214c      	movs	r1, #76	@ 0x4c
 80009e2:	4804      	ldr	r0, [pc, #16]	@ (80009f4 <MX_USART1_UART_Init+0x58>)
 80009e4:	f7ff fed6 	bl	8000794 <_Error_Handler>
  }

}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000a38 	.word	0x20000a38
 80009f0:	40013800 	.word	0x40013800
 80009f4:	08006848 	.word	0x08006848

080009f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b088      	sub	sp, #32
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a1a      	ldr	r2, [pc, #104]	@ (8000a70 <HAL_UART_MspInit+0x78>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d12d      	bne.n	8000a66 <HAL_UART_MspInit+0x6e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a74 <HAL_UART_MspInit+0x7c>)
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	4a19      	ldr	r2, [pc, #100]	@ (8000a74 <HAL_UART_MspInit+0x7c>)
 8000a10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a14:	6193      	str	r3, [r2, #24]
 8000a16:	4b17      	ldr	r3, [pc, #92]	@ (8000a74 <HAL_UART_MspInit+0x7c>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a30:	f107 0310 	add.w	r3, r7, #16
 8000a34:	4619      	mov	r1, r3
 8000a36:	4810      	ldr	r0, [pc, #64]	@ (8000a78 <HAL_UART_MspInit+0x80>)
 8000a38:	f000 fa8e 	bl	8000f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a46:	2301      	movs	r3, #1
 8000a48:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4a:	f107 0310 	add.w	r3, r7, #16
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4809      	ldr	r0, [pc, #36]	@ (8000a78 <HAL_UART_MspInit+0x80>)
 8000a52:	f000 fa81 	bl	8000f58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2025      	movs	r0, #37	@ 0x25
 8000a5c:	f000 f982 	bl	8000d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a60:	2025      	movs	r0, #37	@ 0x25
 8000a62:	f000 f9ab 	bl	8000dbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000a66:	bf00      	nop
 8000a68:	3720      	adds	r7, #32
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40013800 	.word	0x40013800
 8000a74:	40021000 	.word	0x40021000
 8000a78:	40010800 	.word	0x40010800

08000a7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a7c:	f7ff ff5a 	bl	8000934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a80:	480b      	ldr	r0, [pc, #44]	@ (8000ab0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a82:	490c      	ldr	r1, [pc, #48]	@ (8000ab4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a84:	4a0c      	ldr	r2, [pc, #48]	@ (8000ab8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a88:	e002      	b.n	8000a90 <LoopCopyDataInit>

08000a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8e:	3304      	adds	r3, #4

08000a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a94:	d3f9      	bcc.n	8000a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a96:	4a09      	ldr	r2, [pc, #36]	@ (8000abc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a98:	4c09      	ldr	r4, [pc, #36]	@ (8000ac0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a9c:	e001      	b.n	8000aa2 <LoopFillZerobss>

08000a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa0:	3204      	adds	r2, #4

08000aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa4:	d3fb      	bcc.n	8000a9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aa6:	f005 fe95 	bl	80067d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aaa:	f7ff fde5 	bl	8000678 <main>
  bx lr
 8000aae:	4770      	bx	lr
  ldr r0, =_sdata
 8000ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab4:	20000a14 	.word	0x20000a14
  ldr r2, =_sidata
 8000ab8:	08006a68 	.word	0x08006a68
  ldr r2, =_sbss
 8000abc:	20000a14 	.word	0x20000a14
  ldr r4, =_ebss
 8000ac0:	20001cf4 	.word	0x20001cf4

08000ac4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ac4:	e7fe      	b.n	8000ac4 <ADC1_2_IRQHandler>
	...

08000ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000acc:	4b08      	ldr	r3, [pc, #32]	@ (8000af0 <HAL_Init+0x28>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a07      	ldr	r2, [pc, #28]	@ (8000af0 <HAL_Init+0x28>)
 8000ad2:	f043 0310 	orr.w	r3, r3, #16
 8000ad6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad8:	2003      	movs	r0, #3
 8000ada:	f000 f923 	bl	8000d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f000 f808 	bl	8000af4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae4:	f7ff fe68 	bl	80007b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40022000 	.word	0x40022000

08000af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000afc:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <HAL_InitTick+0x54>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	4b12      	ldr	r3, [pc, #72]	@ (8000b4c <HAL_InitTick+0x58>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4619      	mov	r1, r3
 8000b06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 f96a 	bl	8000dec <HAL_SYSTICK_Config>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e00e      	b.n	8000b40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2b0f      	cmp	r3, #15
 8000b26:	d80a      	bhi.n	8000b3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	6879      	ldr	r1, [r7, #4]
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b30:	f000 f918 	bl	8000d64 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b34:	4a06      	ldr	r2, [pc, #24]	@ (8000b50 <HAL_InitTick+0x5c>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e000      	b.n	8000b40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	200008b4 	.word	0x200008b4
 8000b4c:	200008bc 	.word	0x200008bc
 8000b50:	200008b8 	.word	0x200008b8

08000b54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b58:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <HAL_IncTick+0x1c>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b05      	ldr	r3, [pc, #20]	@ (8000b74 <HAL_IncTick+0x20>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	4a03      	ldr	r2, [pc, #12]	@ (8000b74 <HAL_IncTick+0x20>)
 8000b66:	6013      	str	r3, [r2, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr
 8000b70:	200008bc 	.word	0x200008bc
 8000b74:	20000a78 	.word	0x20000a78

08000b78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b7c:	4b02      	ldr	r3, [pc, #8]	@ (8000b88 <HAL_GetTick+0x10>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	20000a78 	.word	0x20000a78

08000b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bbe:	4a04      	ldr	r2, [pc, #16]	@ (8000bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	60d3      	str	r3, [r2, #12]
}
 8000bc4:	bf00      	nop
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd8:	4b04      	ldr	r3, [pc, #16]	@ (8000bec <__NVIC_GetPriorityGrouping+0x18>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	0a1b      	lsrs	r3, r3, #8
 8000bde:	f003 0307 	and.w	r3, r3, #7
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	db0b      	blt.n	8000c1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	f003 021f 	and.w	r2, r3, #31
 8000c08:	4906      	ldr	r1, [pc, #24]	@ (8000c24 <__NVIC_EnableIRQ+0x34>)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	095b      	lsrs	r3, r3, #5
 8000c10:	2001      	movs	r0, #1
 8000c12:	fa00 f202 	lsl.w	r2, r0, r2
 8000c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	e000e100 	.word	0xe000e100

08000c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	6039      	str	r1, [r7, #0]
 8000c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	db0a      	blt.n	8000c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	490c      	ldr	r1, [pc, #48]	@ (8000c74 <__NVIC_SetPriority+0x4c>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	0112      	lsls	r2, r2, #4
 8000c48:	b2d2      	uxtb	r2, r2
 8000c4a:	440b      	add	r3, r1
 8000c4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c50:	e00a      	b.n	8000c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4908      	ldr	r1, [pc, #32]	@ (8000c78 <__NVIC_SetPriority+0x50>)
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	f003 030f 	and.w	r3, r3, #15
 8000c5e:	3b04      	subs	r3, #4
 8000c60:	0112      	lsls	r2, r2, #4
 8000c62:	b2d2      	uxtb	r2, r2
 8000c64:	440b      	add	r3, r1
 8000c66:	761a      	strb	r2, [r3, #24]
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000e100 	.word	0xe000e100
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b089      	sub	sp, #36	@ 0x24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	f1c3 0307 	rsb	r3, r3, #7
 8000c96:	2b04      	cmp	r3, #4
 8000c98:	bf28      	it	cs
 8000c9a:	2304      	movcs	r3, #4
 8000c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	2b06      	cmp	r3, #6
 8000ca4:	d902      	bls.n	8000cac <NVIC_EncodePriority+0x30>
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3b03      	subs	r3, #3
 8000caa:	e000      	b.n	8000cae <NVIC_EncodePriority+0x32>
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	43da      	mvns	r2, r3
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	fa01 f303 	lsl.w	r3, r1, r3
 8000cce:	43d9      	mvns	r1, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	4313      	orrs	r3, r2
         );
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3724      	adds	r7, #36	@ 0x24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr

08000ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cf0:	d301      	bcc.n	8000cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e00f      	b.n	8000d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d20 <SysTick_Config+0x40>)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cfe:	210f      	movs	r1, #15
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d04:	f7ff ff90 	bl	8000c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d08:	4b05      	ldr	r3, [pc, #20]	@ (8000d20 <SysTick_Config+0x40>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d0e:	4b04      	ldr	r3, [pc, #16]	@ (8000d20 <SysTick_Config+0x40>)
 8000d10:	2207      	movs	r2, #7
 8000d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	e000e010 	.word	0xe000e010

08000d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b07      	cmp	r3, #7
 8000d30:	d00f      	beq.n	8000d52 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2b06      	cmp	r3, #6
 8000d36:	d00c      	beq.n	8000d52 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b05      	cmp	r3, #5
 8000d3c:	d009      	beq.n	8000d52 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2b04      	cmp	r3, #4
 8000d42:	d006      	beq.n	8000d52 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b03      	cmp	r3, #3
 8000d48:	d003      	beq.n	8000d52 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d4a:	21a2      	movs	r1, #162	@ 0xa2
 8000d4c:	4804      	ldr	r0, [pc, #16]	@ (8000d60 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000d4e:	f7ff fd28 	bl	80007a2 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff ff1a 	bl	8000b8c <__NVIC_SetPriorityGrouping>
}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	0800685c 	.word	0x0800685c

08000d64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
 8000d70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b0f      	cmp	r3, #15
 8000d7a:	d903      	bls.n	8000d84 <HAL_NVIC_SetPriority+0x20>
 8000d7c:	21ba      	movs	r1, #186	@ 0xba
 8000d7e:	480e      	ldr	r0, [pc, #56]	@ (8000db8 <HAL_NVIC_SetPriority+0x54>)
 8000d80:	f7ff fd0f 	bl	80007a2 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	2b0f      	cmp	r3, #15
 8000d88:	d903      	bls.n	8000d92 <HAL_NVIC_SetPriority+0x2e>
 8000d8a:	21bb      	movs	r1, #187	@ 0xbb
 8000d8c:	480a      	ldr	r0, [pc, #40]	@ (8000db8 <HAL_NVIC_SetPriority+0x54>)
 8000d8e:	f7ff fd08 	bl	80007a2 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d92:	f7ff ff1f 	bl	8000bd4 <__NVIC_GetPriorityGrouping>
 8000d96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	68b9      	ldr	r1, [r7, #8]
 8000d9c:	6978      	ldr	r0, [r7, #20]
 8000d9e:	f7ff ff6d 	bl	8000c7c <NVIC_EncodePriority>
 8000da2:	4602      	mov	r2, r0
 8000da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da8:	4611      	mov	r1, r2
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ff3c 	bl	8000c28 <__NVIC_SetPriority>
}
 8000db0:	bf00      	nop
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	0800685c 	.word	0x0800685c

08000dbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	da03      	bge.n	8000dd6 <HAL_NVIC_EnableIRQ+0x1a>
 8000dce:	21ce      	movs	r1, #206	@ 0xce
 8000dd0:	4805      	ldr	r0, [pc, #20]	@ (8000de8 <HAL_NVIC_EnableIRQ+0x2c>)
 8000dd2:	f7ff fce6 	bl	80007a2 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff08 	bl	8000bf0 <__NVIC_EnableIRQ>
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	0800685c 	.word	0x0800685c

08000dec <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f7ff ff73 	bl	8000ce0 <SysTick_Config>
 8000dfa:	4603      	mov	r3, r0
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2b04      	cmp	r3, #4
 8000e10:	d007      	beq.n	8000e22 <HAL_SYSTICK_CLKSourceConfig+0x1e>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d004      	beq.n	8000e22 <HAL_SYSTICK_CLKSourceConfig+0x1e>
 8000e18:	f240 11d9 	movw	r1, #473	@ 0x1d9
 8000e1c:	480b      	ldr	r0, [pc, #44]	@ (8000e4c <HAL_SYSTICK_CLKSourceConfig+0x48>)
 8000e1e:	f7ff fcc0 	bl	80007a2 <assert_failed>
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2b04      	cmp	r3, #4
 8000e26:	d106      	bne.n	8000e36 <HAL_SYSTICK_CLKSourceConfig+0x32>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000e28:	4b09      	ldr	r3, [pc, #36]	@ (8000e50 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a08      	ldr	r2, [pc, #32]	@ (8000e50 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 8000e2e:	f043 0304 	orr.w	r3, r3, #4
 8000e32:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000e34:	e005      	b.n	8000e42 <HAL_SYSTICK_CLKSourceConfig+0x3e>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000e36:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a05      	ldr	r2, [pc, #20]	@ (8000e50 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 8000e3c:	f023 0304 	bic.w	r3, r3, #4
 8000e40:	6013      	str	r3, [r2, #0]
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	0800685c 	.word	0x0800685c
 8000e50:	e000e010 	.word	0xe000e010

08000e54 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000e58:	f000 f802 	bl	8000e60 <HAL_SYSTICK_Callback>
}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e74:	2300      	movs	r3, #0
 8000e76:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d005      	beq.n	8000e8e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2204      	movs	r2, #4
 8000e86:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	73fb      	strb	r3, [r7, #15]
 8000e8c:	e051      	b.n	8000f32 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f022 020e 	bic.w	r2, r2, #14
 8000e9c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f022 0201 	bic.w	r2, r2, #1
 8000eac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a22      	ldr	r2, [pc, #136]	@ (8000f3c <HAL_DMA_Abort_IT+0xd0>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d029      	beq.n	8000f0c <HAL_DMA_Abort_IT+0xa0>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a20      	ldr	r2, [pc, #128]	@ (8000f40 <HAL_DMA_Abort_IT+0xd4>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d022      	beq.n	8000f08 <HAL_DMA_Abort_IT+0x9c>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a1f      	ldr	r2, [pc, #124]	@ (8000f44 <HAL_DMA_Abort_IT+0xd8>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d01a      	beq.n	8000f02 <HAL_DMA_Abort_IT+0x96>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8000f48 <HAL_DMA_Abort_IT+0xdc>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d012      	beq.n	8000efc <HAL_DMA_Abort_IT+0x90>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a1c      	ldr	r2, [pc, #112]	@ (8000f4c <HAL_DMA_Abort_IT+0xe0>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d00a      	beq.n	8000ef6 <HAL_DMA_Abort_IT+0x8a>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a1a      	ldr	r2, [pc, #104]	@ (8000f50 <HAL_DMA_Abort_IT+0xe4>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d102      	bne.n	8000ef0 <HAL_DMA_Abort_IT+0x84>
 8000eea:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000eee:	e00e      	b.n	8000f0e <HAL_DMA_Abort_IT+0xa2>
 8000ef0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000ef4:	e00b      	b.n	8000f0e <HAL_DMA_Abort_IT+0xa2>
 8000ef6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000efa:	e008      	b.n	8000f0e <HAL_DMA_Abort_IT+0xa2>
 8000efc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f00:	e005      	b.n	8000f0e <HAL_DMA_Abort_IT+0xa2>
 8000f02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f06:	e002      	b.n	8000f0e <HAL_DMA_Abort_IT+0xa2>
 8000f08:	2310      	movs	r3, #16
 8000f0a:	e000      	b.n	8000f0e <HAL_DMA_Abort_IT+0xa2>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	4a11      	ldr	r2, [pc, #68]	@ (8000f54 <HAL_DMA_Abort_IT+0xe8>)
 8000f10:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2201      	movs	r2, #1
 8000f16:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	4798      	blx	r3
    } 
  }
  return status;
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40020008 	.word	0x40020008
 8000f40:	4002001c 	.word	0x4002001c
 8000f44:	40020030 	.word	0x40020030
 8000f48:	40020044 	.word	0x40020044
 8000f4c:	40020058 	.word	0x40020058
 8000f50:	4002006c 	.word	0x4002006c
 8000f54:	40020000 	.word	0x40020000

08000f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	@ 0x28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a91      	ldr	r2, [pc, #580]	@ (80011c0 <HAL_GPIO_Init+0x268>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d013      	beq.n	8000fa6 <HAL_GPIO_Init+0x4e>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a90      	ldr	r2, [pc, #576]	@ (80011c4 <HAL_GPIO_Init+0x26c>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d00f      	beq.n	8000fa6 <HAL_GPIO_Init+0x4e>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a8f      	ldr	r2, [pc, #572]	@ (80011c8 <HAL_GPIO_Init+0x270>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d00b      	beq.n	8000fa6 <HAL_GPIO_Init+0x4e>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a8e      	ldr	r2, [pc, #568]	@ (80011cc <HAL_GPIO_Init+0x274>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d007      	beq.n	8000fa6 <HAL_GPIO_Init+0x4e>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a8d      	ldr	r2, [pc, #564]	@ (80011d0 <HAL_GPIO_Init+0x278>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_Init+0x4e>
 8000f9e:	21cd      	movs	r1, #205	@ 0xcd
 8000fa0:	488c      	ldr	r0, [pc, #560]	@ (80011d4 <HAL_GPIO_Init+0x27c>)
 8000fa2:	f7ff fbfe 	bl	80007a2 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d004      	beq.n	8000fba <HAL_GPIO_Init+0x62>
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fb8:	d303      	bcc.n	8000fc2 <HAL_GPIO_Init+0x6a>
 8000fba:	21ce      	movs	r1, #206	@ 0xce
 8000fbc:	4885      	ldr	r0, [pc, #532]	@ (80011d4 <HAL_GPIO_Init+0x27c>)
 8000fbe:	f7ff fbf0 	bl	80007a2 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d035      	beq.n	8001036 <HAL_GPIO_Init+0xde>
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d031      	beq.n	8001036 <HAL_GPIO_Init+0xde>
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	2b11      	cmp	r3, #17
 8000fd8:	d02d      	beq.n	8001036 <HAL_GPIO_Init+0xde>
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d029      	beq.n	8001036 <HAL_GPIO_Init+0xde>
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	2b12      	cmp	r3, #18
 8000fe8:	d025      	beq.n	8001036 <HAL_GPIO_Init+0xde>
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	4a7a      	ldr	r2, [pc, #488]	@ (80011d8 <HAL_GPIO_Init+0x280>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d020      	beq.n	8001036 <HAL_GPIO_Init+0xde>
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	4a78      	ldr	r2, [pc, #480]	@ (80011dc <HAL_GPIO_Init+0x284>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d01b      	beq.n	8001036 <HAL_GPIO_Init+0xde>
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	4a77      	ldr	r2, [pc, #476]	@ (80011e0 <HAL_GPIO_Init+0x288>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d016      	beq.n	8001036 <HAL_GPIO_Init+0xde>
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	4a75      	ldr	r2, [pc, #468]	@ (80011e4 <HAL_GPIO_Init+0x28c>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d011      	beq.n	8001036 <HAL_GPIO_Init+0xde>
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	4a74      	ldr	r2, [pc, #464]	@ (80011e8 <HAL_GPIO_Init+0x290>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d00c      	beq.n	8001036 <HAL_GPIO_Init+0xde>
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	4a72      	ldr	r2, [pc, #456]	@ (80011ec <HAL_GPIO_Init+0x294>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d007      	beq.n	8001036 <HAL_GPIO_Init+0xde>
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2b03      	cmp	r3, #3
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_Init+0xde>
 800102e:	21cf      	movs	r1, #207	@ 0xcf
 8001030:	4868      	ldr	r0, [pc, #416]	@ (80011d4 <HAL_GPIO_Init+0x27c>)
 8001032:	f7ff fbb6 	bl	80007a2 <assert_failed>

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001036:	2300      	movs	r3, #0
 8001038:	627b      	str	r3, [r7, #36]	@ 0x24
 800103a:	e1db      	b.n	80013f4 <HAL_GPIO_Init+0x49c>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 800103c:	2201      	movs	r2, #1
 800103e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	69fa      	ldr	r2, [r7, #28]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	429a      	cmp	r2, r3
 8001056:	f040 81ca 	bne.w	80013ee <HAL_GPIO_Init+0x496>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a58      	ldr	r2, [pc, #352]	@ (80011c0 <HAL_GPIO_Init+0x268>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d013      	beq.n	800108a <HAL_GPIO_Init+0x132>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a57      	ldr	r2, [pc, #348]	@ (80011c4 <HAL_GPIO_Init+0x26c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d00f      	beq.n	800108a <HAL_GPIO_Init+0x132>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a56      	ldr	r2, [pc, #344]	@ (80011c8 <HAL_GPIO_Init+0x270>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d00b      	beq.n	800108a <HAL_GPIO_Init+0x132>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a55      	ldr	r2, [pc, #340]	@ (80011cc <HAL_GPIO_Init+0x274>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d007      	beq.n	800108a <HAL_GPIO_Init+0x132>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a54      	ldr	r2, [pc, #336]	@ (80011d0 <HAL_GPIO_Init+0x278>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d003      	beq.n	800108a <HAL_GPIO_Init+0x132>
 8001082:	21dd      	movs	r1, #221	@ 0xdd
 8001084:	4853      	ldr	r0, [pc, #332]	@ (80011d4 <HAL_GPIO_Init+0x27c>)
 8001086:	f7ff fb8c 	bl	80007a2 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	4a57      	ldr	r2, [pc, #348]	@ (80011ec <HAL_GPIO_Init+0x294>)
 8001090:	4293      	cmp	r3, r2
 8001092:	f000 80c2 	beq.w	800121a <HAL_GPIO_Init+0x2c2>
 8001096:	4a55      	ldr	r2, [pc, #340]	@ (80011ec <HAL_GPIO_Init+0x294>)
 8001098:	4293      	cmp	r3, r2
 800109a:	f200 80e9 	bhi.w	8001270 <HAL_GPIO_Init+0x318>
 800109e:	4a50      	ldr	r2, [pc, #320]	@ (80011e0 <HAL_GPIO_Init+0x288>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	f000 80ba 	beq.w	800121a <HAL_GPIO_Init+0x2c2>
 80010a6:	4a4e      	ldr	r2, [pc, #312]	@ (80011e0 <HAL_GPIO_Init+0x288>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	f200 80e1 	bhi.w	8001270 <HAL_GPIO_Init+0x318>
 80010ae:	4a4e      	ldr	r2, [pc, #312]	@ (80011e8 <HAL_GPIO_Init+0x290>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	f000 80b2 	beq.w	800121a <HAL_GPIO_Init+0x2c2>
 80010b6:	4a4c      	ldr	r2, [pc, #304]	@ (80011e8 <HAL_GPIO_Init+0x290>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	f200 80d9 	bhi.w	8001270 <HAL_GPIO_Init+0x318>
 80010be:	4a47      	ldr	r2, [pc, #284]	@ (80011dc <HAL_GPIO_Init+0x284>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	f000 80aa 	beq.w	800121a <HAL_GPIO_Init+0x2c2>
 80010c6:	4a45      	ldr	r2, [pc, #276]	@ (80011dc <HAL_GPIO_Init+0x284>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	f200 80d1 	bhi.w	8001270 <HAL_GPIO_Init+0x318>
 80010ce:	4a45      	ldr	r2, [pc, #276]	@ (80011e4 <HAL_GPIO_Init+0x28c>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	f000 80a2 	beq.w	800121a <HAL_GPIO_Init+0x2c2>
 80010d6:	4a43      	ldr	r2, [pc, #268]	@ (80011e4 <HAL_GPIO_Init+0x28c>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	f200 80c9 	bhi.w	8001270 <HAL_GPIO_Init+0x318>
 80010de:	2b12      	cmp	r3, #18
 80010e0:	d82c      	bhi.n	800113c <HAL_GPIO_Init+0x1e4>
 80010e2:	2b12      	cmp	r3, #18
 80010e4:	f200 80c4 	bhi.w	8001270 <HAL_GPIO_Init+0x318>
 80010e8:	a201      	add	r2, pc, #4	@ (adr r2, 80010f0 <HAL_GPIO_Init+0x198>)
 80010ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ee:	bf00      	nop
 80010f0:	0800121b 	.word	0x0800121b
 80010f4:	08001145 	.word	0x08001145
 80010f8:	08001197 	.word	0x08001197
 80010fc:	0800126b 	.word	0x0800126b
 8001100:	08001271 	.word	0x08001271
 8001104:	08001271 	.word	0x08001271
 8001108:	08001271 	.word	0x08001271
 800110c:	08001271 	.word	0x08001271
 8001110:	08001271 	.word	0x08001271
 8001114:	08001271 	.word	0x08001271
 8001118:	08001271 	.word	0x08001271
 800111c:	08001271 	.word	0x08001271
 8001120:	08001271 	.word	0x08001271
 8001124:	08001271 	.word	0x08001271
 8001128:	08001271 	.word	0x08001271
 800112c:	08001271 	.word	0x08001271
 8001130:	08001271 	.word	0x08001271
 8001134:	0800116d 	.word	0x0800116d
 8001138:	080011f1 	.word	0x080011f1
 800113c:	4a26      	ldr	r2, [pc, #152]	@ (80011d8 <HAL_GPIO_Init+0x280>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d06b      	beq.n	800121a <HAL_GPIO_Init+0x2c2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001142:	e095      	b.n	8001270 <HAL_GPIO_Init+0x318>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	2b02      	cmp	r3, #2
 800114a:	d00b      	beq.n	8001164 <HAL_GPIO_Init+0x20c>
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d007      	beq.n	8001164 <HAL_GPIO_Init+0x20c>
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	2b03      	cmp	r3, #3
 800115a:	d003      	beq.n	8001164 <HAL_GPIO_Init+0x20c>
 800115c:	21e5      	movs	r1, #229	@ 0xe5
 800115e:	481d      	ldr	r0, [pc, #116]	@ (80011d4 <HAL_GPIO_Init+0x27c>)
 8001160:	f7ff fb1f 	bl	80007a2 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	623b      	str	r3, [r7, #32]
          break;
 800116a:	e082      	b.n	8001272 <HAL_GPIO_Init+0x31a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	2b02      	cmp	r3, #2
 8001172:	d00b      	beq.n	800118c <HAL_GPIO_Init+0x234>
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d007      	beq.n	800118c <HAL_GPIO_Init+0x234>
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	2b03      	cmp	r3, #3
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x234>
 8001184:	21ec      	movs	r1, #236	@ 0xec
 8001186:	4813      	ldr	r0, [pc, #76]	@ (80011d4 <HAL_GPIO_Init+0x27c>)
 8001188:	f7ff fb0b 	bl	80007a2 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	3304      	adds	r3, #4
 8001192:	623b      	str	r3, [r7, #32]
          break;
 8001194:	e06d      	b.n	8001272 <HAL_GPIO_Init+0x31a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	2b02      	cmp	r3, #2
 800119c:	d00b      	beq.n	80011b6 <HAL_GPIO_Init+0x25e>
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d007      	beq.n	80011b6 <HAL_GPIO_Init+0x25e>
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x25e>
 80011ae:	21f3      	movs	r1, #243	@ 0xf3
 80011b0:	4808      	ldr	r0, [pc, #32]	@ (80011d4 <HAL_GPIO_Init+0x27c>)
 80011b2:	f7ff faf6 	bl	80007a2 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	3308      	adds	r3, #8
 80011bc:	623b      	str	r3, [r7, #32]
          break;
 80011be:	e058      	b.n	8001272 <HAL_GPIO_Init+0x31a>
 80011c0:	40010800 	.word	0x40010800
 80011c4:	40010c00 	.word	0x40010c00
 80011c8:	40011000 	.word	0x40011000
 80011cc:	40011400 	.word	0x40011400
 80011d0:	40011800 	.word	0x40011800
 80011d4:	08006898 	.word	0x08006898
 80011d8:	10110000 	.word	0x10110000
 80011dc:	10210000 	.word	0x10210000
 80011e0:	10310000 	.word	0x10310000
 80011e4:	10120000 	.word	0x10120000
 80011e8:	10220000 	.word	0x10220000
 80011ec:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d00b      	beq.n	8001210 <HAL_GPIO_Init+0x2b8>
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d007      	beq.n	8001210 <HAL_GPIO_Init+0x2b8>
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	2b03      	cmp	r3, #3
 8001206:	d003      	beq.n	8001210 <HAL_GPIO_Init+0x2b8>
 8001208:	21fa      	movs	r1, #250	@ 0xfa
 800120a:	487f      	ldr	r0, [pc, #508]	@ (8001408 <HAL_GPIO_Init+0x4b0>)
 800120c:	f7ff fac9 	bl	80007a2 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	330c      	adds	r3, #12
 8001216:	623b      	str	r3, [r7, #32]
          break;
 8001218:	e02b      	b.n	8001272 <HAL_GPIO_Init+0x31a>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00c      	beq.n	800123c <HAL_GPIO_Init+0x2e4>
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d008      	beq.n	800123c <HAL_GPIO_Init+0x2e4>
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	2b02      	cmp	r3, #2
 8001230:	d004      	beq.n	800123c <HAL_GPIO_Init+0x2e4>
 8001232:	f240 1107 	movw	r1, #263	@ 0x107
 8001236:	4874      	ldr	r0, [pc, #464]	@ (8001408 <HAL_GPIO_Init+0x4b0>)
 8001238:	f7ff fab3 	bl	80007a2 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d102      	bne.n	800124a <HAL_GPIO_Init+0x2f2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001244:	2304      	movs	r3, #4
 8001246:	623b      	str	r3, [r7, #32]
          break;
 8001248:	e013      	b.n	8001272 <HAL_GPIO_Init+0x31a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d105      	bne.n	800125e <HAL_GPIO_Init+0x306>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001252:	2308      	movs	r3, #8
 8001254:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69fa      	ldr	r2, [r7, #28]
 800125a:	611a      	str	r2, [r3, #16]
          break;
 800125c:	e009      	b.n	8001272 <HAL_GPIO_Init+0x31a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800125e:	2308      	movs	r3, #8
 8001260:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69fa      	ldr	r2, [r7, #28]
 8001266:	615a      	str	r2, [r3, #20]
          break;
 8001268:	e003      	b.n	8001272 <HAL_GPIO_Init+0x31a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
          break;
 800126e:	e000      	b.n	8001272 <HAL_GPIO_Init+0x31a>
          break;
 8001270:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	2bff      	cmp	r3, #255	@ 0xff
 8001276:	d801      	bhi.n	800127c <HAL_GPIO_Init+0x324>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	e001      	b.n	8001280 <HAL_GPIO_Init+0x328>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3304      	adds	r3, #4
 8001280:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	2bff      	cmp	r3, #255	@ 0xff
 8001286:	d802      	bhi.n	800128e <HAL_GPIO_Init+0x336>
 8001288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	e002      	b.n	8001294 <HAL_GPIO_Init+0x33c>
 800128e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001290:	3b08      	subs	r3, #8
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	210f      	movs	r1, #15
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	401a      	ands	r2, r3
 80012a6:	6a39      	ldr	r1, [r7, #32]
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	431a      	orrs	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f000 8096 	beq.w	80013ee <HAL_GPIO_Init+0x496>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012c2:	4b52      	ldr	r3, [pc, #328]	@ (800140c <HAL_GPIO_Init+0x4b4>)
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	4a51      	ldr	r2, [pc, #324]	@ (800140c <HAL_GPIO_Init+0x4b4>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6193      	str	r3, [r2, #24]
 80012ce:	4b4f      	ldr	r3, [pc, #316]	@ (800140c <HAL_GPIO_Init+0x4b4>)
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 80012da:	4a4d      	ldr	r2, [pc, #308]	@ (8001410 <HAL_GPIO_Init+0x4b8>)
 80012dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012de:	089b      	lsrs	r3, r3, #2
 80012e0:	3302      	adds	r3, #2
 80012e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e6:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80012e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	220f      	movs	r2, #15
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	697a      	ldr	r2, [r7, #20]
 80012fa:	4013      	ands	r3, r2
 80012fc:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a44      	ldr	r2, [pc, #272]	@ (8001414 <HAL_GPIO_Init+0x4bc>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d013      	beq.n	800132e <HAL_GPIO_Init+0x3d6>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a43      	ldr	r2, [pc, #268]	@ (8001418 <HAL_GPIO_Init+0x4c0>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d00d      	beq.n	800132a <HAL_GPIO_Init+0x3d2>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a42      	ldr	r2, [pc, #264]	@ (800141c <HAL_GPIO_Init+0x4c4>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d007      	beq.n	8001326 <HAL_GPIO_Init+0x3ce>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a41      	ldr	r2, [pc, #260]	@ (8001420 <HAL_GPIO_Init+0x4c8>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d101      	bne.n	8001322 <HAL_GPIO_Init+0x3ca>
 800131e:	2303      	movs	r3, #3
 8001320:	e006      	b.n	8001330 <HAL_GPIO_Init+0x3d8>
 8001322:	2304      	movs	r3, #4
 8001324:	e004      	b.n	8001330 <HAL_GPIO_Init+0x3d8>
 8001326:	2302      	movs	r3, #2
 8001328:	e002      	b.n	8001330 <HAL_GPIO_Init+0x3d8>
 800132a:	2301      	movs	r3, #1
 800132c:	e000      	b.n	8001330 <HAL_GPIO_Init+0x3d8>
 800132e:	2300      	movs	r3, #0
 8001330:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001332:	f002 0203 	and.w	r2, r2, #3
 8001336:	0092      	lsls	r2, r2, #2
 8001338:	4093      	lsls	r3, r2
 800133a:	697a      	ldr	r2, [r7, #20]
 800133c:	4313      	orrs	r3, r2
 800133e:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8001340:	4933      	ldr	r1, [pc, #204]	@ (8001410 <HAL_GPIO_Init+0x4b8>)
 8001342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001344:	089b      	lsrs	r3, r3, #2
 8001346:	3302      	adds	r3, #2
 8001348:	697a      	ldr	r2, [r7, #20]
 800134a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d006      	beq.n	8001368 <HAL_GPIO_Init+0x410>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800135a:	4b32      	ldr	r3, [pc, #200]	@ (8001424 <HAL_GPIO_Init+0x4cc>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	4931      	ldr	r1, [pc, #196]	@ (8001424 <HAL_GPIO_Init+0x4cc>)
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	600b      	str	r3, [r1, #0]
 8001366:	e006      	b.n	8001376 <HAL_GPIO_Init+0x41e>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001368:	4b2e      	ldr	r3, [pc, #184]	@ (8001424 <HAL_GPIO_Init+0x4cc>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	43db      	mvns	r3, r3
 8001370:	492c      	ldr	r1, [pc, #176]	@ (8001424 <HAL_GPIO_Init+0x4cc>)
 8001372:	4013      	ands	r3, r2
 8001374:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d006      	beq.n	8001390 <HAL_GPIO_Init+0x438>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001382:	4b28      	ldr	r3, [pc, #160]	@ (8001424 <HAL_GPIO_Init+0x4cc>)
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	4927      	ldr	r1, [pc, #156]	@ (8001424 <HAL_GPIO_Init+0x4cc>)
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	4313      	orrs	r3, r2
 800138c:	604b      	str	r3, [r1, #4]
 800138e:	e006      	b.n	800139e <HAL_GPIO_Init+0x446>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001390:	4b24      	ldr	r3, [pc, #144]	@ (8001424 <HAL_GPIO_Init+0x4cc>)
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	43db      	mvns	r3, r3
 8001398:	4922      	ldr	r1, [pc, #136]	@ (8001424 <HAL_GPIO_Init+0x4cc>)
 800139a:	4013      	ands	r3, r2
 800139c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d006      	beq.n	80013b8 <HAL_GPIO_Init+0x460>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001424 <HAL_GPIO_Init+0x4cc>)
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	491d      	ldr	r1, [pc, #116]	@ (8001424 <HAL_GPIO_Init+0x4cc>)
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	608b      	str	r3, [r1, #8]
 80013b6:	e006      	b.n	80013c6 <HAL_GPIO_Init+0x46e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001424 <HAL_GPIO_Init+0x4cc>)
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	43db      	mvns	r3, r3
 80013c0:	4918      	ldr	r1, [pc, #96]	@ (8001424 <HAL_GPIO_Init+0x4cc>)
 80013c2:	4013      	ands	r3, r2
 80013c4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d006      	beq.n	80013e0 <HAL_GPIO_Init+0x488>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013d2:	4b14      	ldr	r3, [pc, #80]	@ (8001424 <HAL_GPIO_Init+0x4cc>)
 80013d4:	68da      	ldr	r2, [r3, #12]
 80013d6:	4913      	ldr	r1, [pc, #76]	@ (8001424 <HAL_GPIO_Init+0x4cc>)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	60cb      	str	r3, [r1, #12]
 80013de:	e006      	b.n	80013ee <HAL_GPIO_Init+0x496>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013e0:	4b10      	ldr	r3, [pc, #64]	@ (8001424 <HAL_GPIO_Init+0x4cc>)
 80013e2:	68da      	ldr	r2, [r3, #12]
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	43db      	mvns	r3, r3
 80013e8:	490e      	ldr	r1, [pc, #56]	@ (8001424 <HAL_GPIO_Init+0x4cc>)
 80013ea:	4013      	ands	r3, r2
 80013ec:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80013ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f0:	3301      	adds	r3, #1
 80013f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80013f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f6:	2b0f      	cmp	r3, #15
 80013f8:	f67f ae20 	bls.w	800103c <HAL_GPIO_Init+0xe4>
        }
      }
    }
  }
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	3728      	adds	r7, #40	@ 0x28
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	08006898 	.word	0x08006898
 800140c:	40021000 	.word	0x40021000
 8001410:	40010000 	.word	0x40010000
 8001414:	40010800 	.word	0x40010800
 8001418:	40010c00 	.word	0x40010c00
 800141c:	40011000 	.word	0x40011000
 8001420:	40011400 	.word	0x40011400
 8001424:	40010400 	.word	0x40010400

08001428 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001434:	887b      	ldrh	r3, [r7, #2]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d104      	bne.n	8001444 <HAL_GPIO_ReadPin+0x1c>
 800143a:	f240 11c3 	movw	r1, #451	@ 0x1c3
 800143e:	4809      	ldr	r0, [pc, #36]	@ (8001464 <HAL_GPIO_ReadPin+0x3c>)
 8001440:	f7ff f9af 	bl	80007a2 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	887b      	ldrh	r3, [r7, #2]
 800144a:	4013      	ands	r3, r2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d002      	beq.n	8001456 <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8001450:	2301      	movs	r3, #1
 8001452:	73fb      	strb	r3, [r7, #15]
 8001454:	e001      	b.n	800145a <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001456:	2300      	movs	r3, #0
 8001458:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800145a:	7bfb      	ldrb	r3, [r7, #15]
}
 800145c:	4618      	mov	r0, r3
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	08006898 	.word	0x08006898

08001468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	807b      	strh	r3, [r7, #2]
 8001474:	4613      	mov	r3, r2
 8001476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001478:	887b      	ldrh	r3, [r7, #2]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d104      	bne.n	8001488 <HAL_GPIO_WritePin+0x20>
 800147e:	f240 11e3 	movw	r1, #483	@ 0x1e3
 8001482:	480e      	ldr	r0, [pc, #56]	@ (80014bc <HAL_GPIO_WritePin+0x54>)
 8001484:	f7ff f98d 	bl	80007a2 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001488:	787b      	ldrb	r3, [r7, #1]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d007      	beq.n	800149e <HAL_GPIO_WritePin+0x36>
 800148e:	787b      	ldrb	r3, [r7, #1]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d004      	beq.n	800149e <HAL_GPIO_WritePin+0x36>
 8001494:	f44f 71f2 	mov.w	r1, #484	@ 0x1e4
 8001498:	4808      	ldr	r0, [pc, #32]	@ (80014bc <HAL_GPIO_WritePin+0x54>)
 800149a:	f7ff f982 	bl	80007a2 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800149e:	787b      	ldrb	r3, [r7, #1]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014a4:	887a      	ldrh	r2, [r7, #2]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014aa:	e003      	b.n	80014b4 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ac:	887b      	ldrh	r3, [r7, #2]
 80014ae:	041a      	lsls	r2, r3, #16
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	611a      	str	r2, [r3, #16]
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	08006898 	.word	0x08006898

080014c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014c2:	b08b      	sub	sp, #44	@ 0x2c
 80014c4:	af06      	add	r7, sp, #24
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t index = 0U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e0d3      	b.n	800167e <HAL_PCD_Init+0x1be>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a6b      	ldr	r2, [pc, #428]	@ (8001688 <HAL_PCD_Init+0x1c8>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d003      	beq.n	80014e8 <HAL_PCD_Init+0x28>
 80014e0:	219f      	movs	r1, #159	@ 0x9f
 80014e2:	486a      	ldr	r0, [pc, #424]	@ (800168c <HAL_PCD_Init+0x1cc>)
 80014e4:	f7ff f95d 	bl	80007a2 <assert_failed>

  if(hpcd->State == HAL_PCD_STATE_RESET)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 3429 	ldrb.w	r3, [r3, #1065]	@ 0x429
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d106      	bne.n	8001502 <HAL_PCD_Init+0x42>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2428 	strb.w	r2, [r3, #1064]	@ 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f004 fe31 	bl	8006164 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2203      	movs	r2, #3
 8001506:	f883 2429 	strb.w	r2, [r3, #1065]	@ 0x429
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f002 face 	bl	8003ab0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	603b      	str	r3, [r7, #0]
 800151a:	687e      	ldr	r6, [r7, #4]
 800151c:	466d      	mov	r5, sp
 800151e:	f106 0410 	add.w	r4, r6, #16
 8001522:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001524:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001526:	6823      	ldr	r3, [r4, #0]
 8001528:	602b      	str	r3, [r5, #0]
 800152a:	1d33      	adds	r3, r6, #4
 800152c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800152e:	6838      	ldr	r0, [r7, #0]
 8001530:	f002 fa94 	bl	8003a5c <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2100      	movs	r1, #0
 800153a:	4618      	mov	r0, r3
 800153c:	f002 fad4 	bl	8003ae8 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	e037      	b.n	80015b6 <HAL_PCD_Init+0xf6>
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	015b      	lsls	r3, r3, #5
 800154c:	4413      	add	r3, r2
 800154e:	3329      	adds	r3, #41	@ 0x29
 8001550:	2201      	movs	r2, #1
 8001552:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].num = index;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	b2d9      	uxtb	r1, r3
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	015b      	lsls	r3, r3, #5
 800155e:	4413      	add	r3, r2
 8001560:	3328      	adds	r3, #40	@ 0x28
 8001562:	460a      	mov	r2, r1
 8001564:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	b299      	uxth	r1, r3
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	015b      	lsls	r3, r3, #5
 8001570:	4413      	add	r3, r2
 8001572:	3334      	adds	r3, #52	@ 0x34
 8001574:	460a      	mov	r2, r1
 8001576:	801a      	strh	r2, [r3, #0]
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	015b      	lsls	r3, r3, #5
 800157e:	4413      	add	r3, r2
 8001580:	332b      	adds	r3, #43	@ 0x2b
 8001582:	2200      	movs	r2, #0
 8001584:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].maxpacket =  0U;
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	015b      	lsls	r3, r3, #5
 800158c:	4413      	add	r3, r2
 800158e:	3338      	adds	r3, #56	@ 0x38
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_buff = 0U;
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	015b      	lsls	r3, r3, #5
 800159a:	4413      	add	r3, r2
 800159c:	333c      	adds	r3, #60	@ 0x3c
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_len = 0U;
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	3302      	adds	r3, #2
 80015a8:	015b      	lsls	r3, r3, #5
 80015aa:	4413      	add	r3, r2
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	3301      	adds	r3, #1
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2b0e      	cmp	r3, #14
 80015ba:	d9c4      	bls.n	8001546 <HAL_PCD_Init+0x86>
  }
 
  for (index = 0U; index < 15U ; index++)
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	e03c      	b.n	800163c <HAL_PCD_Init+0x17c>
  {
    hpcd->OUT_ep[index].is_in = 0U;
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	015b      	lsls	r3, r3, #5
 80015c8:	4413      	add	r3, r2
 80015ca:	f203 2329 	addw	r3, r3, #553	@ 0x229
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].num = index;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	b2d9      	uxtb	r1, r3
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	015b      	lsls	r3, r3, #5
 80015dc:	4413      	add	r3, r2
 80015de:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 80015e2:	460a      	mov	r2, r1
 80015e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	b299      	uxth	r1, r3
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	015b      	lsls	r3, r3, #5
 80015f0:	4413      	add	r3, r2
 80015f2:	3334      	adds	r3, #52	@ 0x34
 80015f4:	460a      	mov	r2, r1
 80015f6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	015b      	lsls	r3, r3, #5
 80015fe:	4413      	add	r3, r2
 8001600:	f203 232b 	addw	r3, r3, #555	@ 0x22b
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].maxpacket = 0U;
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	015b      	lsls	r3, r3, #5
 800160e:	4413      	add	r3, r2
 8001610:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_buff = 0U;
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	015b      	lsls	r3, r3, #5
 800161e:	4413      	add	r3, r2
 8001620:	f503 730f 	add.w	r3, r3, #572	@ 0x23c
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_len = 0U;
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	3312      	adds	r3, #18
 800162e:	015b      	lsls	r3, r3, #5
 8001630:	4413      	add	r3, r2
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	3301      	adds	r3, #1
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2b0e      	cmp	r3, #14
 8001640:	d9bf      	bls.n	80015c2 <HAL_PCD_Init+0x102>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	687e      	ldr	r6, [r7, #4]
 800164a:	466d      	mov	r5, sp
 800164c:	f106 0410 	add.w	r4, r6, #16
 8001650:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001652:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001654:	6823      	ldr	r3, [r4, #0]
 8001656:	602b      	str	r3, [r5, #0]
 8001658:	1d33      	adds	r3, r6, #4
 800165a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800165c:	6838      	ldr	r0, [r7, #0]
 800165e:	f002 fa4f 	bl	8003b00 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 2429 	strb.w	r2, [r3, #1065]	@ 0x429
  
  USB_DevDisconnect (hpcd->Instance);  
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f003 fa3d 	bl	8004af6 <USB_DevDisconnect>
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001686:	bf00      	nop
 8001688:	40005c00 	.word	0x40005c00
 800168c:	080068d4 	.word	0x080068d4

08001690 <HAL_PCD_Start>:
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3428 	ldrb.w	r3, [r3, #1064]	@ 0x428
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d101      	bne.n	80016a6 <HAL_PCD_Start+0x16>
 80016a2:	2302      	movs	r3, #2
 80016a4:	e016      	b.n	80016d4 <HAL_PCD_Start+0x44>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 2428 	strb.w	r2, [r3, #1064]	@ 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 80016ae:	2101      	movs	r1, #1
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f005 f884 	bl	80067be <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f003 fa11 	bl	8004ae2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f002 f9d9 	bl	8003a7c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2428 	strb.w	r2, [r3, #1064]	@ 0x428
  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{ 
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f003 fa0e 	bl	8004b0a <USB_ReadInterrupts>
 80016ee:	4603      	mov	r3, r0
 80016f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80016f8:	d102      	bne.n	8001700 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 fad8 	bl	8001cb0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f003 fa00 	bl	8004b0a <USB_ReadInterrupts>
 800170a:	4603      	mov	r3, r0
 800170c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001710:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001714:	d112      	bne.n	800173c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800171e:	b29a      	uxth	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001728:	b292      	uxth	r2, r2
 800172a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f004 fd8d 	bl	800624e <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8001734:	2100      	movs	r1, #0
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 f8d2 	bl	80018e0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f003 f9e2 	bl	8004b0a <USB_ReadInterrupts>
 8001746:	4603      	mov	r3, r0
 8001748:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800174c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001750:	d10b      	bne.n	800176a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800175a:	b29a      	uxth	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001764:	b292      	uxth	r2, r2
 8001766:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f003 f9cb 	bl	8004b0a <USB_ReadInterrupts>
 8001774:	4603      	mov	r3, r0
 8001776:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800177a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800177e:	d10b      	bne.n	8001798 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001788:	b29a      	uxth	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001792:	b292      	uxth	r2, r2
 8001794:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f003 f9b4 	bl	8004b0a <USB_ReadInterrupts>
 80017a2:	4603      	mov	r3, r0
 80017a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017ac:	d126      	bne.n	80017fc <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 0204 	bic.w	r2, r2, #4
 80017c0:	b292      	uxth	r2, r2
 80017c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 0208 	bic.w	r2, r2, #8
 80017d8:	b292      	uxth	r2, r2
 80017da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f004 fd72 	bl	80062c8 <HAL_PCD_ResumeCallback>

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80017f6:	b292      	uxth	r2, r2
 80017f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f003 f982 	bl	8004b0a <USB_ReadInterrupts>
 8001806:	4603      	mov	r3, r0
 8001808:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800180c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001810:	d131      	bne.n	8001876 <HAL_PCD_IRQHandler+0x19a>
  { 
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800181a:	b29a      	uxth	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f042 0208 	orr.w	r2, r2, #8
 8001824:	b292      	uxth	r2, r2
 8001826:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001832:	b29a      	uxth	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800183c:	b292      	uxth	r2, r2
 800183e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800184a:	b29a      	uxth	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f042 0204 	orr.w	r2, r2, #4
 8001854:	b292      	uxth	r2, r2
 8001856:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f003 f953 	bl	8004b0a <USB_ReadInterrupts>
 8001864:	4603      	mov	r3, r0
 8001866:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800186a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800186e:	d002      	beq.n	8001876 <HAL_PCD_IRQHandler+0x19a>
    {
      HAL_PCD_SuspendCallback(hpcd);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f004 fd0f 	bl	8006294 <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f003 f945 	bl	8004b0a <USB_ReadInterrupts>
 8001880:	4603      	mov	r3, r0
 8001882:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001886:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800188a:	d10e      	bne.n	80018aa <HAL_PCD_IRQHandler+0x1ce>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001894:	b29a      	uxth	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800189e:	b292      	uxth	r2, r2
 80018a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f004 fcc4 	bl	8006232 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f003 f92b 	bl	8004b0a <USB_ReadInterrupts>
 80018b4:	4603      	mov	r3, r0
 80018b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018be:	d10b      	bne.n	80018d8 <HAL_PCD_IRQHandler+0x1fc>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018d2:	b292      	uxth	r2, r2
 80018d4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 3428 	ldrb.w	r3, [r3, #1064]	@ 0x428
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d101      	bne.n	80018fa <HAL_PCD_SetAddress+0x1a>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e013      	b.n	8001922 <HAL_PCD_SetAddress+0x42>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 2428 	strb.w	r2, [r3, #1064]	@ 0x428
  hpcd->USB_Address = address;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	78fa      	ldrb	r2, [r7, #3]
 8001906:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	78fa      	ldrb	r2, [r7, #3]
 8001910:	4611      	mov	r1, r2
 8001912:	4618      	mov	r0, r3
 8001914:	f003 f8d2 	bl	8004abc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2428 	strb.w	r2, [r3, #1064]	@ 0x428
  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b084      	sub	sp, #16
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	4608      	mov	r0, r1
 8001934:	4611      	mov	r1, r2
 8001936:	461a      	mov	r2, r3
 8001938:	4603      	mov	r3, r0
 800193a:	70fb      	strb	r3, [r7, #3]
 800193c:	460b      	mov	r3, r1
 800193e:	803b      	strh	r3, [r7, #0]
 8001940:	4613      	mov	r3, r2
 8001942:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001944:	2300      	movs	r3, #0
 8001946:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 800194c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001950:	2b00      	cmp	r3, #0
 8001952:	da08      	bge.n	8001966 <HAL_PCD_EP_Open+0x3c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001954:	78fb      	ldrb	r3, [r7, #3]
 8001956:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800195a:	015b      	lsls	r3, r3, #5
 800195c:	3328      	adds	r3, #40	@ 0x28
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	4413      	add	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	e008      	b.n	8001978 <HAL_PCD_EP_Open+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001966:	78fb      	ldrb	r3, [r7, #3]
 8001968:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800196c:	015b      	lsls	r3, r3, #5
 800196e:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	4413      	add	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 8001978:	78fb      	ldrb	r3, [r7, #3]
 800197a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800197e:	b2da      	uxtb	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8001984:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001988:	b2db      	uxtb	r3, r3
 800198a:	09db      	lsrs	r3, r3, #7
 800198c:	b2db      	uxtb	r3, r3
 800198e:	461a      	mov	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8001994:	883a      	ldrh	r2, [r7, #0]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	78ba      	ldrb	r2, [r7, #2]
 800199e:	70da      	strb	r2, [r3, #3]
    
  __HAL_LOCK(hpcd);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 3428 	ldrb.w	r3, [r3, #1064]	@ 0x428
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d101      	bne.n	80019ae <HAL_PCD_EP_Open+0x84>
 80019aa:	2302      	movs	r3, #2
 80019ac:	e00e      	b.n	80019cc <HAL_PCD_EP_Open+0xa2>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2428 	strb.w	r2, [r3, #1064]	@ 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68f9      	ldr	r1, [r7, #12]
 80019bc:	4618      	mov	r0, r3
 80019be:	f002 f8c3 	bl	8003b48 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2428 	strb.w	r2, [r3, #1064]	@ 0x428
  return ret;
 80019ca:	7afb      	ldrb	r3, [r7, #11]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <HAL_PCD_EP_Close>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	460b      	mov	r3, r1
 80019de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 80019e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	da08      	bge.n	80019fe <HAL_PCD_EP_Close+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80019ec:	78fb      	ldrb	r3, [r7, #3]
 80019ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80019f2:	015b      	lsls	r3, r3, #5
 80019f4:	3328      	adds	r3, #40	@ 0x28
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	e008      	b.n	8001a10 <HAL_PCD_EP_Close+0x3c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80019fe:	78fb      	ldrb	r3, [r7, #3]
 8001a00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a04:	015b      	lsls	r3, r3, #5
 8001a06:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 8001a10:	78fb      	ldrb	r3, [r7, #3]
 8001a12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8001a1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	09db      	lsrs	r3, r3, #7
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	461a      	mov	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 3428 	ldrb.w	r3, [r3, #1064]	@ 0x428
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d101      	bne.n	8001a3a <HAL_PCD_EP_Close+0x66>
 8001a36:	2302      	movs	r3, #2
 8001a38:	e00e      	b.n	8001a58 <HAL_PCD_EP_Close+0x84>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 2428 	strb.w	r2, [r3, #1064]	@ 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68f9      	ldr	r1, [r7, #12]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f002 fb43 	bl	80040d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2428 	strb.w	r2, [r3, #1064]	@ 0x428
  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	607a      	str	r2, [r7, #4]
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001a74:	7afb      	ldrb	r3, [r7, #11]
 8001a76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a7a:	015b      	lsls	r3, r3, #5
 8001a7c:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	4413      	add	r3, r2
 8001a84:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	2200      	movs	r2, #0
 8001a96:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8001a9e:	7afb      	ldrb	r3, [r7, #11]
 8001aa0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 8001aaa:	7afb      	ldrb	r3, [r7, #11]
 8001aac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d106      	bne.n	8001ac2 <HAL_PCD_EP_Receive+0x62>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6979      	ldr	r1, [r7, #20]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f002 fc92 	bl	80043e4 <USB_EPStartXfer>
 8001ac0:	e005      	b.n	8001ace <HAL_PCD_EP_Receive+0x6e>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6979      	ldr	r1, [r7, #20]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f002 fc8b 	bl	80043e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8001ae4:	78fb      	ldrb	r3, [r7, #3]
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	3312      	adds	r3, #18
 8001aee:	015b      	lsls	r3, r3, #5
 8001af0:	4413      	add	r3, r2
 8001af2:	3304      	adds	r3, #4
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	b29b      	uxth	r3, r3
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr

08001b02 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b086      	sub	sp, #24
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	60f8      	str	r0, [r7, #12]
 8001b0a:	607a      	str	r2, [r7, #4]
 8001b0c:	603b      	str	r3, [r7, #0]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001b16:	7afb      	ldrb	r3, [r7, #11]
 8001b18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b1c:	015b      	lsls	r3, r3, #5
 8001b1e:	3328      	adds	r3, #40	@ 0x28
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	4413      	add	r3, r2
 8001b24:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	2200      	movs	r2, #0
 8001b36:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8001b3e:	7afb      	ldrb	r3, [r7, #11]
 8001b40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 8001b4a:	7afb      	ldrb	r3, [r7, #11]
 8001b4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d106      	bne.n	8001b62 <HAL_PCD_EP_Transmit+0x60>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6979      	ldr	r1, [r7, #20]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f002 fc42 	bl	80043e4 <USB_EPStartXfer>
 8001b60:	e005      	b.n	8001b6e <HAL_PCD_EP_Transmit+0x6c>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6979      	ldr	r1, [r7, #20]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f002 fc3b 	bl	80043e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 8001b88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	da08      	bge.n	8001ba2 <HAL_PCD_EP_SetStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001b90:	78fb      	ldrb	r3, [r7, #3]
 8001b92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b96:	015b      	lsls	r3, r3, #5
 8001b98:	3328      	adds	r3, #40	@ 0x28
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	e006      	b.n	8001bb0 <HAL_PCD_EP_SetStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ba2:	78fb      	ldrb	r3, [r7, #3]
 8001ba4:	015b      	lsls	r3, r3, #5
 8001ba6:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001bc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	09db      	lsrs	r3, r3, #7
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	461a      	mov	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 3428 	ldrb.w	r3, [r3, #1064]	@ 0x428
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d101      	bne.n	8001be0 <HAL_PCD_EP_SetStall+0x68>
 8001bdc:	2302      	movs	r3, #2
 8001bde:	e01c      	b.n	8001c1a <HAL_PCD_EP_SetStall+0xa2>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2428 	strb.w	r2, [r3, #1064]	@ 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68f9      	ldr	r1, [r7, #12]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f002 fe7a 	bl	80048e8 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8001bf4:	78fb      	ldrb	r3, [r7, #3]
 8001bf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d108      	bne.n	8001c10 <HAL_PCD_EP_SetStall+0x98>
  {
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f203 432c 	addw	r3, r3, #1068	@ 0x42c
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	f002 ff8e 	bl	8004b2c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 2428 	strb.w	r2, [r3, #1064]	@ 0x428
  
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b084      	sub	sp, #16
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 8001c32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	da08      	bge.n	8001c4c <HAL_PCD_EP_ClrStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001c3a:	78fb      	ldrb	r3, [r7, #3]
 8001c3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c40:	015b      	lsls	r3, r3, #5
 8001c42:	3328      	adds	r3, #40	@ 0x28
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	4413      	add	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	e006      	b.n	8001c5a <HAL_PCD_EP_ClrStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c4c:	78fb      	ldrb	r3, [r7, #3]
 8001c4e:	015b      	lsls	r3, r3, #5
 8001c50:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	4413      	add	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001c6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	09db      	lsrs	r3, r3, #7
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	461a      	mov	r2, r3
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f893 3428 	ldrb.w	r3, [r3, #1064]	@ 0x428
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d101      	bne.n	8001c8a <HAL_PCD_EP_ClrStall+0x68>
 8001c86:	2302      	movs	r3, #2
 8001c88:	e00e      	b.n	8001ca8 <HAL_PCD_EP_ClrStall+0x86>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 2428 	strb.w	r2, [r3, #1064]	@ 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68f9      	ldr	r1, [r7, #12]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f002 fe85 	bl	80049a8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2428 	strb.w	r2, [r3, #1064]	@ 0x428
  
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001cb0:	b590      	push	{r4, r7, lr}
 8001cb2:	b089      	sub	sp, #36	@ 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep = NULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61bb      	str	r3, [r7, #24]
  uint16_t count = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	82fb      	strh	r3, [r7, #22]
  uint8_t epindex = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	77fb      	strb	r3, [r7, #31]
  __IO uint16_t wIstr = 0;  
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	81fb      	strh	r3, [r7, #14]
  __IO uint16_t wEPVal = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	81bb      	strh	r3, [r7, #12]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8001ccc:	e306      	b.n	80022dc <PCD_EP_ISR_Handler+0x62c>
  {
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001cce:	89fb      	ldrh	r3, [r7, #14]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	f003 030f 	and.w	r3, r3, #15
 8001cd8:	77fb      	strb	r3, [r7, #31]
    
    if (epindex == 0)
 8001cda:	7ffb      	ldrb	r3, [r7, #31]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f040 8129 	bne.w	8001f34 <PCD_EP_ISR_Handler+0x284>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 8001ce2:	89fb      	ldrh	r3, [r7, #14]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	f003 0310 	and.w	r3, r3, #16
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d14c      	bne.n	8001d88 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3328      	adds	r3, #40	@ 0x28
 8001d0a:	61bb      	str	r3, [r7, #24]
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	461a      	mov	r2, r3
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	4413      	add	r3, r2
 8001d20:	3302      	adds	r3, #2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	4413      	add	r3, r2
 8001d2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	695a      	ldr	r2, [r3, #20]
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	441a      	add	r2, r3
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	615a      	str	r2, [r3, #20]
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001d48:	2100      	movs	r1, #0
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f004 fa5a 	bl	8006204 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 82bf 	beq.w	80022dc <PCD_EP_ISR_Handler+0x62c>
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f040 82ba 	bne.w	80022dc <PCD_EP_ISR_Handler+0x62c>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001d86:	e2a9      	b.n	80022dc <PCD_EP_ISR_Handler+0x62c>
      {
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0U];
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 8001d8e:	61bb      	str	r3, [r7, #24]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	81bb      	strh	r3, [r7, #12]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001d9a:	89bb      	ldrh	r3, [r7, #12]
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d031      	beq.n	8001e0a <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	461a      	mov	r2, r3
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	4413      	add	r3, r2
 8001dba:	3306      	adds	r3, #6
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6812      	ldr	r2, [r2, #0]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	61da      	str	r2, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6818      	ldr	r0, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f203 412c 	addw	r1, r3, #1068	@ 0x42c
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	889a      	ldrh	r2, [r3, #4]
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	f002 fef1 	bl	8004bce <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	b299      	uxth	r1, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001dfc:	400b      	ands	r3, r1
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f004 f9d4 	bl	80061b0 <HAL_PCD_SetupStageCallback>
 8001e08:	e268      	b.n	80022dc <PCD_EP_ISR_Handler+0x62c>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e0a:	89bb      	ldrh	r3, [r7, #12]
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	b21b      	sxth	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f280 8263 	bge.w	80022dc <PCD_EP_ISR_Handler+0x62c>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	881b      	ldrh	r3, [r3, #0]
 8001e1c:	b299      	uxth	r1, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001e26:	400b      	ands	r3, r1
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	8013      	strh	r3, [r2, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	461a      	mov	r2, r3
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4413      	add	r3, r2
 8001e40:	3306      	adds	r3, #6
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6812      	ldr	r2, [r2, #0]
 8001e48:	4413      	add	r3, r2
 8001e4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	61da      	str	r2, [r3, #28]
          
          if (ep->xfer_count != 0U)
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d011      	beq.n	8001e86 <PCD_EP_ISR_Handler+0x1d6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6818      	ldr	r0, [r3, #0]
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	6959      	ldr	r1, [r3, #20]
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	889a      	ldrh	r2, [r3, #4]
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	f002 feab 	bl	8004bce <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	695a      	ldr	r2, [r3, #20]
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	441a      	add	r2, r3
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	615a      	str	r2, [r3, #20]
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001e86:	2100      	movs	r1, #0
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f004 f9a3 	bl	80061d4 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	3306      	adds	r3, #6
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6812      	ldr	r2, [r2, #0]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	2b3e      	cmp	r3, #62	@ 0x3e
 8001eae:	d918      	bls.n	8001ee2 <PCD_EP_ISR_Handler+0x232>
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	095b      	lsrs	r3, r3, #5
 8001eb6:	82bb      	strh	r3, [r7, #20]
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	f003 031f 	and.w	r3, r3, #31
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d102      	bne.n	8001eca <PCD_EP_ISR_Handler+0x21a>
 8001ec4:	8abb      	ldrh	r3, [r7, #20]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	82bb      	strh	r3, [r7, #20]
 8001eca:	8abb      	ldrh	r3, [r7, #20]
 8001ecc:	029b      	lsls	r3, r3, #10
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	461a      	mov	r2, r3
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	e012      	b.n	8001f08 <PCD_EP_ISR_Handler+0x258>
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	085b      	lsrs	r3, r3, #1
 8001ee8:	82bb      	strh	r3, [r7, #20]
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <PCD_EP_ISR_Handler+0x24c>
 8001ef6:	8abb      	ldrh	r3, [r7, #20]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	82bb      	strh	r3, [r7, #20]
 8001efc:	8abb      	ldrh	r3, [r7, #20]
 8001efe:	029b      	lsls	r3, r3, #10
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	461a      	mov	r2, r3
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	601a      	str	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	881b      	ldrh	r3, [r3, #0]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f18:	b29c      	uxth	r4, r3
 8001f1a:	f484 5380 	eor.w	r3, r4, #4096	@ 0x1000
 8001f1e:	b29c      	uxth	r4, r3
 8001f20:	f484 5300 	eor.w	r3, r4, #8192	@ 0x2000
 8001f24:	b29c      	uxth	r4, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	4b98      	ldr	r3, [pc, #608]	@ (800218c <PCD_EP_ISR_Handler+0x4dc>)
 8001f2c:	4323      	orrs	r3, r4
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	8013      	strh	r3, [r2, #0]
 8001f32:	e1d3      	b.n	80022dc <PCD_EP_ISR_Handler+0x62c>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	7ffb      	ldrb	r3, [r7, #31]
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	81bb      	strh	r3, [r7, #12]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f46:	89bb      	ldrh	r3, [r7, #12]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	b21b      	sxth	r3, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f280 80d0 	bge.w	80020f2 <PCD_EP_ISR_Handler+0x442>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	7ffb      	ldrb	r3, [r7, #31]
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	b299      	uxth	r1, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	461a      	mov	r2, r3
 8001f68:	7ffb      	ldrb	r3, [r7, #31]
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	441a      	add	r2, r3
 8001f6e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001f72:	400b      	ands	r3, r1
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001f78:	7ffb      	ldrb	r3, [r7, #31]
 8001f7a:	015b      	lsls	r3, r3, #5
 8001f7c:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	4413      	add	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	7a9b      	ldrb	r3, [r3, #10]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d122      	bne.n	8001fd4 <PCD_EP_ISR_Handler+0x324>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	461a      	mov	r2, r3
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3306      	adds	r3, #6
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6812      	ldr	r2, [r2, #0]
 8001faa:	4413      	add	r3, r2
 8001fac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fb8:	82fb      	strh	r3, [r7, #22]
          if (count != 0U)
 8001fba:	8afb      	ldrh	r3, [r7, #22]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d073      	beq.n	80020a8 <PCD_EP_ISR_Handler+0x3f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6818      	ldr	r0, [r3, #0]
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	6959      	ldr	r1, [r3, #20]
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	889a      	ldrh	r2, [r3, #4]
 8001fcc:	8afb      	ldrh	r3, [r7, #22]
 8001fce:	f002 fdfe 	bl	8004bce <USB_ReadPMA>
 8001fd2:	e069      	b.n	80020a8 <PCD_EP_ISR_Handler+0x3f8>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d022      	beq.n	8002034 <PCD_EP_ISR_Handler+0x384>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	4413      	add	r3, r2
 8002002:	3302      	adds	r3, #2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6812      	ldr	r2, [r2, #0]
 800200a:	4413      	add	r3, r2
 800200c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	b29b      	uxth	r3, r3
 8002014:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002018:	82fb      	strh	r3, [r7, #22]
            if (count != 0U)
 800201a:	8afb      	ldrh	r3, [r7, #22]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d02b      	beq.n	8002078 <PCD_EP_ISR_Handler+0x3c8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6818      	ldr	r0, [r3, #0]
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	6959      	ldr	r1, [r3, #20]
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	88da      	ldrh	r2, [r3, #6]
 800202c:	8afb      	ldrh	r3, [r7, #22]
 800202e:	f002 fdce 	bl	8004bce <USB_ReadPMA>
 8002032:	e021      	b.n	8002078 <PCD_EP_ISR_Handler+0x3c8>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800203c:	b29b      	uxth	r3, r3
 800203e:	461a      	mov	r2, r3
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4413      	add	r3, r2
 8002048:	3306      	adds	r3, #6
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	4413      	add	r3, r2
 8002052:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	b29b      	uxth	r3, r3
 800205a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800205e:	82fb      	strh	r3, [r7, #22]
            if (count != 0U)
 8002060:	8afb      	ldrh	r3, [r7, #22]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d008      	beq.n	8002078 <PCD_EP_ISR_Handler+0x3c8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	6959      	ldr	r1, [r3, #20]
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	891a      	ldrh	r2, [r3, #8]
 8002072:	8afb      	ldrh	r3, [r7, #22]
 8002074:	f002 fdab 	bl	8004bce <USB_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	461a      	mov	r2, r3
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	b29a      	uxth	r2, r3
 800208a:	f640 730f 	movw	r3, #3855	@ 0xf0f
 800208e:	4013      	ands	r3, r2
 8002090:	b299      	uxth	r1, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	461a      	mov	r2, r3
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	441a      	add	r2, r3
 80020a0:	4b3b      	ldr	r3, [pc, #236]	@ (8002190 <PCD_EP_ISR_Handler+0x4e0>)
 80020a2:	430b      	orrs	r3, r1
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	69da      	ldr	r2, [r3, #28]
 80020ac:	8afb      	ldrh	r3, [r7, #22]
 80020ae:	441a      	add	r2, r3
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=count;
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	695a      	ldr	r2, [r3, #20]
 80020b8:	8afb      	ldrh	r3, [r7, #22]
 80020ba:	441a      	add	r2, r3
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	615a      	str	r2, [r3, #20]
       
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d004      	beq.n	80020d2 <PCD_EP_ISR_Handler+0x422>
 80020c8:	8afa      	ldrh	r2, [r7, #22]
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d206      	bcs.n	80020e0 <PCD_EP_ISR_Handler+0x430>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	4619      	mov	r1, r3
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f004 f87b 	bl	80061d4 <HAL_PCD_DataOutStageCallback>
 80020de:	e008      	b.n	80020f2 <PCD_EP_ISR_Handler+0x442>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	7819      	ldrb	r1, [r3, #0]
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	695a      	ldr	r2, [r3, #20]
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff fcb7 	bl	8001a60 <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80020f2:	89bb      	ldrh	r3, [r7, #12]
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 80ee 	beq.w	80022dc <PCD_EP_ISR_Handler+0x62c>
      {
        ep = &hpcd->IN_ep[epindex];
 8002100:	7ffb      	ldrb	r3, [r7, #31]
 8002102:	015b      	lsls	r3, r3, #5
 8002104:	3328      	adds	r3, #40	@ 0x28
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	461a      	mov	r2, r3
 8002112:	7ffb      	ldrb	r3, [r7, #31]
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	b29b      	uxth	r3, r3
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6812      	ldr	r2, [r2, #0]
 8002120:	4611      	mov	r1, r2
 8002122:	7ffa      	ldrb	r2, [r7, #31]
 8002124:	0092      	lsls	r2, r2, #2
 8002126:	440a      	add	r2, r1
 8002128:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800212c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002130:	b29b      	uxth	r3, r3
 8002132:	8013      	strh	r3, [r2, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	7a9b      	ldrb	r3, [r3, #10]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d12b      	bne.n	8002194 <PCD_EP_ISR_Handler+0x4e4>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002144:	b29b      	uxth	r3, r3
 8002146:	461a      	mov	r2, r3
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4413      	add	r3, r2
 8002150:	3302      	adds	r3, #2
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6812      	ldr	r2, [r2, #0]
 8002158:	4413      	add	r3, r2
 800215a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	b29b      	uxth	r3, r3
 8002162:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	61da      	str	r2, [r3, #28]
          if (ep->xfer_count != 0U)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 8082 	beq.w	8002278 <PCD_EP_ISR_Handler+0x5c8>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	6959      	ldr	r1, [r3, #20]
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	889a      	ldrh	r2, [r3, #4]
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	b29b      	uxth	r3, r3
 8002186:	f002 fcdc 	bl	8004b42 <USB_WritePMA>
 800218a:	e075      	b.n	8002278 <PCD_EP_ISR_Handler+0x5c8>
 800218c:	ffff8080 	.word	0xffff8080
 8002190:	ffff80c0 	.word	0xffff80c0
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	461a      	mov	r2, r3
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	881b      	ldrh	r3, [r3, #0]
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d026      	beq.n	80021fc <PCD_EP_ISR_Handler+0x54c>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	461a      	mov	r2, r3
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4413      	add	r3, r2
 80021c2:	3302      	adds	r3, #2
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6812      	ldr	r2, [r2, #0]
 80021ca:	4413      	add	r3, r2
 80021cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	69db      	ldr	r3, [r3, #28]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d031      	beq.n	8002248 <PCD_EP_ISR_Handler+0x598>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6818      	ldr	r0, [r3, #0]
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	6959      	ldr	r1, [r3, #20]
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	88da      	ldrh	r2, [r3, #6]
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	f002 fca4 	bl	8004b42 <USB_WritePMA>
 80021fa:	e025      	b.n	8002248 <PCD_EP_ISR_Handler+0x598>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002204:	b29b      	uxth	r3, r3
 8002206:	461a      	mov	r2, r3
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	4413      	add	r3, r2
 8002210:	3306      	adds	r3, #6
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	4413      	add	r3, r2
 800221a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	b29b      	uxth	r3, r3
 8002222:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00a      	beq.n	8002248 <PCD_EP_ISR_Handler+0x598>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	6959      	ldr	r1, [r3, #20]
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	891a      	ldrh	r2, [r3, #8]
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	b29b      	uxth	r3, r3
 8002244:	f002 fc7d 	bl	8004b42 <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	b29a      	uxth	r2, r3
 800225a:	f640 730f 	movw	r3, #3855	@ 0xf0f
 800225e:	4013      	ands	r3, r2
 8002260:	b299      	uxth	r1, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	461a      	mov	r2, r3
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	441a      	add	r2, r3
 8002270:	4b22      	ldr	r3, [pc, #136]	@ (80022fc <PCD_EP_ISR_Handler+0x64c>)
 8002272:	430b      	orrs	r3, r1
 8002274:	b29b      	uxth	r3, r3
 8002276:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002280:	b29b      	uxth	r3, r3
 8002282:	461a      	mov	r2, r3
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	4413      	add	r3, r2
 800228c:	3302      	adds	r3, #2
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6812      	ldr	r2, [r2, #0]
 8002294:	4413      	add	r3, r2
 8002296:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	b29b      	uxth	r3, r3
 800229e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=ep->xfer_count;
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	695a      	ldr	r2, [r3, #20]
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	441a      	add	r2, r3
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	615a      	str	r2, [r3, #20]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d106      	bne.n	80022ca <PCD_EP_ISR_Handler+0x61a>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	4619      	mov	r1, r3
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f003 ff9e 	bl	8006204 <HAL_PCD_DataInStageCallback>
 80022c8:	e008      	b.n	80022dc <PCD_EP_ISR_Handler+0x62c>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	7819      	ldrb	r1, [r3, #0]
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	695a      	ldr	r2, [r3, #20]
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff fc13 	bl	8001b02 <HAL_PCD_EP_Transmit>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	461a      	mov	r2, r3
 80022e8:	81fa      	strh	r2, [r7, #14]
 80022ea:	b21b      	sxth	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f6ff acee 	blt.w	8001cce <PCD_EP_ISR_Handler+0x1e>
        }
      } 
    }
  }
  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3724      	adds	r7, #36	@ 0x24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd90      	pop	{r4, r7, pc}
 80022fc:	ffffc080 	.word	0xffffc080

08002300 <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)

{
 8002300:	b480      	push	{r7}
 8002302:	b087      	sub	sp, #28
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	607b      	str	r3, [r7, #4]
 800230a:	460b      	mov	r3, r1
 800230c:	817b      	strh	r3, [r7, #10]
 800230e:	4613      	mov	r3, r2
 8002310:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep = NULL;
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8002316:	897b      	ldrh	r3, [r7, #10]
 8002318:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800231c:	2b00      	cmp	r3, #0
 800231e:	d008      	beq.n	8002332 <HAL_PCDEx_PMAConfig+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002320:	897b      	ldrh	r3, [r7, #10]
 8002322:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002326:	015b      	lsls	r3, r3, #5
 8002328:	3328      	adds	r3, #40	@ 0x28
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	4413      	add	r3, r2
 800232e:	617b      	str	r3, [r7, #20]
 8002330:	e006      	b.n	8002340 <HAL_PCDEx_PMAConfig+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002332:	897b      	ldrh	r3, [r7, #10]
 8002334:	015b      	lsls	r3, r3, #5
 8002336:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	4413      	add	r3, r2
 800233e:	617b      	str	r3, [r7, #20]
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002340:	893b      	ldrh	r3, [r7, #8]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d107      	bne.n	8002356 <HAL_PCDEx_PMAConfig+0x56>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	2200      	movs	r2, #0
 800234a:	729a      	strb	r2, [r3, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	b29a      	uxth	r2, r3
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	809a      	strh	r2, [r3, #4]
 8002354:	e00b      	b.n	800236e <HAL_PCDEx_PMAConfig+0x6e>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	2201      	movs	r2, #1
 800235a:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	b29a      	uxth	r2, r3
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	0c1b      	lsrs	r3, r3, #16
 8002368:	b29a      	uxth	r2, r3
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	811a      	strh	r2, [r3, #8]
  }
  
  return HAL_OK; 
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	371c      	adds	r7, #28
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr
	...

0800237c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d104      	bne.n	8002398 <HAL_RCC_OscConfig+0x1c>
 800238e:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8002392:	4897      	ldr	r0, [pc, #604]	@ (80025f0 <HAL_RCC_OscConfig+0x274>)
 8002394:	f7fe fa05 	bl	80007a2 <assert_failed>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d01c      	beq.n	80023da <HAL_RCC_OscConfig+0x5e>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d116      	bne.n	80023da <HAL_RCC_OscConfig+0x5e>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d110      	bne.n	80023da <HAL_RCC_OscConfig+0x5e>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10a      	bne.n	80023da <HAL_RCC_OscConfig+0x5e>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d104      	bne.n	80023da <HAL_RCC_OscConfig+0x5e>
 80023d0:	f240 1171 	movw	r1, #369	@ 0x171
 80023d4:	4886      	ldr	r0, [pc, #536]	@ (80025f0 <HAL_RCC_OscConfig+0x274>)
 80023d6:	f7fe f9e4 	bl	80007a2 <assert_failed>
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 809a 	beq.w	800251c <HAL_RCC_OscConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00e      	beq.n	800240e <HAL_RCC_OscConfig+0x92>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023f8:	d009      	beq.n	800240e <HAL_RCC_OscConfig+0x92>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002402:	d004      	beq.n	800240e <HAL_RCC_OscConfig+0x92>
 8002404:	f240 1177 	movw	r1, #375	@ 0x177
 8002408:	4879      	ldr	r0, [pc, #484]	@ (80025f0 <HAL_RCC_OscConfig+0x274>)
 800240a:	f7fe f9ca 	bl	80007a2 <assert_failed>
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800240e:	4b79      	ldr	r3, [pc, #484]	@ (80025f4 <HAL_RCC_OscConfig+0x278>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	2b04      	cmp	r3, #4
 8002418:	d00c      	beq.n	8002434 <HAL_RCC_OscConfig+0xb8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800241a:	4b76      	ldr	r3, [pc, #472]	@ (80025f4 <HAL_RCC_OscConfig+0x278>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 030c 	and.w	r3, r3, #12
 8002422:	2b08      	cmp	r3, #8
 8002424:	d112      	bne.n	800244c <HAL_RCC_OscConfig+0xd0>
 8002426:	4b73      	ldr	r3, [pc, #460]	@ (80025f4 <HAL_RCC_OscConfig+0x278>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800242e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002432:	d10b      	bne.n	800244c <HAL_RCC_OscConfig+0xd0>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002434:	4b6f      	ldr	r3, [pc, #444]	@ (80025f4 <HAL_RCC_OscConfig+0x278>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d06c      	beq.n	800251a <HAL_RCC_OscConfig+0x19e>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d168      	bne.n	800251a <HAL_RCC_OscConfig+0x19e>
      {
        return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e2ea      	b.n	8002a22 <HAL_RCC_OscConfig+0x6a6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002454:	d106      	bne.n	8002464 <HAL_RCC_OscConfig+0xe8>
 8002456:	4b67      	ldr	r3, [pc, #412]	@ (80025f4 <HAL_RCC_OscConfig+0x278>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a66      	ldr	r2, [pc, #408]	@ (80025f4 <HAL_RCC_OscConfig+0x278>)
 800245c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	e02e      	b.n	80024c2 <HAL_RCC_OscConfig+0x146>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10c      	bne.n	8002486 <HAL_RCC_OscConfig+0x10a>
 800246c:	4b61      	ldr	r3, [pc, #388]	@ (80025f4 <HAL_RCC_OscConfig+0x278>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a60      	ldr	r2, [pc, #384]	@ (80025f4 <HAL_RCC_OscConfig+0x278>)
 8002472:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	4b5e      	ldr	r3, [pc, #376]	@ (80025f4 <HAL_RCC_OscConfig+0x278>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a5d      	ldr	r2, [pc, #372]	@ (80025f4 <HAL_RCC_OscConfig+0x278>)
 800247e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	e01d      	b.n	80024c2 <HAL_RCC_OscConfig+0x146>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800248e:	d10c      	bne.n	80024aa <HAL_RCC_OscConfig+0x12e>
 8002490:	4b58      	ldr	r3, [pc, #352]	@ (80025f4 <HAL_RCC_OscConfig+0x278>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a57      	ldr	r2, [pc, #348]	@ (80025f4 <HAL_RCC_OscConfig+0x278>)
 8002496:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	4b55      	ldr	r3, [pc, #340]	@ (80025f4 <HAL_RCC_OscConfig+0x278>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a54      	ldr	r2, [pc, #336]	@ (80025f4 <HAL_RCC_OscConfig+0x278>)
 80024a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a6:	6013      	str	r3, [r2, #0]
 80024a8:	e00b      	b.n	80024c2 <HAL_RCC_OscConfig+0x146>
 80024aa:	4b52      	ldr	r3, [pc, #328]	@ (80025f4 <HAL_RCC_OscConfig+0x278>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a51      	ldr	r2, [pc, #324]	@ (80025f4 <HAL_RCC_OscConfig+0x278>)
 80024b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	4b4f      	ldr	r3, [pc, #316]	@ (80025f4 <HAL_RCC_OscConfig+0x278>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a4e      	ldr	r2, [pc, #312]	@ (80025f4 <HAL_RCC_OscConfig+0x278>)
 80024bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024c0:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d013      	beq.n	80024f2 <HAL_RCC_OscConfig+0x176>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ca:	f7fe fb55 	bl	8000b78 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x168>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024d2:	f7fe fb51 	bl	8000b78 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b64      	cmp	r3, #100	@ 0x64
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x168>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e29e      	b.n	8002a22 <HAL_RCC_OscConfig+0x6a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e4:	4b43      	ldr	r3, [pc, #268]	@ (80025f4 <HAL_RCC_OscConfig+0x278>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0f0      	beq.n	80024d2 <HAL_RCC_OscConfig+0x156>
 80024f0:	e014      	b.n	800251c <HAL_RCC_OscConfig+0x1a0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f2:	f7fe fb41 	bl	8000b78 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x190>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024fa:	f7fe fb3d 	bl	8000b78 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b64      	cmp	r3, #100	@ 0x64
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e28a      	b.n	8002a22 <HAL_RCC_OscConfig+0x6a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250c:	4b39      	ldr	r3, [pc, #228]	@ (80025f4 <HAL_RCC_OscConfig+0x278>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1f0      	bne.n	80024fa <HAL_RCC_OscConfig+0x17e>
 8002518:	e000      	b.n	800251c <HAL_RCC_OscConfig+0x1a0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800251a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d07f      	beq.n	8002628 <HAL_RCC_OscConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <HAL_RCC_OscConfig+0x1c6>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d004      	beq.n	8002542 <HAL_RCC_OscConfig+0x1c6>
 8002538:	f240 11ab 	movw	r1, #427	@ 0x1ab
 800253c:	482c      	ldr	r0, [pc, #176]	@ (80025f0 <HAL_RCC_OscConfig+0x274>)
 800253e:	f7fe f930 	bl	80007a2 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	2b1f      	cmp	r3, #31
 8002548:	d904      	bls.n	8002554 <HAL_RCC_OscConfig+0x1d8>
 800254a:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 800254e:	4828      	ldr	r0, [pc, #160]	@ (80025f0 <HAL_RCC_OscConfig+0x274>)
 8002550:	f7fe f927 	bl	80007a2 <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002554:	4b27      	ldr	r3, [pc, #156]	@ (80025f4 <HAL_RCC_OscConfig+0x278>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 030c 	and.w	r3, r3, #12
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00b      	beq.n	8002578 <HAL_RCC_OscConfig+0x1fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002560:	4b24      	ldr	r3, [pc, #144]	@ (80025f4 <HAL_RCC_OscConfig+0x278>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 030c 	and.w	r3, r3, #12
 8002568:	2b08      	cmp	r3, #8
 800256a:	d11c      	bne.n	80025a6 <HAL_RCC_OscConfig+0x22a>
 800256c:	4b21      	ldr	r3, [pc, #132]	@ (80025f4 <HAL_RCC_OscConfig+0x278>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d116      	bne.n	80025a6 <HAL_RCC_OscConfig+0x22a>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002578:	4b1e      	ldr	r3, [pc, #120]	@ (80025f4 <HAL_RCC_OscConfig+0x278>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_RCC_OscConfig+0x214>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d001      	beq.n	8002590 <HAL_RCC_OscConfig+0x214>
      {
        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e248      	b.n	8002a22 <HAL_RCC_OscConfig+0x6a6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002590:	4b18      	ldr	r3, [pc, #96]	@ (80025f4 <HAL_RCC_OscConfig+0x278>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	4915      	ldr	r1, [pc, #84]	@ (80025f4 <HAL_RCC_OscConfig+0x278>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a4:	e040      	b.n	8002628 <HAL_RCC_OscConfig+0x2ac>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d026      	beq.n	80025fc <HAL_RCC_OscConfig+0x280>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025ae:	4b12      	ldr	r3, [pc, #72]	@ (80025f8 <HAL_RCC_OscConfig+0x27c>)
 80025b0:	2201      	movs	r2, #1
 80025b2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b4:	f7fe fae0 	bl	8000b78 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x252>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025bc:	f7fe fadc 	bl	8000b78 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x252>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e229      	b.n	8002a22 <HAL_RCC_OscConfig+0x6a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ce:	4b09      	ldr	r3, [pc, #36]	@ (80025f4 <HAL_RCC_OscConfig+0x278>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0f0      	beq.n	80025bc <HAL_RCC_OscConfig+0x240>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025da:	4b06      	ldr	r3, [pc, #24]	@ (80025f4 <HAL_RCC_OscConfig+0x278>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	4902      	ldr	r1, [pc, #8]	@ (80025f4 <HAL_RCC_OscConfig+0x278>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	600b      	str	r3, [r1, #0]
 80025ee:	e01b      	b.n	8002628 <HAL_RCC_OscConfig+0x2ac>
 80025f0:	0800690c 	.word	0x0800690c
 80025f4:	40021000 	.word	0x40021000
 80025f8:	42420000 	.word	0x42420000
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025fc:	4b85      	ldr	r3, [pc, #532]	@ (8002814 <HAL_RCC_OscConfig+0x498>)
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002602:	f7fe fab9 	bl	8000b78 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800260a:	f7fe fab5 	bl	8000b78 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e202      	b.n	8002a22 <HAL_RCC_OscConfig+0x6a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800261c:	4b7e      	ldr	r3, [pc, #504]	@ (8002818 <HAL_RCC_OscConfig+0x49c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1f0      	bne.n	800260a <HAL_RCC_OscConfig+0x28e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	2b00      	cmp	r3, #0
 8002632:	d040      	beq.n	80026b6 <HAL_RCC_OscConfig+0x33a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d008      	beq.n	800264e <HAL_RCC_OscConfig+0x2d2>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d004      	beq.n	800264e <HAL_RCC_OscConfig+0x2d2>
 8002644:	f44f 71f6 	mov.w	r1, #492	@ 0x1ec
 8002648:	4874      	ldr	r0, [pc, #464]	@ (800281c <HAL_RCC_OscConfig+0x4a0>)
 800264a:	f7fe f8aa 	bl	80007a2 <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d019      	beq.n	800268a <HAL_RCC_OscConfig+0x30e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002656:	4b72      	ldr	r3, [pc, #456]	@ (8002820 <HAL_RCC_OscConfig+0x4a4>)
 8002658:	2201      	movs	r2, #1
 800265a:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800265c:	f7fe fa8c 	bl	8000b78 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002664:	f7fe fa88 	bl	8000b78 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e1d5      	b.n	8002a22 <HAL_RCC_OscConfig+0x6a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002676:	4b68      	ldr	r3, [pc, #416]	@ (8002818 <HAL_RCC_OscConfig+0x49c>)
 8002678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0x2e8>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8002682:	2001      	movs	r0, #1
 8002684:	f000 fc0a 	bl	8002e9c <RCC_Delay>
 8002688:	e015      	b.n	80026b6 <HAL_RCC_OscConfig+0x33a>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800268a:	4b65      	ldr	r3, [pc, #404]	@ (8002820 <HAL_RCC_OscConfig+0x4a4>)
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002690:	f7fe fa72 	bl	8000b78 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x32e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002698:	f7fe fa6e 	bl	8000b78 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x32e>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e1bb      	b.n	8002a22 <HAL_RCC_OscConfig+0x6a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026aa:	4b5b      	ldr	r3, [pc, #364]	@ (8002818 <HAL_RCC_OscConfig+0x49c>)
 80026ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f0      	bne.n	8002698 <HAL_RCC_OscConfig+0x31c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0304 	and.w	r3, r3, #4
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 80c1 	beq.w	8002846 <HAL_RCC_OscConfig+0x4ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026c4:	2300      	movs	r3, #0
 80026c6:	75fb      	strb	r3, [r7, #23]
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00c      	beq.n	80026ea <HAL_RCC_OscConfig+0x36e>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d008      	beq.n	80026ea <HAL_RCC_OscConfig+0x36e>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	2b05      	cmp	r3, #5
 80026de:	d004      	beq.n	80026ea <HAL_RCC_OscConfig+0x36e>
 80026e0:	f240 211b 	movw	r1, #539	@ 0x21b
 80026e4:	484d      	ldr	r0, [pc, #308]	@ (800281c <HAL_RCC_OscConfig+0x4a0>)
 80026e6:	f7fe f85c 	bl	80007a2 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ea:	4b4b      	ldr	r3, [pc, #300]	@ (8002818 <HAL_RCC_OscConfig+0x49c>)
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10d      	bne.n	8002712 <HAL_RCC_OscConfig+0x396>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f6:	4b48      	ldr	r3, [pc, #288]	@ (8002818 <HAL_RCC_OscConfig+0x49c>)
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	4a47      	ldr	r2, [pc, #284]	@ (8002818 <HAL_RCC_OscConfig+0x49c>)
 80026fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002700:	61d3      	str	r3, [r2, #28]
 8002702:	4b45      	ldr	r3, [pc, #276]	@ (8002818 <HAL_RCC_OscConfig+0x49c>)
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800270e:	2301      	movs	r3, #1
 8002710:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002712:	4b44      	ldr	r3, [pc, #272]	@ (8002824 <HAL_RCC_OscConfig+0x4a8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800271a:	2b00      	cmp	r3, #0
 800271c:	d118      	bne.n	8002750 <HAL_RCC_OscConfig+0x3d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800271e:	4b41      	ldr	r3, [pc, #260]	@ (8002824 <HAL_RCC_OscConfig+0x4a8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a40      	ldr	r2, [pc, #256]	@ (8002824 <HAL_RCC_OscConfig+0x4a8>)
 8002724:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002728:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800272a:	f7fe fa25 	bl	8000b78 <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002732:	f7fe fa21 	bl	8000b78 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b64      	cmp	r3, #100	@ 0x64
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e16e      	b.n	8002a22 <HAL_RCC_OscConfig+0x6a6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002744:	4b37      	ldr	r3, [pc, #220]	@ (8002824 <HAL_RCC_OscConfig+0x4a8>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0f0      	beq.n	8002732 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d106      	bne.n	8002766 <HAL_RCC_OscConfig+0x3ea>
 8002758:	4b2f      	ldr	r3, [pc, #188]	@ (8002818 <HAL_RCC_OscConfig+0x49c>)
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	4a2e      	ldr	r2, [pc, #184]	@ (8002818 <HAL_RCC_OscConfig+0x49c>)
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	6213      	str	r3, [r2, #32]
 8002764:	e02d      	b.n	80027c2 <HAL_RCC_OscConfig+0x446>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10c      	bne.n	8002788 <HAL_RCC_OscConfig+0x40c>
 800276e:	4b2a      	ldr	r3, [pc, #168]	@ (8002818 <HAL_RCC_OscConfig+0x49c>)
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	4a29      	ldr	r2, [pc, #164]	@ (8002818 <HAL_RCC_OscConfig+0x49c>)
 8002774:	f023 0301 	bic.w	r3, r3, #1
 8002778:	6213      	str	r3, [r2, #32]
 800277a:	4b27      	ldr	r3, [pc, #156]	@ (8002818 <HAL_RCC_OscConfig+0x49c>)
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	4a26      	ldr	r2, [pc, #152]	@ (8002818 <HAL_RCC_OscConfig+0x49c>)
 8002780:	f023 0304 	bic.w	r3, r3, #4
 8002784:	6213      	str	r3, [r2, #32]
 8002786:	e01c      	b.n	80027c2 <HAL_RCC_OscConfig+0x446>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	2b05      	cmp	r3, #5
 800278e:	d10c      	bne.n	80027aa <HAL_RCC_OscConfig+0x42e>
 8002790:	4b21      	ldr	r3, [pc, #132]	@ (8002818 <HAL_RCC_OscConfig+0x49c>)
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	4a20      	ldr	r2, [pc, #128]	@ (8002818 <HAL_RCC_OscConfig+0x49c>)
 8002796:	f043 0304 	orr.w	r3, r3, #4
 800279a:	6213      	str	r3, [r2, #32]
 800279c:	4b1e      	ldr	r3, [pc, #120]	@ (8002818 <HAL_RCC_OscConfig+0x49c>)
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	4a1d      	ldr	r2, [pc, #116]	@ (8002818 <HAL_RCC_OscConfig+0x49c>)
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	6213      	str	r3, [r2, #32]
 80027a8:	e00b      	b.n	80027c2 <HAL_RCC_OscConfig+0x446>
 80027aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002818 <HAL_RCC_OscConfig+0x49c>)
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002818 <HAL_RCC_OscConfig+0x49c>)
 80027b0:	f023 0301 	bic.w	r3, r3, #1
 80027b4:	6213      	str	r3, [r2, #32]
 80027b6:	4b18      	ldr	r3, [pc, #96]	@ (8002818 <HAL_RCC_OscConfig+0x49c>)
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	4a17      	ldr	r2, [pc, #92]	@ (8002818 <HAL_RCC_OscConfig+0x49c>)
 80027bc:	f023 0304 	bic.w	r3, r3, #4
 80027c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d015      	beq.n	80027f6 <HAL_RCC_OscConfig+0x47a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ca:	f7fe f9d5 	bl	8000b78 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d0:	e00a      	b.n	80027e8 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027d2:	f7fe f9d1 	bl	8000b78 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e11c      	b.n	8002a22 <HAL_RCC_OscConfig+0x6a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002818 <HAL_RCC_OscConfig+0x49c>)
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0ee      	beq.n	80027d2 <HAL_RCC_OscConfig+0x456>
 80027f4:	e01e      	b.n	8002834 <HAL_RCC_OscConfig+0x4b8>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f6:	f7fe f9bf 	bl	8000b78 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027fc:	e014      	b.n	8002828 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027fe:	f7fe f9bb 	bl	8000b78 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	f241 3288 	movw	r2, #5000	@ 0x1388
 800280c:	4293      	cmp	r3, r2
 800280e:	d90b      	bls.n	8002828 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e106      	b.n	8002a22 <HAL_RCC_OscConfig+0x6a6>
 8002814:	42420000 	.word	0x42420000
 8002818:	40021000 	.word	0x40021000
 800281c:	0800690c 	.word	0x0800690c
 8002820:	42420480 	.word	0x42420480
 8002824:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002828:	4b80      	ldr	r3, [pc, #512]	@ (8002a2c <HAL_RCC_OscConfig+0x6b0>)
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1e4      	bne.n	80027fe <HAL_RCC_OscConfig+0x482>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002834:	7dfb      	ldrb	r3, [r7, #23]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d105      	bne.n	8002846 <HAL_RCC_OscConfig+0x4ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800283a:	4b7c      	ldr	r3, [pc, #496]	@ (8002a2c <HAL_RCC_OscConfig+0x6b0>)
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	4a7b      	ldr	r2, [pc, #492]	@ (8002a2c <HAL_RCC_OscConfig+0x6b0>)
 8002840:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002844:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00c      	beq.n	8002868 <HAL_RCC_OscConfig+0x4ec>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d008      	beq.n	8002868 <HAL_RCC_OscConfig+0x4ec>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	2b02      	cmp	r3, #2
 800285c:	d004      	beq.n	8002868 <HAL_RCC_OscConfig+0x4ec>
 800285e:	f240 21b9 	movw	r1, #697	@ 0x2b9
 8002862:	4873      	ldr	r0, [pc, #460]	@ (8002a30 <HAL_RCC_OscConfig+0x6b4>)
 8002864:	f7fd ff9d 	bl	80007a2 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 80d7 	beq.w	8002a20 <HAL_RCC_OscConfig+0x6a4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002872:	4b6e      	ldr	r3, [pc, #440]	@ (8002a2c <HAL_RCC_OscConfig+0x6b0>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	2b08      	cmp	r3, #8
 800287c:	f000 80ce 	beq.w	8002a1c <HAL_RCC_OscConfig+0x6a0>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	2b02      	cmp	r3, #2
 8002886:	f040 80b2 	bne.w	80029ee <HAL_RCC_OscConfig+0x672>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d009      	beq.n	80028a6 <HAL_RCC_OscConfig+0x52a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800289a:	d004      	beq.n	80028a6 <HAL_RCC_OscConfig+0x52a>
 800289c:	f240 21c2 	movw	r1, #706	@ 0x2c2
 80028a0:	4863      	ldr	r0, [pc, #396]	@ (8002a30 <HAL_RCC_OscConfig+0x6b4>)
 80028a2:	f7fd ff7e 	bl	80007a2 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d04a      	beq.n	8002944 <HAL_RCC_OscConfig+0x5c8>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80028b6:	d045      	beq.n	8002944 <HAL_RCC_OscConfig+0x5c8>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028bc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80028c0:	d040      	beq.n	8002944 <HAL_RCC_OscConfig+0x5c8>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80028ca:	d03b      	beq.n	8002944 <HAL_RCC_OscConfig+0x5c8>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028d4:	d036      	beq.n	8002944 <HAL_RCC_OscConfig+0x5c8>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028da:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80028de:	d031      	beq.n	8002944 <HAL_RCC_OscConfig+0x5c8>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80028e8:	d02c      	beq.n	8002944 <HAL_RCC_OscConfig+0x5c8>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ee:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80028f2:	d027      	beq.n	8002944 <HAL_RCC_OscConfig+0x5c8>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80028fc:	d022      	beq.n	8002944 <HAL_RCC_OscConfig+0x5c8>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002902:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002906:	d01d      	beq.n	8002944 <HAL_RCC_OscConfig+0x5c8>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002910:	d018      	beq.n	8002944 <HAL_RCC_OscConfig+0x5c8>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002916:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800291a:	d013      	beq.n	8002944 <HAL_RCC_OscConfig+0x5c8>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002920:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002924:	d00e      	beq.n	8002944 <HAL_RCC_OscConfig+0x5c8>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292a:	f5b3 1f50 	cmp.w	r3, #3407872	@ 0x340000
 800292e:	d009      	beq.n	8002944 <HAL_RCC_OscConfig+0x5c8>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002934:	f5b3 1f60 	cmp.w	r3, #3670016	@ 0x380000
 8002938:	d004      	beq.n	8002944 <HAL_RCC_OscConfig+0x5c8>
 800293a:	f240 21c3 	movw	r1, #707	@ 0x2c3
 800293e:	483c      	ldr	r0, [pc, #240]	@ (8002a30 <HAL_RCC_OscConfig+0x6b4>)
 8002940:	f7fd ff2f 	bl	80007a2 <assert_failed>
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002944:	4b3b      	ldr	r3, [pc, #236]	@ (8002a34 <HAL_RCC_OscConfig+0x6b8>)
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294a:	f7fe f915 	bl	8000b78 <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x5e8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002952:	f7fe f911 	bl	8000b78 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x5e8>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e05e      	b.n	8002a22 <HAL_RCC_OscConfig+0x6a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002964:	4b31      	ldr	r3, [pc, #196]	@ (8002a2c <HAL_RCC_OscConfig+0x6b0>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1f0      	bne.n	8002952 <HAL_RCC_OscConfig+0x5d6>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002978:	d116      	bne.n	80029a8 <HAL_RCC_OscConfig+0x62c>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d009      	beq.n	8002996 <HAL_RCC_OscConfig+0x61a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800298a:	d004      	beq.n	8002996 <HAL_RCC_OscConfig+0x61a>
 800298c:	f240 21d9 	movw	r1, #729	@ 0x2d9
 8002990:	4827      	ldr	r0, [pc, #156]	@ (8002a30 <HAL_RCC_OscConfig+0x6b4>)
 8002992:	f7fd ff06 	bl	80007a2 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002996:	4b25      	ldr	r3, [pc, #148]	@ (8002a2c <HAL_RCC_OscConfig+0x6b0>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	4922      	ldr	r1, [pc, #136]	@ (8002a2c <HAL_RCC_OscConfig+0x6b0>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029a8:	4b20      	ldr	r3, [pc, #128]	@ (8002a2c <HAL_RCC_OscConfig+0x6b0>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a19      	ldr	r1, [r3, #32]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b8:	430b      	orrs	r3, r1
 80029ba:	491c      	ldr	r1, [pc, #112]	@ (8002a2c <HAL_RCC_OscConfig+0x6b0>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002a34 <HAL_RCC_OscConfig+0x6b8>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c6:	f7fe f8d7 	bl	8000b78 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x664>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ce:	f7fe f8d3 	bl	8000b78 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x664>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e020      	b.n	8002a22 <HAL_RCC_OscConfig+0x6a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029e0:	4b12      	ldr	r3, [pc, #72]	@ (8002a2c <HAL_RCC_OscConfig+0x6b0>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0f0      	beq.n	80029ce <HAL_RCC_OscConfig+0x652>
 80029ec:	e018      	b.n	8002a20 <HAL_RCC_OscConfig+0x6a4>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ee:	4b11      	ldr	r3, [pc, #68]	@ (8002a34 <HAL_RCC_OscConfig+0x6b8>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f4:	f7fe f8c0 	bl	8000b78 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x692>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029fc:	f7fe f8bc 	bl	8000b78 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x692>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e009      	b.n	8002a22 <HAL_RCC_OscConfig+0x6a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a0e:	4b07      	ldr	r3, [pc, #28]	@ (8002a2c <HAL_RCC_OscConfig+0x6b0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x680>
 8002a1a:	e001      	b.n	8002a20 <HAL_RCC_OscConfig+0x6a4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e000      	b.n	8002a22 <HAL_RCC_OscConfig+0x6a6>
    }
  }
  
  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	0800690c 	.word	0x0800690c
 8002a34:	42420060 	.word	0x42420060

08002a38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d104      	bne.n	8002a56 <HAL_RCC_ClockConfig+0x1e>
 8002a4c:	f240 312e 	movw	r1, #814	@ 0x32e
 8002a50:	488b      	ldr	r0, [pc, #556]	@ (8002c80 <HAL_RCC_ClockConfig+0x248>)
 8002a52:	f7fd fea6 	bl	80007a2 <assert_failed>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d116      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x58>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d110      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x58>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10a      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x58>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d104      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x58>
 8002a86:	f240 312f 	movw	r1, #815	@ 0x32f
 8002a8a:	487d      	ldr	r0, [pc, #500]	@ (8002c80 <HAL_RCC_ClockConfig+0x248>)
 8002a8c:	f7fd fe89 	bl	80007a2 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <HAL_RCC_ClockConfig+0x74>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d007      	beq.n	8002aac <HAL_RCC_ClockConfig+0x74>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d004      	beq.n	8002aac <HAL_RCC_ClockConfig+0x74>
 8002aa2:	f44f 714c 	mov.w	r1, #816	@ 0x330
 8002aa6:	4876      	ldr	r0, [pc, #472]	@ (8002c80 <HAL_RCC_ClockConfig+0x248>)
 8002aa8:	f7fd fe7b 	bl	80007a2 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002aac:	4b75      	ldr	r3, [pc, #468]	@ (8002c84 <HAL_RCC_ClockConfig+0x24c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d910      	bls.n	8002adc <HAL_RCC_ClockConfig+0xa4>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aba:	4b72      	ldr	r3, [pc, #456]	@ (8002c84 <HAL_RCC_ClockConfig+0x24c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f023 0207 	bic.w	r2, r3, #7
 8002ac2:	4970      	ldr	r1, [pc, #448]	@ (8002c84 <HAL_RCC_ClockConfig+0x24c>)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002aca:	4b6e      	ldr	r3, [pc, #440]	@ (8002c84 <HAL_RCC_ClockConfig+0x24c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_ClockConfig+0xa4>
    {
      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e142      	b.n	8002d62 <HAL_RCC_ClockConfig+0x32a>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d031      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d024      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x102>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	2b80      	cmp	r3, #128	@ 0x80
 8002af6:	d020      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x102>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	2b90      	cmp	r3, #144	@ 0x90
 8002afe:	d01c      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x102>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	2ba0      	cmp	r3, #160	@ 0xa0
 8002b06:	d018      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x102>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	2bb0      	cmp	r3, #176	@ 0xb0
 8002b0e:	d014      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x102>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b16:	d010      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x102>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	2bd0      	cmp	r3, #208	@ 0xd0
 8002b1e:	d00c      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x102>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2be0      	cmp	r3, #224	@ 0xe0
 8002b26:	d008      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x102>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	2bf0      	cmp	r3, #240	@ 0xf0
 8002b2e:	d004      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x102>
 8002b30:	f240 3149 	movw	r1, #841	@ 0x349
 8002b34:	4852      	ldr	r0, [pc, #328]	@ (8002c80 <HAL_RCC_ClockConfig+0x248>)
 8002b36:	f7fd fe34 	bl	80007a2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b3a:	4b53      	ldr	r3, [pc, #332]	@ (8002c88 <HAL_RCC_ClockConfig+0x250>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	4950      	ldr	r1, [pc, #320]	@ (8002c88 <HAL_RCC_ClockConfig+0x250>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d07b      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x218>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00c      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x142>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d008      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x142>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d004      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x142>
 8002b70:	f44f 7154 	mov.w	r1, #848	@ 0x350
 8002b74:	4842      	ldr	r0, [pc, #264]	@ (8002c80 <HAL_RCC_ClockConfig+0x248>)
 8002b76:	f7fd fe14 	bl	80007a2 <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d107      	bne.n	8002b92 <HAL_RCC_ClockConfig+0x15a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b82:	4b41      	ldr	r3, [pc, #260]	@ (8002c88 <HAL_RCC_ClockConfig+0x250>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d115      	bne.n	8002bba <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e0e7      	b.n	8002d62 <HAL_RCC_ClockConfig+0x32a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d107      	bne.n	8002baa <HAL_RCC_ClockConfig+0x172>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b9a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c88 <HAL_RCC_ClockConfig+0x250>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d109      	bne.n	8002bba <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e0db      	b.n	8002d62 <HAL_RCC_ClockConfig+0x32a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002baa:	4b37      	ldr	r3, [pc, #220]	@ (8002c88 <HAL_RCC_ClockConfig+0x250>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e0d3      	b.n	8002d62 <HAL_RCC_ClockConfig+0x32a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bba:	4b33      	ldr	r3, [pc, #204]	@ (8002c88 <HAL_RCC_ClockConfig+0x250>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f023 0203 	bic.w	r2, r3, #3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	4930      	ldr	r1, [pc, #192]	@ (8002c88 <HAL_RCC_ClockConfig+0x250>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bcc:	f7fd ffd4 	bl	8000b78 <HAL_GetTick>
 8002bd0:	60f8      	str	r0, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d112      	bne.n	8002c00 <HAL_RCC_ClockConfig+0x1c8>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bda:	e00a      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ba>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bdc:	f7fd ffcc 	bl	8000b78 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_ClockConfig+0x1ba>
        {
          return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e0b7      	b.n	8002d62 <HAL_RCC_ClockConfig+0x32a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bf2:	4b25      	ldr	r3, [pc, #148]	@ (8002c88 <HAL_RCC_ClockConfig+0x250>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d1ee      	bne.n	8002bdc <HAL_RCC_ClockConfig+0x1a4>
 8002bfe:	e027      	b.n	8002c50 <HAL_RCC_ClockConfig+0x218>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d11d      	bne.n	8002c44 <HAL_RCC_ClockConfig+0x20c>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c08:	e00a      	b.n	8002c20 <HAL_RCC_ClockConfig+0x1e8>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c0a:	f7fd ffb5 	bl	8000b78 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_ClockConfig+0x1e8>
        {
          return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e0a0      	b.n	8002d62 <HAL_RCC_ClockConfig+0x32a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c20:	4b19      	ldr	r3, [pc, #100]	@ (8002c88 <HAL_RCC_ClockConfig+0x250>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f003 030c 	and.w	r3, r3, #12
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d1ee      	bne.n	8002c0a <HAL_RCC_ClockConfig+0x1d2>
 8002c2c:	e010      	b.n	8002c50 <HAL_RCC_ClockConfig+0x218>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c2e:	f7fd ffa3 	bl	8000b78 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_ClockConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e08e      	b.n	8002d62 <HAL_RCC_ClockConfig+0x32a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c44:	4b10      	ldr	r3, [pc, #64]	@ (8002c88 <HAL_RCC_ClockConfig+0x250>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 030c 	and.w	r3, r3, #12
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1ee      	bne.n	8002c2e <HAL_RCC_ClockConfig+0x1f6>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002c50:	4b0c      	ldr	r3, [pc, #48]	@ (8002c84 <HAL_RCC_ClockConfig+0x24c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d216      	bcs.n	8002c8c <HAL_RCC_ClockConfig+0x254>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5e:	4b09      	ldr	r3, [pc, #36]	@ (8002c84 <HAL_RCC_ClockConfig+0x24c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 0207 	bic.w	r2, r3, #7
 8002c66:	4907      	ldr	r1, [pc, #28]	@ (8002c84 <HAL_RCC_ClockConfig+0x24c>)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c6e:	4b05      	ldr	r3, [pc, #20]	@ (8002c84 <HAL_RCC_ClockConfig+0x24c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d007      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e070      	b.n	8002d62 <HAL_RCC_ClockConfig+0x32a>
 8002c80:	0800690c 	.word	0x0800690c
 8002c84:	40022000 	.word	0x40022000
 8002c88:	40021000 	.word	0x40021000
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d025      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d018      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0x29a>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ca8:	d013      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0x29a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002cb2:	d00e      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0x29a>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002cbc:	d009      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0x29a>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002cc6:	d004      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0x29a>
 8002cc8:	f44f 7169 	mov.w	r1, #932	@ 0x3a4
 8002ccc:	4827      	ldr	r0, [pc, #156]	@ (8002d6c <HAL_RCC_ClockConfig+0x334>)
 8002cce:	f7fd fd68 	bl	80007a2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cd2:	4b27      	ldr	r3, [pc, #156]	@ (8002d70 <HAL_RCC_ClockConfig+0x338>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	4924      	ldr	r1, [pc, #144]	@ (8002d70 <HAL_RCC_ClockConfig+0x338>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0308 	and.w	r3, r3, #8
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d026      	beq.n	8002d3e <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d018      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x2f2>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d00:	d013      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x2f2>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002d0a:	d00e      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x2f2>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002d14:	d009      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x2f2>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d1e:	d004      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x2f2>
 8002d20:	f240 31ab 	movw	r1, #939	@ 0x3ab
 8002d24:	4811      	ldr	r0, [pc, #68]	@ (8002d6c <HAL_RCC_ClockConfig+0x334>)
 8002d26:	f7fd fd3c 	bl	80007a2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d2a:	4b11      	ldr	r3, [pc, #68]	@ (8002d70 <HAL_RCC_ClockConfig+0x338>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	490d      	ldr	r1, [pc, #52]	@ (8002d70 <HAL_RCC_ClockConfig+0x338>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d3e:	f000 f81d 	bl	8002d7c <HAL_RCC_GetSysClockFreq>
 8002d42:	4602      	mov	r2, r0
 8002d44:	4b0a      	ldr	r3, [pc, #40]	@ (8002d70 <HAL_RCC_ClockConfig+0x338>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	091b      	lsrs	r3, r3, #4
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	4909      	ldr	r1, [pc, #36]	@ (8002d74 <HAL_RCC_ClockConfig+0x33c>)
 8002d50:	5ccb      	ldrb	r3, [r1, r3]
 8002d52:	fa22 f303 	lsr.w	r3, r2, r3
 8002d56:	4a08      	ldr	r2, [pc, #32]	@ (8002d78 <HAL_RCC_ClockConfig+0x340>)
 8002d58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002d5a:	2000      	movs	r0, #0
 8002d5c:	f7fd feca 	bl	8000af4 <HAL_InitTick>
  
  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	0800690c 	.word	0x0800690c
 8002d70:	40021000 	.word	0x40021000
 8002d74:	08006a48 	.word	0x08006a48
 8002d78:	200008b4 	.word	0x200008b4

08002d7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d7c:	b490      	push	{r4, r7}
 8002d7e:	b08a      	sub	sp, #40	@ 0x28
 8002d80:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d82:	4b29      	ldr	r3, [pc, #164]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0xac>)
 8002d84:	1d3c      	adds	r4, r7, #4
 8002d86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d8c:	f240 2301 	movw	r3, #513	@ 0x201
 8002d90:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
 8002d96:	2300      	movs	r3, #0
 8002d98:	61bb      	str	r3, [r7, #24]
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002da6:	4b21      	ldr	r3, [pc, #132]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	f003 030c 	and.w	r3, r3, #12
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d002      	beq.n	8002dbc <HAL_RCC_GetSysClockFreq+0x40>
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d003      	beq.n	8002dc2 <HAL_RCC_GetSysClockFreq+0x46>
 8002dba:	e02b      	b.n	8002e14 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dbc:	4b1c      	ldr	r3, [pc, #112]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002dbe:	623b      	str	r3, [r7, #32]
      break;
 8002dc0:	e02b      	b.n	8002e1a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	0c9b      	lsrs	r3, r3, #18
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	3328      	adds	r3, #40	@ 0x28
 8002dcc:	443b      	add	r3, r7
 8002dce:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002dd2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d012      	beq.n	8002e04 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002dde:	4b13      	ldr	r3, [pc, #76]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	0c5b      	lsrs	r3, r3, #17
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	3328      	adds	r3, #40	@ 0x28
 8002dea:	443b      	add	r3, r7
 8002dec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002df0:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	4a0e      	ldr	r2, [pc, #56]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002df6:	fb03 f202 	mul.w	r2, r3, r2
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e00:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e02:	e004      	b.n	8002e0e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	4a0b      	ldr	r2, [pc, #44]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e08:	fb02 f303 	mul.w	r3, r2, r3
 8002e0c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e10:	623b      	str	r3, [r7, #32]
      break;
 8002e12:	e002      	b.n	8002e1a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e14:	4b06      	ldr	r3, [pc, #24]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e16:	623b      	str	r3, [r7, #32]
      break;
 8002e18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3728      	adds	r7, #40	@ 0x28
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc90      	pop	{r4, r7}
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	08006944 	.word	0x08006944
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	007a1200 	.word	0x007a1200
 8002e34:	003d0900 	.word	0x003d0900

08002e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e3c:	4b02      	ldr	r3, [pc, #8]	@ (8002e48 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr
 8002e48:	200008b4 	.word	0x200008b4

08002e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e50:	f7ff fff2 	bl	8002e38 <HAL_RCC_GetHCLKFreq>
 8002e54:	4602      	mov	r2, r0
 8002e56:	4b05      	ldr	r3, [pc, #20]	@ (8002e6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	0a1b      	lsrs	r3, r3, #8
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	4903      	ldr	r1, [pc, #12]	@ (8002e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e62:	5ccb      	ldrb	r3, [r1, r3]
 8002e64:	fa22 f303 	lsr.w	r3, r2, r3
}    
 8002e68:	4618      	mov	r0, r3
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	08006a58 	.word	0x08006a58

08002e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e78:	f7ff ffde 	bl	8002e38 <HAL_RCC_GetHCLKFreq>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	4b05      	ldr	r3, [pc, #20]	@ (8002e94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	0adb      	lsrs	r3, r3, #11
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	4903      	ldr	r1, [pc, #12]	@ (8002e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e8a:	5ccb      	ldrb	r3, [r1, r3]
 8002e8c:	fa22 f303 	lsr.w	r3, r2, r3
} 
 8002e90:	4618      	mov	r0, r3
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40021000 	.word	0x40021000
 8002e98:	08006a58 	.word	0x08006a58

08002e9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed0 <RCC_Delay+0x34>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8002ed4 <RCC_Delay+0x38>)
 8002eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002eae:	0a5b      	lsrs	r3, r3, #9
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	fb02 f303 	mul.w	r3, r2, r3
 8002eb6:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002eb8:	bf00      	nop
  } 
  while (Delay --);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	1e5a      	subs	r2, r3, #1
 8002ebe:	60fa      	str	r2, [r7, #12]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1f9      	bne.n	8002eb8 <RCC_Delay+0x1c>
}
 8002ec4:	bf00      	nop
 8002ec6:	bf00      	nop
 8002ec8:	3714      	adds	r7, #20
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr
 8002ed0:	200008b4 	.word	0x200008b4
 8002ed4:	10624dd3 	.word	0x10624dd3

08002ed8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	613b      	str	r3, [r7, #16]
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10f      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d109      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0310 	and.w	r3, r3, #16
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d103      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002f0c:	217c      	movs	r1, #124	@ 0x7c
 8002f0e:	4873      	ldr	r0, [pc, #460]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8002f10:	f7fd fc47 	bl	80007a2 <assert_failed>
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 8095 	beq.w	800304c <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d012      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f32:	d00d      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f3c:	d008      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f46:	d003      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002f48:	2182      	movs	r1, #130	@ 0x82
 8002f4a:	4864      	ldr	r0, [pc, #400]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8002f4c:	f7fd fc29 	bl	80007a2 <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 8002f50:	2300      	movs	r3, #0
 8002f52:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f54:	4b62      	ldr	r3, [pc, #392]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10d      	bne.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f60:	4b5f      	ldr	r3, [pc, #380]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	4a5e      	ldr	r2, [pc, #376]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002f66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f6a:	61d3      	str	r3, [r2, #28]
 8002f6c:	4b5c      	ldr	r3, [pc, #368]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7c:	4b59      	ldr	r3, [pc, #356]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d118      	bne.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f88:	4b56      	ldr	r3, [pc, #344]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a55      	ldr	r2, [pc, #340]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8002f8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f92:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f94:	f7fd fdf0 	bl	8000b78 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9a:	e008      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f9c:	f7fd fdec 	bl	8000b78 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b64      	cmp	r3, #100	@ 0x64
 8002fa8:	d901      	bls.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e092      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fae:	4b4d      	ldr	r3, [pc, #308]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0f0      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fba:	4b49      	ldr	r3, [pc, #292]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fc2:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d02e      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d027      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fd8:	4b41      	ldr	r3, [pc, #260]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fe0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fe2:	4b41      	ldr	r3, [pc, #260]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fe8:	4b3f      	ldr	r3, [pc, #252]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002fee:	4a3c      	ldr	r2, [pc, #240]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d014      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffe:	f7fd fdbb 	bl	8000b78 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003004:	e00a      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003006:	f7fd fdb7 	bl	8000b78 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003014:	4293      	cmp	r3, r2
 8003016:	d901      	bls.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e05b      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800301c:	4b30      	ldr	r3, [pc, #192]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0ee      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003028:	4b2d      	ldr	r3, [pc, #180]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	492a      	ldr	r1, [pc, #168]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003036:	4313      	orrs	r3, r2
 8003038:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800303a:	7dfb      	ldrb	r3, [r7, #23]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d105      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003040:	4b27      	ldr	r3, [pc, #156]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	4a26      	ldr	r2, [pc, #152]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003046:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800304a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d01f      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d012      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003068:	d00d      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003072:	d008      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800307c:	d003      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800307e:	21c9      	movs	r1, #201	@ 0xc9
 8003080:	4816      	ldr	r0, [pc, #88]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003082:	f7fd fb8e 	bl	80007a2 <assert_failed>
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003086:	4b16      	ldr	r3, [pc, #88]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	4913      	ldr	r1, [pc, #76]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003094:	4313      	orrs	r3, r2
 8003096:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0310 	and.w	r3, r3, #16
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d016      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030ac:	d008      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d004      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80030b6:	f240 1125 	movw	r1, #293	@ 0x125
 80030ba:	4808      	ldr	r0, [pc, #32]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80030bc:	f7fd fb71 	bl	80007a2 <assert_failed>
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030c0:	4b07      	ldr	r3, [pc, #28]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	4904      	ldr	r1, [pc, #16]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	08006954 	.word	0x08006954
 80030e0:	40021000 	.word	0x40021000
 80030e4:	40007000 	.word	0x40007000
 80030e8:	42420440 	.word	0x42420440

080030ec <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e092      	b.n	8003224 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d02c      	beq.n	8003160 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a48      	ldr	r2, [pc, #288]	@ (800322c <HAL_UART_Init+0x140>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d00e      	beq.n	800312e <HAL_UART_Init+0x42>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a46      	ldr	r2, [pc, #280]	@ (8003230 <HAL_UART_Init+0x144>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d009      	beq.n	800312e <HAL_UART_Init+0x42>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a45      	ldr	r2, [pc, #276]	@ (8003234 <HAL_UART_Init+0x148>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d004      	beq.n	800312e <HAL_UART_Init+0x42>
 8003124:	f240 110f 	movw	r1, #271	@ 0x10f
 8003128:	4843      	ldr	r0, [pc, #268]	@ (8003238 <HAL_UART_Init+0x14c>)
 800312a:	f7fd fb3a 	bl	80007a2 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d028      	beq.n	8003188 <HAL_UART_Init+0x9c>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800313e:	d023      	beq.n	8003188 <HAL_UART_Init+0x9c>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003148:	d01e      	beq.n	8003188 <HAL_UART_Init+0x9c>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003152:	d019      	beq.n	8003188 <HAL_UART_Init+0x9c>
 8003154:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8003158:	4837      	ldr	r0, [pc, #220]	@ (8003238 <HAL_UART_Init+0x14c>)
 800315a:	f7fd fb22 	bl	80007a2 <assert_failed>
 800315e:	e013      	b.n	8003188 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a31      	ldr	r2, [pc, #196]	@ (800322c <HAL_UART_Init+0x140>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d00e      	beq.n	8003188 <HAL_UART_Init+0x9c>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a30      	ldr	r2, [pc, #192]	@ (8003230 <HAL_UART_Init+0x144>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d009      	beq.n	8003188 <HAL_UART_Init+0x9c>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a2e      	ldr	r2, [pc, #184]	@ (8003234 <HAL_UART_Init+0x148>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d004      	beq.n	8003188 <HAL_UART_Init+0x9c>
 800317e:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8003182:	482d      	ldr	r0, [pc, #180]	@ (8003238 <HAL_UART_Init+0x14c>)
 8003184:	f7fd fb0d 	bl	80007a2 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d009      	beq.n	80031a4 <HAL_UART_Init+0xb8>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003198:	d004      	beq.n	80031a4 <HAL_UART_Init+0xb8>
 800319a:	f44f 718b 	mov.w	r1, #278	@ 0x116
 800319e:	4826      	ldr	r0, [pc, #152]	@ (8003238 <HAL_UART_Init+0x14c>)
 80031a0:	f7fd faff 	bl	80007a2 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d106      	bne.n	80031be <HAL_UART_Init+0xd2>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7fd fc1d 	bl	80009f8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2224      	movs	r2, #36	@ 0x24
 80031c2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68da      	ldr	r2, [r3, #12]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031d4:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 faea 	bl	80037b0 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	691a      	ldr	r2, [r3, #16]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	695a      	ldr	r2, [r3, #20]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031fa:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800320a:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2220      	movs	r2, #32
 8003216:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2220      	movs	r2, #32
 800321e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
  
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40013800 	.word	0x40013800
 8003230:	40004400 	.word	0x40004400
 8003234:	40004800 	.word	0x40004800
 8003238:	080069a0 	.word	0x080069a0

0800323c <HAL_UART_Transmit_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	4613      	mov	r3, r2
 8003248:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b20      	cmp	r3, #32
 8003254:	d130      	bne.n	80032b8 <HAL_UART_Transmit_IT+0x7c>
  {
    if((pData == NULL) || (Size == 0U)) 
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d002      	beq.n	8003262 <HAL_UART_Transmit_IT+0x26>
 800325c:	88fb      	ldrh	r3, [r7, #6]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e029      	b.n	80032ba <HAL_UART_Transmit_IT+0x7e>
    }
    /* Process Locked */
    __HAL_LOCK(huart);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_UART_Transmit_IT+0x38>
 8003270:	2302      	movs	r3, #2
 8003272:	e022      	b.n	80032ba <HAL_UART_Transmit_IT+0x7e>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->pTxBuffPtr = pData;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	88fa      	ldrh	r2, [r7, #6]
 8003286:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	88fa      	ldrh	r2, [r7, #6]
 800328c:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2221      	movs	r2, #33	@ 0x21
 8003298:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80032b2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	e000      	b.n	80032ba <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80032b8:	2302      	movs	r3, #2
  }
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	bc80      	pop	{r7}
 80032c2:	4770      	bx	lr

080032c4 <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	4613      	mov	r3, r2
 80032d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b20      	cmp	r3, #32
 80032dc:	d140      	bne.n	8003360 <HAL_UART_Receive_IT+0x9c>
  {
    if((pData == NULL) || (Size == 0U))
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <HAL_UART_Receive_IT+0x26>
 80032e4:	88fb      	ldrh	r3, [r7, #6]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e039      	b.n	8003362 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <HAL_UART_Receive_IT+0x38>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e032      	b.n	8003362 <HAL_UART_Receive_IT+0x9e>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->pRxBuffPtr = pData;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	629a      	str	r2, [r3, #40]	@ 0x28
    huart->RxXferSize = Size;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	88fa      	ldrh	r2, [r7, #6]
 800330e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	88fa      	ldrh	r2, [r7, #6]
 8003314:	85da      	strh	r2, [r3, #46]	@ 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2222      	movs	r2, #34	@ 0x22
 8003320:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800333a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695a      	ldr	r2, [r3, #20]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0201 	orr.w	r2, r2, #1
 800334a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0220 	orr.w	r2, r2, #32
 800335a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	e000      	b.n	8003362 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003360:	2302      	movs	r3, #2
  }
}
 8003362:	4618      	mov	r0, r3
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr

0800336c <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 800338c:	2300      	movs	r3, #0
 800338e:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8003390:	2300      	movs	r3, #0
 8003392:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10d      	bne.n	80033be <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	f003 0320 	and.w	r3, r3, #32
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d008      	beq.n	80033be <HAL_UART_IRQHandler+0x52>
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	f003 0320 	and.w	r3, r3, #32
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f979 	bl	80036ae <UART_Receive_IT>
      return;
 80033bc:	e0cb      	b.n	8003556 <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 80ab 	beq.w	800351c <HAL_UART_IRQHandler+0x1b0>
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d105      	bne.n	80033dc <HAL_UART_IRQHandler+0x70>
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 80a0 	beq.w	800351c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <HAL_UART_IRQHandler+0x90>
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f4:	f043 0201 	orr.w	r2, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	f003 0304 	and.w	r3, r3, #4
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00a      	beq.n	800341c <HAL_UART_IRQHandler+0xb0>
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003414:	f043 0202 	orr.w	r2, r3, #2
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00a      	beq.n	800343c <HAL_UART_IRQHandler+0xd0>
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	d005      	beq.n	800343c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003434:	f043 0204 	orr.w	r2, r3, #4
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00a      	beq.n	800345c <HAL_UART_IRQHandler+0xf0>
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b00      	cmp	r3, #0
 800344e:	d005      	beq.n	800345c <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003454:	f043 0208 	orr.w	r2, r3, #8
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003460:	2b00      	cmp	r3, #0
 8003462:	d077      	beq.n	8003554 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f003 0320 	and.w	r3, r3, #32
 800346a:	2b00      	cmp	r3, #0
 800346c:	d007      	beq.n	800347e <HAL_UART_IRQHandler+0x112>
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 f918 	bl	80036ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003488:	2b00      	cmp	r3, #0
 800348a:	bf14      	ite	ne
 800348c:	2301      	movne	r3, #1
 800348e:	2300      	moveq	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003498:	f003 0308 	and.w	r3, r3, #8
 800349c:	2b00      	cmp	r3, #0
 800349e:	d102      	bne.n	80034a6 <HAL_UART_IRQHandler+0x13a>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d031      	beq.n	800350a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f863 	bl	8003572 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d023      	beq.n	8003502 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695a      	ldr	r2, [r3, #20]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034c8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d013      	beq.n	80034fa <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034d6:	4a21      	ldr	r2, [pc, #132]	@ (800355c <HAL_UART_IRQHandler+0x1f0>)
 80034d8:	635a      	str	r2, [r3, #52]	@ 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fd fcc4 	bl	8000e6c <HAL_DMA_Abort_IT>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d016      	beq.n	8003518 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80034f4:	4610      	mov	r0, r2
 80034f6:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034f8:	e00e      	b.n	8003518 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7fc ff54 	bl	80003a8 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003500:	e00a      	b.n	8003518 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7fc ff50 	bl	80003a8 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003508:	e006      	b.n	8003518 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7fc ff4c 	bl	80003a8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
    return;
 8003516:	e01d      	b.n	8003554 <HAL_UART_IRQHandler+0x1e8>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003518:	bf00      	nop
    return;
 800351a:	e01b      	b.n	8003554 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003522:	2b00      	cmp	r3, #0
 8003524:	d008      	beq.n	8003538 <HAL_UART_IRQHandler+0x1cc>
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f84f 	bl	80035d4 <UART_Transmit_IT>
    return;
 8003536:	e00e      	b.n	8003556 <HAL_UART_IRQHandler+0x1ea>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800353e:	2b00      	cmp	r3, #0
 8003540:	d009      	beq.n	8003556 <HAL_UART_IRQHandler+0x1ea>
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003548:	2b00      	cmp	r3, #0
 800354a:	d004      	beq.n	8003556 <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f896 	bl	800367e <UART_EndTransmit_IT>
    return;
 8003552:	e000      	b.n	8003556 <HAL_UART_IRQHandler+0x1ea>
    return;
 8003554:	bf00      	nop
  }
}
 8003556:	3720      	adds	r7, #32
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	080035ad 	.word	0x080035ad

08003560 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	bc80      	pop	{r7}
 8003570:	4770      	bx	lr

08003572 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8003588:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695a      	ldr	r2, [r3, #20]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0201 	bic.w	r2, r2, #1
 8003598:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2220      	movs	r2, #32
 800359e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bc80      	pop	{r7}
 80035aa:	4770      	bx	lr

080035ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	84da      	strh	r2, [r3, #38]	@ 0x26

  HAL_UART_ErrorCallback(huart);
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f7fc feee 	bl	80003a8 <HAL_UART_ErrorCallback>
}
 80035cc:	bf00      	nop
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b21      	cmp	r3, #33	@ 0x21
 80035e6:	d144      	bne.n	8003672 <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035f0:	d11a      	bne.n	8003628 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	881b      	ldrh	r3, [r3, #0]
 80035fc:	461a      	mov	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003606:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d105      	bne.n	800361c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	1c9a      	adds	r2, r3, #2
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	621a      	str	r2, [r3, #32]
 800361a:	e00e      	b.n	800363a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	621a      	str	r2, [r3, #32]
 8003626:	e008      	b.n	800363a <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	1c59      	adds	r1, r3, #1
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6211      	str	r1, [r2, #32]
 8003632:	781a      	ldrb	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800363e:	b29b      	uxth	r3, r3
 8003640:	3b01      	subs	r3, #1
 8003642:	b29b      	uxth	r3, r3
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	4619      	mov	r1, r3
 8003648:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10f      	bne.n	800366e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68da      	ldr	r2, [r3, #12]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800365c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68da      	ldr	r2, [r3, #12]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800366c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	e000      	b.n	8003674 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003672:	2302      	movs	r3, #2
  }
}
 8003674:	4618      	mov	r0, r3
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	bc80      	pop	{r7}
 800367c:	4770      	bx	lr

0800367e <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b082      	sub	sp, #8
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68da      	ldr	r2, [r3, #12]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003694:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2220      	movs	r2, #32
 800369a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  HAL_UART_TxCpltCallback(huart);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f7ff ff5e 	bl	8003560 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b084      	sub	sp, #16
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b22      	cmp	r3, #34	@ 0x22
 80036c0:	d171      	bne.n	80037a6 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036ca:	d123      	bne.n	8003714 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d0:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10e      	bne.n	80036f8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f0:	1c9a      	adds	r2, r3, #2
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80036f6:	e029      	b.n	800374c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	b29b      	uxth	r3, r3
 8003700:	b2db      	uxtb	r3, r3
 8003702:	b29a      	uxth	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800370c:	1c5a      	adds	r2, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	629a      	str	r2, [r3, #40]	@ 0x28
 8003712:	e01b      	b.n	800374c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10a      	bne.n	8003732 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6858      	ldr	r0, [r3, #4]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003726:	1c59      	adds	r1, r3, #1
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6291      	str	r1, [r2, #40]	@ 0x28
 800372c:	b2c2      	uxtb	r2, r0
 800372e:	701a      	strb	r2, [r3, #0]
 8003730:	e00c      	b.n	800374c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	b2da      	uxtb	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800373e:	1c58      	adds	r0, r3, #1
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	6288      	str	r0, [r1, #40]	@ 0x28
 8003744:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003750:	b29b      	uxth	r3, r3
 8003752:	3b01      	subs	r3, #1
 8003754:	b29b      	uxth	r3, r3
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	4619      	mov	r1, r3
 800375a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800375c:	2b00      	cmp	r3, #0
 800375e:	d120      	bne.n	80037a2 <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0220 	bic.w	r2, r2, #32
 800376e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68da      	ldr	r2, [r3, #12]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800377e:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695a      	ldr	r2, [r3, #20]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0201 	bic.w	r2, r2, #1
 800378e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2220      	movs	r2, #32
 8003794:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

      HAL_UART_RxCpltCallback(huart);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f7fc fd87 	bl	80002ac <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	e002      	b.n	80037a8 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	e000      	b.n	80037a8 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80037a6:	2302      	movs	r3, #2
  }
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037b0:	b5b0      	push	{r4, r5, r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80037b8:	2300      	movs	r3, #0
 80037ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	4aa2      	ldr	r2, [pc, #648]	@ (8003a4c <UART_SetConfig+0x29c>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d904      	bls.n	80037d0 <UART_SetConfig+0x20>
 80037c6:	f640 11a7 	movw	r1, #2471	@ 0x9a7
 80037ca:	48a1      	ldr	r0, [pc, #644]	@ (8003a50 <UART_SetConfig+0x2a0>)
 80037cc:	f7fc ffe9 	bl	80007a2 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d009      	beq.n	80037ec <UART_SetConfig+0x3c>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037e0:	d004      	beq.n	80037ec <UART_SetConfig+0x3c>
 80037e2:	f640 11a8 	movw	r1, #2472	@ 0x9a8
 80037e6:	489a      	ldr	r0, [pc, #616]	@ (8003a50 <UART_SetConfig+0x2a0>)
 80037e8:	f7fc ffdb 	bl	80007a2 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00e      	beq.n	8003812 <UART_SetConfig+0x62>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037fc:	d009      	beq.n	8003812 <UART_SetConfig+0x62>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003806:	d004      	beq.n	8003812 <UART_SetConfig+0x62>
 8003808:	f640 11a9 	movw	r1, #2473	@ 0x9a9
 800380c:	4890      	ldr	r0, [pc, #576]	@ (8003a50 <UART_SetConfig+0x2a0>)
 800380e:	f7fc ffc8 	bl	80007a2 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695a      	ldr	r2, [r3, #20]
 8003816:	f64f 73f3 	movw	r3, #65523	@ 0xfff3
 800381a:	4013      	ands	r3, r2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d103      	bne.n	8003828 <UART_SetConfig+0x78>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d104      	bne.n	8003832 <UART_SetConfig+0x82>
 8003828:	f640 11aa 	movw	r1, #2474	@ 0x9aa
 800382c:	4888      	ldr	r0, [pc, #544]	@ (8003a50 <UART_SetConfig+0x2a0>)
 800382e:	f7fc ffb8 	bl	80007a2 <assert_failed>

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	431a      	orrs	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	4313      	orrs	r3, r2
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	4313      	orrs	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003868:	f023 030c 	bic.w	r3, r3, #12
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6812      	ldr	r2, [r2, #0]
 8003870:	68f9      	ldr	r1, [r7, #12]
 8003872:	430b      	orrs	r3, r1
 8003874:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	699a      	ldr	r2, [r3, #24]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a70      	ldr	r2, [pc, #448]	@ (8003a54 <UART_SetConfig+0x2a4>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d16b      	bne.n	800396e <UART_SetConfig+0x1be>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003896:	f7ff faed 	bl	8002e74 <HAL_RCC_GetPCLK2Freq>
 800389a:	4602      	mov	r2, r0
 800389c:	4613      	mov	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	009a      	lsls	r2, r3, #2
 80038a4:	441a      	add	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b0:	4a69      	ldr	r2, [pc, #420]	@ (8003a58 <UART_SetConfig+0x2a8>)
 80038b2:	fba2 2303 	umull	r2, r3, r2, r3
 80038b6:	095b      	lsrs	r3, r3, #5
 80038b8:	011c      	lsls	r4, r3, #4
 80038ba:	f7ff fadb 	bl	8002e74 <HAL_RCC_GetPCLK2Freq>
 80038be:	4602      	mov	r2, r0
 80038c0:	4613      	mov	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	009a      	lsls	r2, r3, #2
 80038c8:	441a      	add	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	fbb2 f5f3 	udiv	r5, r2, r3
 80038d4:	f7ff face 	bl	8002e74 <HAL_RCC_GetPCLK2Freq>
 80038d8:	4602      	mov	r2, r0
 80038da:	4613      	mov	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4413      	add	r3, r2
 80038e0:	009a      	lsls	r2, r3, #2
 80038e2:	441a      	add	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ee:	4a5a      	ldr	r2, [pc, #360]	@ (8003a58 <UART_SetConfig+0x2a8>)
 80038f0:	fba2 2303 	umull	r2, r3, r2, r3
 80038f4:	095b      	lsrs	r3, r3, #5
 80038f6:	2264      	movs	r2, #100	@ 0x64
 80038f8:	fb02 f303 	mul.w	r3, r2, r3
 80038fc:	1aeb      	subs	r3, r5, r3
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	3332      	adds	r3, #50	@ 0x32
 8003902:	4a55      	ldr	r2, [pc, #340]	@ (8003a58 <UART_SetConfig+0x2a8>)
 8003904:	fba2 2303 	umull	r2, r3, r2, r3
 8003908:	095b      	lsrs	r3, r3, #5
 800390a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800390e:	441c      	add	r4, r3
 8003910:	f7ff fab0 	bl	8002e74 <HAL_RCC_GetPCLK2Freq>
 8003914:	4602      	mov	r2, r0
 8003916:	4613      	mov	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	009a      	lsls	r2, r3, #2
 800391e:	441a      	add	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	fbb2 f5f3 	udiv	r5, r2, r3
 800392a:	f7ff faa3 	bl	8002e74 <HAL_RCC_GetPCLK2Freq>
 800392e:	4602      	mov	r2, r0
 8003930:	4613      	mov	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	009a      	lsls	r2, r3, #2
 8003938:	441a      	add	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	fbb2 f3f3 	udiv	r3, r2, r3
 8003944:	4a44      	ldr	r2, [pc, #272]	@ (8003a58 <UART_SetConfig+0x2a8>)
 8003946:	fba2 2303 	umull	r2, r3, r2, r3
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	2264      	movs	r2, #100	@ 0x64
 800394e:	fb02 f303 	mul.w	r3, r2, r3
 8003952:	1aeb      	subs	r3, r5, r3
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	3332      	adds	r3, #50	@ 0x32
 8003958:	4a3f      	ldr	r2, [pc, #252]	@ (8003a58 <UART_SetConfig+0x2a8>)
 800395a:	fba2 2303 	umull	r2, r3, r2, r3
 800395e:	095b      	lsrs	r3, r3, #5
 8003960:	f003 020f 	and.w	r2, r3, #15
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4422      	add	r2, r4
 800396a:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800396c:	e06a      	b.n	8003a44 <UART_SetConfig+0x294>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800396e:	f7ff fa6d 	bl	8002e4c <HAL_RCC_GetPCLK1Freq>
 8003972:	4602      	mov	r2, r0
 8003974:	4613      	mov	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	009a      	lsls	r2, r3, #2
 800397c:	441a      	add	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	fbb2 f3f3 	udiv	r3, r2, r3
 8003988:	4a33      	ldr	r2, [pc, #204]	@ (8003a58 <UART_SetConfig+0x2a8>)
 800398a:	fba2 2303 	umull	r2, r3, r2, r3
 800398e:	095b      	lsrs	r3, r3, #5
 8003990:	011c      	lsls	r4, r3, #4
 8003992:	f7ff fa5b 	bl	8002e4c <HAL_RCC_GetPCLK1Freq>
 8003996:	4602      	mov	r2, r0
 8003998:	4613      	mov	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4413      	add	r3, r2
 800399e:	009a      	lsls	r2, r3, #2
 80039a0:	441a      	add	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	fbb2 f5f3 	udiv	r5, r2, r3
 80039ac:	f7ff fa4e 	bl	8002e4c <HAL_RCC_GetPCLK1Freq>
 80039b0:	4602      	mov	r2, r0
 80039b2:	4613      	mov	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	009a      	lsls	r2, r3, #2
 80039ba:	441a      	add	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c6:	4a24      	ldr	r2, [pc, #144]	@ (8003a58 <UART_SetConfig+0x2a8>)
 80039c8:	fba2 2303 	umull	r2, r3, r2, r3
 80039cc:	095b      	lsrs	r3, r3, #5
 80039ce:	2264      	movs	r2, #100	@ 0x64
 80039d0:	fb02 f303 	mul.w	r3, r2, r3
 80039d4:	1aeb      	subs	r3, r5, r3
 80039d6:	011b      	lsls	r3, r3, #4
 80039d8:	3332      	adds	r3, #50	@ 0x32
 80039da:	4a1f      	ldr	r2, [pc, #124]	@ (8003a58 <UART_SetConfig+0x2a8>)
 80039dc:	fba2 2303 	umull	r2, r3, r2, r3
 80039e0:	095b      	lsrs	r3, r3, #5
 80039e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039e6:	441c      	add	r4, r3
 80039e8:	f7ff fa30 	bl	8002e4c <HAL_RCC_GetPCLK1Freq>
 80039ec:	4602      	mov	r2, r0
 80039ee:	4613      	mov	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	009a      	lsls	r2, r3, #2
 80039f6:	441a      	add	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	fbb2 f5f3 	udiv	r5, r2, r3
 8003a02:	f7ff fa23 	bl	8002e4c <HAL_RCC_GetPCLK1Freq>
 8003a06:	4602      	mov	r2, r0
 8003a08:	4613      	mov	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4413      	add	r3, r2
 8003a0e:	009a      	lsls	r2, r3, #2
 8003a10:	441a      	add	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1c:	4a0e      	ldr	r2, [pc, #56]	@ (8003a58 <UART_SetConfig+0x2a8>)
 8003a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a22:	095b      	lsrs	r3, r3, #5
 8003a24:	2264      	movs	r2, #100	@ 0x64
 8003a26:	fb02 f303 	mul.w	r3, r2, r3
 8003a2a:	1aeb      	subs	r3, r5, r3
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	3332      	adds	r3, #50	@ 0x32
 8003a30:	4a09      	ldr	r2, [pc, #36]	@ (8003a58 <UART_SetConfig+0x2a8>)
 8003a32:	fba2 2303 	umull	r2, r3, r2, r3
 8003a36:	095b      	lsrs	r3, r3, #5
 8003a38:	f003 020f 	and.w	r2, r3, #15
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4422      	add	r2, r4
 8003a42:	609a      	str	r2, [r3, #8]
}
 8003a44:	bf00      	nop
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a4c:	0044aa20 	.word	0x0044aa20
 8003a50:	080069a0 	.word	0x080069a0
 8003a54:	40013800 	.word	0x40013800
 8003a58:	51eb851f 	.word	0x51eb851f

08003a5c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003a5c:	b084      	sub	sp, #16
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
 8003a66:	f107 0014 	add.w	r0, r7, #20
 8003a6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  UNUSED(cfg);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bc80      	pop	{r7}
 8003a78:	b004      	add	sp, #16
 8003a7a:	4770      	bx	lr

08003a7c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 8003a84:	2300      	movs	r3, #0
 8003a86:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8003a88:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003a8c:	60fb      	str	r3, [r7, #12]
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bc80      	pop	{r7}
 8003aae:	4770      	bx	lr

08003ab0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8003abc:	f44f 433d 	mov.w	r3, #48384	@ 0xbd00
 8003ac0:	60fb      	str	r3, [r7, #12]
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  
  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr

08003ae8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx , USB_ModeTypeDef mode)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	460b      	mov	r3, r1
 8003af2:	70fb      	strb	r3, [r7, #3]
  UNUSED(mode);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bc80      	pop	{r7}
 8003afe:	4770      	bx	lr

08003b00 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003b00:	b084      	sub	sp, #16
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b082      	sub	sp, #8
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
 8003b0a:	f107 0014 	add.w	r0, r7, #20
 8003b0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7ff ffa2 	bl	8003a7c <USB_EnableGlobalInt>
    
  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b44:	b004      	add	sp, #16
 8003b46:	4770      	bx	lr

08003b48 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003b48:	b490      	push	{r4, r7}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  /* initialize Endpoint */
  switch (ep->type)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	78db      	ldrb	r3, [r3, #3]
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	d85f      	bhi.n	8003c1a <USB_ActivateEndpoint+0xd2>
 8003b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b60 <USB_ActivateEndpoint+0x18>)
 8003b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b60:	08003b71 	.word	0x08003b71
 8003b64:	08003bef 	.word	0x08003bef
 8003b68:	08003b9d 	.word	0x08003b9d
 8003b6c:	08003bc3 	.word	0x08003bc3
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	881b      	ldrh	r3, [r3, #0]
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8003b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	6879      	ldr	r1, [r7, #4]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	440b      	add	r3, r1
 8003b92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b96:	b292      	uxth	r2, r2
 8003b98:	801a      	strh	r2, [r3, #0]
    break;
 8003b9a:	e03f      	b.n	8003c1c <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_BULK:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	881b      	ldrh	r3, [r3, #0]
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	7812      	ldrb	r2, [r2, #0]
 8003bb0:	0092      	lsls	r2, r2, #2
 8003bb2:	440a      	add	r2, r1
 8003bb4:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8003bb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	8013      	strh	r3, [r2, #0]
    break;
 8003bc0:	e02c      	b.n	8003c1c <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4413      	add	r3, r2
 8003bcc:	881b      	ldrh	r3, [r3, #0]
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8003bd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	440b      	add	r3, r1
 8003be4:	f442 62c0 	orr.w	r2, r2, #1536	@ 0x600
 8003be8:	b292      	uxth	r2, r2
 8003bea:	801a      	strh	r2, [r3, #0]
    break;
 8003bec:	e016      	b.n	8003c1c <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8003c00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	6879      	ldr	r1, [r7, #4]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	440b      	add	r3, r1
 8003c10:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c14:	b292      	uxth	r2, r2
 8003c16:	801a      	strh	r2, [r3, #0]
    break;
 8003c18:	e000      	b.n	8003c1c <USB_ActivateEndpoint+0xd4>
  default:
      break;
 8003c1a:	bf00      	nop
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8003c2e:	4013      	ands	r3, r2
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	7812      	ldrb	r2, [r2, #0]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	b299      	uxth	r1, r3
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	441a      	add	r2, r3
 8003c44:	4b76      	ldr	r3, [pc, #472]	@ (8003e20 <USB_ActivateEndpoint+0x2d8>)
 8003c46:	430b      	orrs	r3, r1
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	8013      	strh	r3, [r2, #0]
  
  if (ep->doublebuffer == 0) 
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	7a9b      	ldrb	r3, [r3, #10]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f040 80eb 	bne.w	8003e2c <USB_ActivateEndpoint+0x2e4>
  {
    if (ep->is_in)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	785b      	ldrb	r3, [r3, #1]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d04d      	beq.n	8003cfa <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	889b      	ldrh	r3, [r3, #4]
 8003c62:	085b      	lsrs	r3, r3, #1
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	4619      	mov	r1, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	461a      	mov	r2, r3
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	4413      	add	r3, r2
 8003c7a:	005a      	lsls	r2, r3, #1
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c84:	461a      	mov	r2, r3
 8003c86:	004b      	lsls	r3, r1, #1
 8003c88:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d013      	beq.n	8003cc8 <USB_ActivateEndpoint+0x180>
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	b299      	uxth	r1, r3
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	441a      	add	r2, r3
 8003cc0:	4b58      	ldr	r3, [pc, #352]	@ (8003e24 <USB_ActivateEndpoint+0x2dc>)
 8003cc2:	430b      	orrs	r3, r1
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	8013      	strh	r3, [r2, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cde:	b29c      	uxth	r4, r3
 8003ce0:	f084 0320 	eor.w	r3, r4, #32
 8003ce4:	b29c      	uxth	r4, r3
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	441a      	add	r2, r3
 8003cf0:	4b4b      	ldr	r3, [pc, #300]	@ (8003e20 <USB_ActivateEndpoint+0x2d8>)
 8003cf2:	4323      	orrs	r3, r4
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	8013      	strh	r3, [r2, #0]
 8003cf8:	e1dd      	b.n	80040b6 <USB_ActivateEndpoint+0x56e>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	889b      	ldrh	r3, [r3, #4]
 8003cfe:	085b      	lsrs	r3, r3, #1
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	4619      	mov	r1, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	4413      	add	r3, r2
 8003d16:	3304      	adds	r3, #4
 8003d18:	005a      	lsls	r2, r3, #1
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d22:	461a      	mov	r2, r3
 8003d24:	004b      	lsls	r3, r1, #1
 8003d26:	6013      	str	r3, [r2, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	461a      	mov	r2, r3
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	4413      	add	r3, r2
 8003d3a:	3306      	adds	r3, #6
 8003d3c:	005a      	lsls	r2, r3, #1
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d46:	60bb      	str	r3, [r7, #8]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	2b3e      	cmp	r3, #62	@ 0x3e
 8003d4e:	d918      	bls.n	8003d82 <USB_ActivateEndpoint+0x23a>
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	095b      	lsrs	r3, r3, #5
 8003d56:	81fb      	strh	r3, [r7, #14]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	f003 031f 	and.w	r3, r3, #31
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d102      	bne.n	8003d6a <USB_ActivateEndpoint+0x222>
 8003d64:	89fb      	ldrh	r3, [r7, #14]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	81fb      	strh	r3, [r7, #14]
 8003d6a:	89fb      	ldrh	r3, [r7, #14]
 8003d6c:	029b      	lsls	r3, r3, #10
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	e012      	b.n	8003da8 <USB_ActivateEndpoint+0x260>
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	085b      	lsrs	r3, r3, #1
 8003d88:	81fb      	strh	r3, [r7, #14]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <USB_ActivateEndpoint+0x254>
 8003d96:	89fb      	ldrh	r3, [r7, #14]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	81fb      	strh	r3, [r7, #14]
 8003d9c:	89fb      	ldrh	r3, [r7, #14]
 8003d9e:	029b      	lsls	r3, r3, #10
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	461a      	mov	r2, r3
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d013      	beq.n	8003de6 <USB_ActivateEndpoint+0x29e>
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	881b      	ldrh	r3, [r3, #0]
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	b299      	uxth	r1, r3
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	441a      	add	r2, r3
 8003dde:	4b12      	ldr	r3, [pc, #72]	@ (8003e28 <USB_ActivateEndpoint+0x2e0>)
 8003de0:	430b      	orrs	r3, r1
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	4413      	add	r3, r2
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003df8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dfc:	b29c      	uxth	r4, r3
 8003dfe:	f484 5380 	eor.w	r3, r4, #4096	@ 0x1000
 8003e02:	b29c      	uxth	r4, r3
 8003e04:	f484 5300 	eor.w	r3, r4, #8192	@ 0x2000
 8003e08:	b29c      	uxth	r4, r3
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	441a      	add	r2, r3
 8003e14:	4b02      	ldr	r3, [pc, #8]	@ (8003e20 <USB_ActivateEndpoint+0x2d8>)
 8003e16:	4323      	orrs	r3, r4
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	8013      	strh	r3, [r2, #0]
 8003e1c:	e14b      	b.n	80040b6 <USB_ActivateEndpoint+0x56e>
 8003e1e:	bf00      	nop
 8003e20:	ffff8080 	.word	0xffff8080
 8003e24:	ffff80c0 	.word	0xffff80c0
 8003e28:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4413      	add	r3, r2
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	f640 630f 	movw	r3, #3599	@ 0xe0f
 8003e3e:	4013      	ands	r3, r2
 8003e40:	b299      	uxth	r1, r3
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	441a      	add	r2, r3
 8003e4c:	4b9d      	ldr	r3, [pc, #628]	@ (80040c4 <USB_ActivateEndpoint+0x57c>)
 8003e4e:	430b      	orrs	r3, r1
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	8013      	strh	r3, [r2, #0]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	88db      	ldrh	r3, [r3, #6]
 8003e58:	085b      	lsrs	r3, r3, #1
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	461a      	mov	r2, r3
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	4413      	add	r3, r2
 8003e70:	005a      	lsls	r2, r3, #1
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4413      	add	r3, r2
 8003e76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	004b      	lsls	r3, r1, #1
 8003e7e:	6013      	str	r3, [r2, #0]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	891b      	ldrh	r3, [r3, #8]
 8003e84:	085b      	lsrs	r3, r3, #1
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	4619      	mov	r1, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	461a      	mov	r2, r3
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	4413      	add	r3, r2
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	005a      	lsls	r2, r3, #1
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	004b      	lsls	r3, r1, #1
 8003eac:	6013      	str	r3, [r2, #0]
    
    if (ep->is_in==0)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	785b      	ldrb	r3, [r3, #1]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f040 8083 	bne.w	8003fbe <USB_ActivateEndpoint+0x476>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	881b      	ldrh	r3, [r3, #0]
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d013      	beq.n	8003ef6 <USB_ActivateEndpoint+0x3ae>
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	881b      	ldrh	r3, [r3, #0]
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	b299      	uxth	r1, r3
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	441a      	add	r2, r3
 8003eee:	4b76      	ldr	r3, [pc, #472]	@ (80040c8 <USB_ActivateEndpoint+0x580>)
 8003ef0:	430b      	orrs	r3, r1
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d013      	beq.n	8003f34 <USB_ActivateEndpoint+0x3ec>
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4413      	add	r3, r2
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8003f1e:	4013      	ands	r3, r2
 8003f20:	b299      	uxth	r1, r3
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	441a      	add	r2, r3
 8003f2c:	4b67      	ldr	r3, [pc, #412]	@ (80040cc <USB_ActivateEndpoint+0x584>)
 8003f2e:	430b      	orrs	r3, r1
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8003f46:	4013      	ands	r3, r2
 8003f48:	b299      	uxth	r1, r3
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	441a      	add	r2, r3
 8003f54:	4b5d      	ldr	r3, [pc, #372]	@ (80040cc <USB_ActivateEndpoint+0x584>)
 8003f56:	430b      	orrs	r3, r1
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f72:	b29c      	uxth	r4, r3
 8003f74:	f484 5380 	eor.w	r3, r4, #4096	@ 0x1000
 8003f78:	b29c      	uxth	r4, r3
 8003f7a:	f484 5300 	eor.w	r3, r4, #8192	@ 0x2000
 8003f7e:	b29c      	uxth	r4, r3
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	441a      	add	r2, r3
 8003f8a:	4b51      	ldr	r3, [pc, #324]	@ (80040d0 <USB_ActivateEndpoint+0x588>)
 8003f8c:	4323      	orrs	r3, r4
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	4413      	add	r3, r2
 8003f9c:	881b      	ldrh	r3, [r3, #0]
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fa4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fa8:	b29c      	uxth	r4, r3
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	441a      	add	r2, r3
 8003fb4:	4b46      	ldr	r3, [pc, #280]	@ (80040d0 <USB_ActivateEndpoint+0x588>)
 8003fb6:	4323      	orrs	r3, r4
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	8013      	strh	r3, [r2, #0]
 8003fbc:	e07b      	b.n	80040b6 <USB_ActivateEndpoint+0x56e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d013      	beq.n	8003ffc <USB_ActivateEndpoint+0x4b4>
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	881b      	ldrh	r3, [r3, #0]
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	b299      	uxth	r1, r3
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	441a      	add	r2, r3
 8003ff4:	4b34      	ldr	r3, [pc, #208]	@ (80040c8 <USB_ActivateEndpoint+0x580>)
 8003ff6:	430b      	orrs	r3, r1
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	b29b      	uxth	r3, r3
 800400a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800400e:	2b00      	cmp	r3, #0
 8004010:	d013      	beq.n	800403a <USB_ActivateEndpoint+0x4f2>
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4413      	add	r3, r2
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	b29a      	uxth	r2, r3
 8004020:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8004024:	4013      	ands	r3, r2
 8004026:	b299      	uxth	r1, r3
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	441a      	add	r2, r3
 8004032:	4b26      	ldr	r3, [pc, #152]	@ (80040cc <USB_ActivateEndpoint+0x584>)
 8004034:	430b      	orrs	r3, r1
 8004036:	b29b      	uxth	r3, r3
 8004038:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	b29a      	uxth	r2, r3
 8004048:	f640 730f 	movw	r3, #3855	@ 0xf0f
 800404c:	4013      	ands	r3, r2
 800404e:	b299      	uxth	r1, r3
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	441a      	add	r2, r3
 800405a:	4b1b      	ldr	r3, [pc, #108]	@ (80040c8 <USB_ActivateEndpoint+0x580>)
 800405c:	430b      	orrs	r3, r1
 800405e:	b29b      	uxth	r3, r3
 8004060:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	b29b      	uxth	r3, r3
 8004070:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004074:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004078:	b29c      	uxth	r4, r3
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	441a      	add	r2, r3
 8004084:	4b12      	ldr	r3, [pc, #72]	@ (80040d0 <USB_ActivateEndpoint+0x588>)
 8004086:	4323      	orrs	r3, r4
 8004088:	b29b      	uxth	r3, r3
 800408a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	b29b      	uxth	r3, r3
 800409a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800409e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040a2:	b29c      	uxth	r4, r3
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	441a      	add	r2, r3
 80040ae:	4b08      	ldr	r3, [pc, #32]	@ (80040d0 <USB_ActivateEndpoint+0x588>)
 80040b0:	4323      	orrs	r3, r4
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bc90      	pop	{r4, r7}
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	ffff8180 	.word	0xffff8180
 80040c8:	ffffc080 	.word	0xffffc080
 80040cc:	ffff80c0 	.word	0xffff80c0
 80040d0:	ffff8080 	.word	0xffff8080

080040d4 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80040d4:	b490      	push	{r4, r7}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0) 
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	7a9b      	ldrb	r3, [r3, #10]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d16d      	bne.n	80041c2 <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	785b      	ldrb	r3, [r3, #1]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d034      	beq.n	8004158 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004100:	2b00      	cmp	r3, #0
 8004102:	d013      	beq.n	800412c <USB_DeactivateEndpoint+0x58>
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	b29a      	uxth	r2, r3
 8004112:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8004116:	4013      	ands	r3, r2
 8004118:	b299      	uxth	r1, r3
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	441a      	add	r2, r3
 8004124:	4b68      	ldr	r3, [pc, #416]	@ (80042c8 <USB_DeactivateEndpoint+0x1f4>)
 8004126:	430b      	orrs	r3, r1
 8004128:	b29b      	uxth	r3, r3
 800412a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	b29b      	uxth	r3, r3
 800413a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800413e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004142:	b29c      	uxth	r4, r3
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	441a      	add	r2, r3
 800414e:	4b5f      	ldr	r3, [pc, #380]	@ (80042cc <USB_DeactivateEndpoint+0x1f8>)
 8004150:	4323      	orrs	r3, r4
 8004152:	b29b      	uxth	r3, r3
 8004154:	8013      	strh	r3, [r2, #0]
 8004156:	e139      	b.n	80043cc <USB_DeactivateEndpoint+0x2f8>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	b29b      	uxth	r3, r3
 8004166:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d013      	beq.n	8004196 <USB_DeactivateEndpoint+0xc2>
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	b29a      	uxth	r2, r3
 800417c:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8004180:	4013      	ands	r3, r2
 8004182:	b299      	uxth	r1, r3
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	441a      	add	r2, r3
 800418e:	4b50      	ldr	r3, [pc, #320]	@ (80042d0 <USB_DeactivateEndpoint+0x1fc>)
 8004190:	430b      	orrs	r3, r1
 8004192:	b29b      	uxth	r3, r3
 8004194:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4413      	add	r3, r2
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80041a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ac:	b29c      	uxth	r4, r3
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	441a      	add	r2, r3
 80041b8:	4b44      	ldr	r3, [pc, #272]	@ (80042cc <USB_DeactivateEndpoint+0x1f8>)
 80041ba:	4323      	orrs	r3, r4
 80041bc:	b29b      	uxth	r3, r3
 80041be:	8013      	strh	r3, [r2, #0]
 80041c0:	e104      	b.n	80043cc <USB_DeactivateEndpoint+0x2f8>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	785b      	ldrb	r3, [r3, #1]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f040 8084 	bne.w	80042d4 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4413      	add	r3, r2
 80041d6:	881b      	ldrh	r3, [r3, #0]
 80041d8:	b29b      	uxth	r3, r3
 80041da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d013      	beq.n	800420a <USB_DeactivateEndpoint+0x136>
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	f640 730f 	movw	r3, #3855	@ 0xf0f
 80041f4:	4013      	ands	r3, r2
 80041f6:	b299      	uxth	r1, r3
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	441a      	add	r2, r3
 8004202:	4b33      	ldr	r3, [pc, #204]	@ (80042d0 <USB_DeactivateEndpoint+0x1fc>)
 8004204:	430b      	orrs	r3, r1
 8004206:	b29b      	uxth	r3, r3
 8004208:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	881b      	ldrh	r3, [r3, #0]
 8004216:	b29b      	uxth	r3, r3
 8004218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800421c:	2b00      	cmp	r3, #0
 800421e:	d013      	beq.n	8004248 <USB_DeactivateEndpoint+0x174>
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	b29a      	uxth	r2, r3
 800422e:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8004232:	4013      	ands	r3, r2
 8004234:	b299      	uxth	r1, r3
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	441a      	add	r2, r3
 8004240:	4b21      	ldr	r3, [pc, #132]	@ (80042c8 <USB_DeactivateEndpoint+0x1f4>)
 8004242:	430b      	orrs	r3, r1
 8004244:	b29b      	uxth	r3, r3
 8004246:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	b29a      	uxth	r2, r3
 8004256:	f640 730f 	movw	r3, #3855	@ 0xf0f
 800425a:	4013      	ands	r3, r2
 800425c:	b299      	uxth	r1, r3
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	441a      	add	r2, r3
 8004268:	4b17      	ldr	r3, [pc, #92]	@ (80042c8 <USB_DeactivateEndpoint+0x1f4>)
 800426a:	430b      	orrs	r3, r1
 800426c:	b29b      	uxth	r3, r3
 800426e:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	b29b      	uxth	r3, r3
 800427e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004282:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004286:	b29c      	uxth	r4, r3
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	441a      	add	r2, r3
 8004292:	4b0e      	ldr	r3, [pc, #56]	@ (80042cc <USB_DeactivateEndpoint+0x1f8>)
 8004294:	4323      	orrs	r3, r4
 8004296:	b29b      	uxth	r3, r3
 8004298:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	881b      	ldrh	r3, [r3, #0]
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042b0:	b29c      	uxth	r4, r3
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	441a      	add	r2, r3
 80042bc:	4b03      	ldr	r3, [pc, #12]	@ (80042cc <USB_DeactivateEndpoint+0x1f8>)
 80042be:	4323      	orrs	r3, r4
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	8013      	strh	r3, [r2, #0]
 80042c4:	e082      	b.n	80043cc <USB_DeactivateEndpoint+0x2f8>
 80042c6:	bf00      	nop
 80042c8:	ffff80c0 	.word	0xffff80c0
 80042cc:	ffff8080 	.word	0xffff8080
 80042d0:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	881b      	ldrh	r3, [r3, #0]
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d013      	beq.n	8004312 <USB_DeactivateEndpoint+0x23e>
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4413      	add	r3, r2
 80042f4:	881b      	ldrh	r3, [r3, #0]
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	f640 730f 	movw	r3, #3855	@ 0xf0f
 80042fc:	4013      	ands	r3, r2
 80042fe:	b299      	uxth	r1, r3
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	441a      	add	r2, r3
 800430a:	4b33      	ldr	r3, [pc, #204]	@ (80043d8 <USB_DeactivateEndpoint+0x304>)
 800430c:	430b      	orrs	r3, r1
 800430e:	b29b      	uxth	r3, r3
 8004310:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	b29b      	uxth	r3, r3
 8004320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004324:	2b00      	cmp	r3, #0
 8004326:	d013      	beq.n	8004350 <USB_DeactivateEndpoint+0x27c>
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	b29a      	uxth	r2, r3
 8004336:	f640 730f 	movw	r3, #3855	@ 0xf0f
 800433a:	4013      	ands	r3, r2
 800433c:	b299      	uxth	r1, r3
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	441a      	add	r2, r3
 8004348:	4b24      	ldr	r3, [pc, #144]	@ (80043dc <USB_DeactivateEndpoint+0x308>)
 800434a:	430b      	orrs	r3, r1
 800434c:	b29b      	uxth	r3, r3
 800434e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	b29a      	uxth	r2, r3
 800435e:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8004362:	4013      	ands	r3, r2
 8004364:	b299      	uxth	r1, r3
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	441a      	add	r2, r3
 8004370:	4b19      	ldr	r3, [pc, #100]	@ (80043d8 <USB_DeactivateEndpoint+0x304>)
 8004372:	430b      	orrs	r3, r1
 8004374:	b29b      	uxth	r3, r3
 8004376:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	b29b      	uxth	r3, r3
 8004386:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800438a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800438e:	b29c      	uxth	r4, r3
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	441a      	add	r2, r3
 800439a:	4b11      	ldr	r3, [pc, #68]	@ (80043e0 <USB_DeactivateEndpoint+0x30c>)
 800439c:	4323      	orrs	r3, r4
 800439e:	b29b      	uxth	r3, r3
 80043a0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043b8:	b29c      	uxth	r4, r3
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	441a      	add	r2, r3
 80043c4:	4b06      	ldr	r3, [pc, #24]	@ (80043e0 <USB_DeactivateEndpoint+0x30c>)
 80043c6:	4323      	orrs	r3, r4
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bc90      	pop	{r4, r7}
 80043d6:	4770      	bx	lr
 80043d8:	ffffc080 	.word	0xffffc080
 80043dc:	ffff80c0 	.word	0xffff80c0
 80043e0:	ffff8080 	.word	0xffff8080

080043e4 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 80043e4:	b590      	push	{r4, r7, lr}
 80043e6:	b08d      	sub	sp, #52	@ 0x34
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer = 0;
 80043ee:	2300      	movs	r3, #0
 80043f0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  uint32_t len = ep->xfer_len;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  /* IN endpoint */
  if (ep->is_in == 1)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	785b      	ldrb	r3, [r3, #1]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	f040 8149 	bne.w	8004694 <USB_EPStartXfer+0x2b0>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	699a      	ldr	r2, [r3, #24]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	429a      	cmp	r2, r3
 800440c:	d909      	bls.n	8004422 <USB_EPStartXfer+0x3e>
    {
      len=ep->maxpacket;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	62bb      	str	r3, [r7, #40]	@ 0x28
      ep->xfer_len-=len; 
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	699a      	ldr	r2, [r3, #24]
 8004418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800441a:	1ad2      	subs	r2, r2, r3
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	619a      	str	r2, [r3, #24]
 8004420:	e005      	b.n	800442e <USB_EPStartXfer+0x4a>
    }
    else
    {  
      len=ep->xfer_len;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	62bb      	str	r3, [r7, #40]	@ 0x28
      ep->xfer_len =0;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	2200      	movs	r2, #0
 800442c:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0) 
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	7a9b      	ldrb	r3, [r3, #10]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d11b      	bne.n	800446e <USB_EPStartXfer+0x8a>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	6959      	ldr	r1, [r3, #20]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	889a      	ldrh	r2, [r3, #4]
 800443e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004440:	b29b      	uxth	r3, r3
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fb7d 	bl	8004b42 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800444e:	b29b      	uxth	r3, r3
 8004450:	461a      	mov	r2, r3
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	4413      	add	r3, r2
 800445a:	3302      	adds	r3, #2
 800445c:	005a      	lsls	r2, r3, #1
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4413      	add	r3, r2
 8004462:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004466:	461a      	mov	r2, r3
 8004468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800446a:	6013      	str	r3, [r2, #0]
 800446c:	e0f6      	b.n	800465c <USB_EPStartXfer+0x278>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	b29b      	uxth	r3, r3
 800447c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004480:	2b00      	cmp	r3, #0
 8004482:	d059      	beq.n	8004538 <USB_EPStartXfer+0x154>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	785b      	ldrb	r3, [r3, #1]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d13b      	bne.n	8004504 <USB_EPStartXfer+0x120>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004492:	b29b      	uxth	r3, r3
 8004494:	461a      	mov	r2, r3
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	4413      	add	r3, r2
 800449e:	3306      	adds	r3, #6
 80044a0:	005a      	lsls	r2, r3, #1
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80044aa:	60bb      	str	r3, [r7, #8]
 80044ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80044b0:	d916      	bls.n	80044e0 <USB_EPStartXfer+0xfc>
 80044b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b4:	095b      	lsrs	r3, r3, #5
 80044b6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80044b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ba:	f003 031f 	and.w	r3, r3, #31
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d102      	bne.n	80044c8 <USB_EPStartXfer+0xe4>
 80044c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80044c4:	3b01      	subs	r3, #1
 80044c6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80044c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80044ca:	029b      	lsls	r3, r3, #10
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	461a      	mov	r2, r3
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	e027      	b.n	8004530 <USB_EPStartXfer+0x14c>
 80044e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e2:	085b      	lsrs	r3, r3, #1
 80044e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80044e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d002      	beq.n	80044f6 <USB_EPStartXfer+0x112>
 80044f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80044f2:	3301      	adds	r3, #1
 80044f4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80044f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80044f8:	029b      	lsls	r3, r3, #10
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	461a      	mov	r2, r3
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	e015      	b.n	8004530 <USB_EPStartXfer+0x14c>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	785b      	ldrb	r3, [r3, #1]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d111      	bne.n	8004530 <USB_EPStartXfer+0x14c>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004512:	b29b      	uxth	r3, r3
 8004514:	461a      	mov	r2, r3
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	4413      	add	r3, r2
 800451e:	3302      	adds	r3, #2
 8004520:	005a      	lsls	r2, r3, #1
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4413      	add	r3, r2
 8004526:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800452a:	461a      	mov	r2, r3
 800452c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800452e:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr1;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	891b      	ldrh	r3, [r3, #8]
 8004534:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004536:	e058      	b.n	80045ea <USB_EPStartXfer+0x206>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	785b      	ldrb	r3, [r3, #1]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d13b      	bne.n	80045b8 <USB_EPStartXfer+0x1d4>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004546:	b29b      	uxth	r3, r3
 8004548:	461a      	mov	r2, r3
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	4413      	add	r3, r2
 8004552:	3302      	adds	r3, #2
 8004554:	005a      	lsls	r2, r3, #1
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4413      	add	r3, r2
 800455a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004562:	2b3e      	cmp	r3, #62	@ 0x3e
 8004564:	d916      	bls.n	8004594 <USB_EPStartXfer+0x1b0>
 8004566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004568:	095b      	lsrs	r3, r3, #5
 800456a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800456c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456e:	f003 031f 	and.w	r3, r3, #31
 8004572:	2b00      	cmp	r3, #0
 8004574:	d102      	bne.n	800457c <USB_EPStartXfer+0x198>
 8004576:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004578:	3b01      	subs	r3, #1
 800457a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800457c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800457e:	029b      	lsls	r3, r3, #10
 8004580:	b29b      	uxth	r3, r3
 8004582:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004586:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800458a:	b29b      	uxth	r3, r3
 800458c:	461a      	mov	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	e027      	b.n	80045e4 <USB_EPStartXfer+0x200>
 8004594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004596:	085b      	lsrs	r3, r3, #1
 8004598:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800459a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <USB_EPStartXfer+0x1c6>
 80045a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80045a6:	3301      	adds	r3, #1
 80045a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80045aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80045ac:	029b      	lsls	r3, r3, #10
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	461a      	mov	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	e015      	b.n	80045e4 <USB_EPStartXfer+0x200>
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	785b      	ldrb	r3, [r3, #1]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d111      	bne.n	80045e4 <USB_EPStartXfer+0x200>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	461a      	mov	r2, r3
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	4413      	add	r3, r2
 80045d2:	3302      	adds	r3, #2
 80045d4:	005a      	lsls	r2, r3, #1
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80045de:	461a      	mov	r2, r3
 80045e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e2:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr0;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	88db      	ldrh	r3, [r3, #6]
 80045e8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	6959      	ldr	r1, [r3, #20]
 80045ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 faa4 	bl	8004b42 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	785b      	ldrb	r3, [r3, #1]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d114      	bne.n	800462c <USB_EPStartXfer+0x248>
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	b29a      	uxth	r2, r3
 8004610:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8004614:	4013      	ands	r3, r2
 8004616:	b299      	uxth	r1, r3
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	441a      	add	r2, r3
 8004622:	4b92      	ldr	r3, [pc, #584]	@ (800486c <USB_EPStartXfer+0x488>)
 8004624:	430b      	orrs	r3, r1
 8004626:	b29b      	uxth	r3, r3
 8004628:	8013      	strh	r3, [r2, #0]
 800462a:	e017      	b.n	800465c <USB_EPStartXfer+0x278>
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	785b      	ldrb	r3, [r3, #1]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d113      	bne.n	800465c <USB_EPStartXfer+0x278>
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	b29a      	uxth	r2, r3
 8004642:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8004646:	4013      	ands	r3, r2
 8004648:	b299      	uxth	r1, r3
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	441a      	add	r2, r3
 8004654:	4b86      	ldr	r3, [pc, #536]	@ (8004870 <USB_EPStartXfer+0x48c>)
 8004656:	430b      	orrs	r3, r1
 8004658:	b29b      	uxth	r3, r3
 800465a:	8013      	strh	r3, [r2, #0]
    }
    
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	b29b      	uxth	r3, r3
 800466a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800466e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004672:	b29c      	uxth	r4, r3
 8004674:	f084 0310 	eor.w	r3, r4, #16
 8004678:	b29c      	uxth	r4, r3
 800467a:	f084 0320 	eor.w	r3, r4, #32
 800467e:	b29c      	uxth	r4, r3
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	441a      	add	r2, r3
 800468a:	4b7a      	ldr	r3, [pc, #488]	@ (8004874 <USB_EPStartXfer+0x490>)
 800468c:	4323      	orrs	r3, r4
 800468e:	b29b      	uxth	r3, r3
 8004690:	8013      	strh	r3, [r2, #0]
 8004692:	e122      	b.n	80048da <USB_EPStartXfer+0x4f6>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	699a      	ldr	r2, [r3, #24]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	429a      	cmp	r2, r3
 800469e:	d909      	bls.n	80046b4 <USB_EPStartXfer+0x2d0>
    {
      len=ep->maxpacket;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	62bb      	str	r3, [r7, #40]	@ 0x28
      ep->xfer_len-=len; 
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	699a      	ldr	r2, [r3, #24]
 80046aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ac:	1ad2      	subs	r2, r2, r3
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	619a      	str	r2, [r3, #24]
 80046b2:	e005      	b.n	80046c0 <USB_EPStartXfer+0x2dc>
    }
    else
    {
      len=ep->xfer_len;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      ep->xfer_len =0;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2200      	movs	r2, #0
 80046be:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0) 
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	7a9b      	ldrb	r3, [r3, #10]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d13b      	bne.n	8004740 <USB_EPStartXfer+0x35c>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	461a      	mov	r2, r3
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	4413      	add	r3, r2
 80046da:	3306      	adds	r3, #6
 80046dc:	005a      	lsls	r2, r3, #1
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80046e6:	613b      	str	r3, [r7, #16]
 80046e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80046ec:	d916      	bls.n	800471c <USB_EPStartXfer+0x338>
 80046ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f0:	095b      	lsrs	r3, r3, #5
 80046f2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80046f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f6:	f003 031f 	and.w	r3, r3, #31
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d102      	bne.n	8004704 <USB_EPStartXfer+0x320>
 80046fe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004700:	3b01      	subs	r3, #1
 8004702:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004704:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004706:	029b      	lsls	r3, r3, #10
 8004708:	b29b      	uxth	r3, r3
 800470a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800470e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004712:	b29b      	uxth	r3, r3
 8004714:	461a      	mov	r2, r3
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	e0c3      	b.n	80048a4 <USB_EPStartXfer+0x4c0>
 800471c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800471e:	085b      	lsrs	r3, r3, #1
 8004720:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	d002      	beq.n	8004732 <USB_EPStartXfer+0x34e>
 800472c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800472e:	3301      	adds	r3, #1
 8004730:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004732:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004734:	029b      	lsls	r3, r3, #10
 8004736:	b29b      	uxth	r3, r3
 8004738:	461a      	mov	r2, r3
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	e0b1      	b.n	80048a4 <USB_EPStartXfer+0x4c0>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	785b      	ldrb	r3, [r3, #1]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d13b      	bne.n	80047c0 <USB_EPStartXfer+0x3dc>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800474e:	b29b      	uxth	r3, r3
 8004750:	461a      	mov	r2, r3
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	4413      	add	r3, r2
 800475a:	3302      	adds	r3, #2
 800475c:	005a      	lsls	r2, r3, #1
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4413      	add	r3, r2
 8004762:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004766:	61bb      	str	r3, [r7, #24]
 8004768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800476a:	2b3e      	cmp	r3, #62	@ 0x3e
 800476c:	d916      	bls.n	800479c <USB_EPStartXfer+0x3b8>
 800476e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004770:	095b      	lsrs	r3, r3, #5
 8004772:	843b      	strh	r3, [r7, #32]
 8004774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004776:	f003 031f 	and.w	r3, r3, #31
 800477a:	2b00      	cmp	r3, #0
 800477c:	d102      	bne.n	8004784 <USB_EPStartXfer+0x3a0>
 800477e:	8c3b      	ldrh	r3, [r7, #32]
 8004780:	3b01      	subs	r3, #1
 8004782:	843b      	strh	r3, [r7, #32]
 8004784:	8c3b      	ldrh	r3, [r7, #32]
 8004786:	029b      	lsls	r3, r3, #10
 8004788:	b29b      	uxth	r3, r3
 800478a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800478e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004792:	b29b      	uxth	r3, r3
 8004794:	461a      	mov	r2, r3
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	e027      	b.n	80047ec <USB_EPStartXfer+0x408>
 800479c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800479e:	085b      	lsrs	r3, r3, #1
 80047a0:	843b      	strh	r3, [r7, #32]
 80047a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <USB_EPStartXfer+0x3ce>
 80047ac:	8c3b      	ldrh	r3, [r7, #32]
 80047ae:	3301      	adds	r3, #1
 80047b0:	843b      	strh	r3, [r7, #32]
 80047b2:	8c3b      	ldrh	r3, [r7, #32]
 80047b4:	029b      	lsls	r3, r3, #10
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	461a      	mov	r2, r3
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	e015      	b.n	80047ec <USB_EPStartXfer+0x408>
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	785b      	ldrb	r3, [r3, #1]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d111      	bne.n	80047ec <USB_EPStartXfer+0x408>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	461a      	mov	r2, r3
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	4413      	add	r3, r2
 80047da:	3302      	adds	r3, #2
 80047dc:	005a      	lsls	r2, r3, #1
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80047e6:	461a      	mov	r2, r3
 80047e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ea:	6013      	str	r3, [r2, #0]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	785b      	ldrb	r3, [r3, #1]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d141      	bne.n	8004878 <USB_EPStartXfer+0x494>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	461a      	mov	r2, r3
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	4413      	add	r3, r2
 8004806:	3306      	adds	r3, #6
 8004808:	005a      	lsls	r2, r3, #1
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4413      	add	r3, r2
 800480e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004812:	617b      	str	r3, [r7, #20]
 8004814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004816:	2b3e      	cmp	r3, #62	@ 0x3e
 8004818:	d916      	bls.n	8004848 <USB_EPStartXfer+0x464>
 800481a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800481c:	095b      	lsrs	r3, r3, #5
 800481e:	83fb      	strh	r3, [r7, #30]
 8004820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004822:	f003 031f 	and.w	r3, r3, #31
 8004826:	2b00      	cmp	r3, #0
 8004828:	d102      	bne.n	8004830 <USB_EPStartXfer+0x44c>
 800482a:	8bfb      	ldrh	r3, [r7, #30]
 800482c:	3b01      	subs	r3, #1
 800482e:	83fb      	strh	r3, [r7, #30]
 8004830:	8bfb      	ldrh	r3, [r7, #30]
 8004832:	029b      	lsls	r3, r3, #10
 8004834:	b29b      	uxth	r3, r3
 8004836:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800483a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800483e:	b29b      	uxth	r3, r3
 8004840:	461a      	mov	r2, r3
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	e02d      	b.n	80048a4 <USB_EPStartXfer+0x4c0>
 8004848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800484a:	085b      	lsrs	r3, r3, #1
 800484c:	83fb      	strh	r3, [r7, #30]
 800484e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b00      	cmp	r3, #0
 8004856:	d002      	beq.n	800485e <USB_EPStartXfer+0x47a>
 8004858:	8bfb      	ldrh	r3, [r7, #30]
 800485a:	3301      	adds	r3, #1
 800485c:	83fb      	strh	r3, [r7, #30]
 800485e:	8bfb      	ldrh	r3, [r7, #30]
 8004860:	029b      	lsls	r3, r3, #10
 8004862:	b29b      	uxth	r3, r3
 8004864:	461a      	mov	r2, r3
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	e01b      	b.n	80048a4 <USB_EPStartXfer+0x4c0>
 800486c:	ffff80c0 	.word	0xffff80c0
 8004870:	ffffc080 	.word	0xffffc080
 8004874:	ffff8080 	.word	0xffff8080
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	785b      	ldrb	r3, [r3, #1]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d111      	bne.n	80048a4 <USB_EPStartXfer+0x4c0>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004886:	b29b      	uxth	r3, r3
 8004888:	461a      	mov	r2, r3
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	4413      	add	r3, r2
 8004892:	3302      	adds	r3, #2
 8004894:	005a      	lsls	r2, r3, #1
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4413      	add	r3, r2
 800489a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800489e:	461a      	mov	r2, r3
 80048a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a2:	6013      	str	r3, [r2, #0]
    }
    
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	881b      	ldrh	r3, [r3, #0]
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ba:	b29c      	uxth	r4, r3
 80048bc:	f484 5380 	eor.w	r3, r4, #4096	@ 0x1000
 80048c0:	b29c      	uxth	r4, r3
 80048c2:	f484 5300 	eor.w	r3, r4, #8192	@ 0x2000
 80048c6:	b29c      	uxth	r4, r3
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	441a      	add	r2, r3
 80048d2:	4b04      	ldr	r3, [pc, #16]	@ (80048e4 <USB_EPStartXfer+0x500>)
 80048d4:	4323      	orrs	r3, r4
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	8013      	strh	r3, [r2, #0]
  }
  
  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3734      	adds	r7, #52	@ 0x34
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd90      	pop	{r4, r7, pc}
 80048e4:	ffff8080 	.word	0xffff8080

080048e8 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 80048e8:	b490      	push	{r4, r7}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  if (ep->num == 0)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d118      	bne.n	800492c <USB_EPSetStall+0x44>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4413      	add	r3, r2
 8004904:	881b      	ldrh	r3, [r3, #0]
 8004906:	b29b      	uxth	r3, r3
 8004908:	f64b 74bf 	movw	r4, #49087	@ 0xbfbf
 800490c:	401c      	ands	r4, r3
 800490e:	f484 5480 	eor.w	r4, r4, #4096	@ 0x1000
 8004912:	f084 0410 	eor.w	r4, r4, #16
 8004916:	b2a1      	uxth	r1, r4
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	441a      	add	r2, r3
 8004922:	4b20      	ldr	r3, [pc, #128]	@ (80049a4 <USB_EPSetStall+0xbc>)
 8004924:	430b      	orrs	r3, r1
 8004926:	b29b      	uxth	r3, r3
 8004928:	8013      	strh	r3, [r2, #0]
 800492a:	e034      	b.n	8004996 <USB_EPSetStall+0xae>
  }
  else
  {
    if (ep->is_in)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	785b      	ldrb	r3, [r3, #1]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d018      	beq.n	8004966 <USB_EPSetStall+0x7e>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	881b      	ldrh	r3, [r3, #0]
 8004940:	b29b      	uxth	r3, r3
 8004942:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004946:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800494a:	b29c      	uxth	r4, r3
 800494c:	f084 0310 	eor.w	r3, r4, #16
 8004950:	b29c      	uxth	r4, r3
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	441a      	add	r2, r3
 800495c:	4b11      	ldr	r3, [pc, #68]	@ (80049a4 <USB_EPSetStall+0xbc>)
 800495e:	4323      	orrs	r3, r4
 8004960:	b29b      	uxth	r3, r3
 8004962:	8013      	strh	r3, [r2, #0]
 8004964:	e017      	b.n	8004996 <USB_EPSetStall+0xae>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	881b      	ldrh	r3, [r3, #0]
 8004972:	b29b      	uxth	r3, r3
 8004974:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004978:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800497c:	b29c      	uxth	r4, r3
 800497e:	f484 5380 	eor.w	r3, r4, #4096	@ 0x1000
 8004982:	b29c      	uxth	r4, r3
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	441a      	add	r2, r3
 800498e:	4b05      	ldr	r3, [pc, #20]	@ (80049a4 <USB_EPSetStall+0xbc>)
 8004990:	4323      	orrs	r3, r4
 8004992:	b29b      	uxth	r3, r3
 8004994:	8013      	strh	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bc90      	pop	{r4, r7}
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	ffff8080 	.word	0xffff8080

080049a8 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049a8:	b490      	push	{r4, r7}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  if (ep->is_in)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	785b      	ldrb	r3, [r3, #1]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d03a      	beq.n	8004a30 <USB_EPClearStall+0x88>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d013      	beq.n	80049f8 <USB_EPClearStall+0x50>
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	881b      	ldrh	r3, [r3, #0]
 80049dc:	b29a      	uxth	r2, r3
 80049de:	f640 730f 	movw	r3, #3855	@ 0xf0f
 80049e2:	4013      	ands	r3, r2
 80049e4:	b299      	uxth	r1, r3
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	441a      	add	r2, r3
 80049f0:	4b2f      	ldr	r3, [pc, #188]	@ (8004ab0 <USB_EPClearStall+0x108>)
 80049f2:	430b      	orrs	r3, r1
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	881b      	ldrh	r3, [r3, #0]
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a0e:	b29c      	uxth	r4, r3
 8004a10:	f084 0310 	eor.w	r3, r4, #16
 8004a14:	b29c      	uxth	r4, r3
 8004a16:	f084 0320 	eor.w	r3, r4, #32
 8004a1a:	b29c      	uxth	r4, r3
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	441a      	add	r2, r3
 8004a26:	4b23      	ldr	r3, [pc, #140]	@ (8004ab4 <USB_EPClearStall+0x10c>)
 8004a28:	4323      	orrs	r3, r4
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	8013      	strh	r3, [r2, #0]
 8004a2e:	e039      	b.n	8004aa4 <USB_EPClearStall+0xfc>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4413      	add	r3, r2
 8004a3a:	881b      	ldrh	r3, [r3, #0]
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d013      	beq.n	8004a6e <USB_EPClearStall+0xc6>
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8004a58:	4013      	ands	r3, r2
 8004a5a:	b299      	uxth	r1, r3
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	441a      	add	r2, r3
 8004a66:	4b14      	ldr	r3, [pc, #80]	@ (8004ab8 <USB_EPClearStall+0x110>)
 8004a68:	430b      	orrs	r3, r1
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a84:	b29c      	uxth	r4, r3
 8004a86:	f484 5380 	eor.w	r3, r4, #4096	@ 0x1000
 8004a8a:	b29c      	uxth	r4, r3
 8004a8c:	f484 5300 	eor.w	r3, r4, #8192	@ 0x2000
 8004a90:	b29c      	uxth	r4, r3
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	441a      	add	r2, r3
 8004a9c:	4b05      	ldr	r3, [pc, #20]	@ (8004ab4 <USB_EPClearStall+0x10c>)
 8004a9e:	4323      	orrs	r3, r4
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	8013      	strh	r3, [r2, #0]
  }
  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3708      	adds	r7, #8
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bc90      	pop	{r4, r7}
 8004aae:	4770      	bx	lr
 8004ab0:	ffff80c0 	.word	0xffff80c0
 8004ab4:	ffff8080 	.word	0xffff8080
 8004ab8:	ffffc080 	.word	0xffffc080

08004abc <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	70fb      	strb	r3, [r7, #3]
  if(address == 0) 
 8004ac8:	78fb      	ldrb	r3, [r7, #3]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d103      	bne.n	8004ad6 <USB_SetDevAddress+0x1a>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2280      	movs	r2, #128	@ 0x80
 8004ad2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }
  
  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bc80      	pop	{r7}
 8004ae0:	4770      	bx	lr

08004ae2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_TypeDef *USBx)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b083      	sub	sp, #12
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bc80      	pop	{r7}
 8004af4:	4770      	bx	lr

08004af6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_TypeDef *USBx)
{
 8004af6:	b480      	push	{r7}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bc80      	pop	{r7}
 8004b08:	4770      	bx	lr

08004b0a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b085      	sub	sp, #20
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004b12:	2300      	movs	r3, #0
 8004b14:	60fb      	str	r3, [r7, #12]
  
  tmpreg = USBx->ISTR;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004b20:	68fb      	ldr	r3, [r7, #12]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3714      	adds	r7, #20
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bc80      	pop	{r7}
 8004b2a:	4770      	bx	lr

08004b2c <USB_EP0_OutStart>:
  * @param  USBx : Selected device
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bc80      	pop	{r7}
 8004b40:	4770      	bx	lr

08004b42 <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b08b      	sub	sp, #44	@ 0x2c
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	60f8      	str	r0, [r7, #12]
 8004b4a:	60b9      	str	r1, [r7, #8]
 8004b4c:	4611      	mov	r1, r2
 8004b4e:	461a      	mov	r2, r3
 8004b50:	460b      	mov	r3, r1
 8004b52:	80fb      	strh	r3, [r7, #6]
 8004b54:	4613      	mov	r3, r2
 8004b56:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8004b58:	88bb      	ldrh	r3, [r7, #4]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	105b      	asrs	r3, r3, #1
 8004b5e:	61fb      	str	r3, [r7, #28]
  uint32_t index = 0, temp1 = 0, temp2 = 0;
 8004b60:	2300      	movs	r3, #0
 8004b62:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b64:	2300      	movs	r3, #0
 8004b66:	61bb      	str	r3, [r7, #24]
 8004b68:	2300      	movs	r3, #0
 8004b6a:	617b      	str	r3, [r7, #20]
  uint16_t *pdwVal = NULL;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	623b      	str	r3, [r7, #32]
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8004b70:	88fb      	ldrh	r3, [r7, #6]
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	461a      	mov	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b7e:	623b      	str	r3, [r7, #32]
  for (index = nbytes; index != 0; index--)
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b84:	e01a      	b.n	8004bbc <USB_WritePMA+0x7a>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	61bb      	str	r3, [r7, #24]
    pbUsrBuf++;
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	60bb      	str	r3, [r7, #8]
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	021b      	lsls	r3, r3, #8
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	617b      	str	r3, [r7, #20]
    *pdwVal++ = temp2;
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	1c9a      	adds	r2, r3, #2
 8004ba2:	623a      	str	r2, [r7, #32]
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	b292      	uxth	r2, r2
 8004ba8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	3302      	adds	r3, #2
 8004bae:	623b      	str	r3, [r7, #32]
    pbUsrBuf++;
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1e1      	bne.n	8004b86 <USB_WritePMA+0x44>
  }
}
 8004bc2:	bf00      	nop
 8004bc4:	bf00      	nop
 8004bc6:	372c      	adds	r7, #44	@ 0x2c
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bc80      	pop	{r7}
 8004bcc:	4770      	bx	lr

08004bce <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b089      	sub	sp, #36	@ 0x24
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	60f8      	str	r0, [r7, #12]
 8004bd6:	60b9      	str	r1, [r7, #8]
 8004bd8:	4611      	mov	r1, r2
 8004bda:	461a      	mov	r2, r3
 8004bdc:	460b      	mov	r3, r1
 8004bde:	80fb      	strh	r3, [r7, #6]
 8004be0:	4613      	mov	r3, r2
 8004be2:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8004be4:	88bb      	ldrh	r3, [r7, #4]
 8004be6:	3301      	adds	r3, #1
 8004be8:	105b      	asrs	r3, r3, #1
 8004bea:	617b      	str	r3, [r7, #20]
  uint32_t index = 0;
 8004bec:	2300      	movs	r3, #0
 8004bee:	61fb      	str	r3, [r7, #28]
  uint32_t *pdwVal = NULL;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	61bb      	str	r3, [r7, #24]
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8004bf4:	88fb      	ldrh	r3, [r7, #6]
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004c02:	61bb      	str	r3, [r7, #24]
  for (index = nbytes; index != 0; index--)
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	61fb      	str	r3, [r7, #28]
 8004c08:	e00e      	b.n	8004c28 <USB_ReadPMA+0x5a>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	1d1a      	adds	r2, r3, #4
 8004c0e:	61ba      	str	r2, [r7, #24]
 8004c10:	6819      	ldr	r1, [r3, #0]
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	1c5a      	adds	r2, r3, #1
 8004c16:	60ba      	str	r2, [r7, #8]
 8004c18:	b28a      	uxth	r2, r1
 8004c1a:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	3b01      	subs	r3, #1
 8004c26:	61fb      	str	r3, [r7, #28]
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1ed      	bne.n	8004c0a <USB_ReadPMA+0x3c>
  }
}
 8004c2e:	bf00      	nop
 8004c30:	bf00      	nop
 8004c32:	3724      	adds	r7, #36	@ 0x24
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bc80      	pop	{r7}
 8004c38:	4770      	bx	lr

08004c3a <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b084      	sub	sp, #16
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
 8004c42:	460b      	mov	r3, r1
 8004c44:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8004c46:	2300      	movs	r3, #0
 8004c48:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	7c1b      	ldrb	r3, [r3, #16]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10e      	bne.n	8004c70 <USBD_CDC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8004c52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c56:	2202      	movs	r2, #2
 8004c58:	2181      	movs	r1, #129	@ 0x81
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f001 fbd6 	bl	800640c <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8004c60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c64:	2202      	movs	r2, #2
 8004c66:	2101      	movs	r1, #1
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f001 fbcf 	bl	800640c <USBD_LL_OpenEP>
 8004c6e:	e00b      	b.n	8004c88 <USBD_CDC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8004c70:	2340      	movs	r3, #64	@ 0x40
 8004c72:	2202      	movs	r2, #2
 8004c74:	2181      	movs	r1, #129	@ 0x81
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f001 fbc8 	bl	800640c <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8004c7c:	2340      	movs	r3, #64	@ 0x40
 8004c7e:	2202      	movs	r2, #2
 8004c80:	2101      	movs	r1, #1
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f001 fbc2 	bl	800640c <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8004c88:	2308      	movs	r3, #8
 8004c8a:	2203      	movs	r2, #3
 8004c8c:	2182      	movs	r1, #130	@ 0x82
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f001 fbbc 	bl	800640c <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8004c94:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8004c98:	f001 fd7c 	bl	8006794 <USBD_static_malloc>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
  
  if(pdev->pClassData == NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d102      	bne.n	8004cb4 <USBD_CDC_Init+0x7a>
  {
    ret = 1; 
 8004cae:	2301      	movs	r3, #1
 8004cb0:	73fb      	strb	r3, [r7, #15]
 8004cb2:	e026      	b.n	8004d02 <USBD_CDC_Init+0xc8>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8004cba:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState =0;
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	7c1b      	ldrb	r3, [r3, #16]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d109      	bne.n	8004cf2 <USBD_CDC_Init+0xb8>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004ce4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ce8:	2101      	movs	r1, #1
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f001 fd04 	bl	80066f8 <USBD_LL_PrepareReceive>
 8004cf0:	e007      	b.n	8004d02 <USBD_CDC_Init+0xc8>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004cf8:	2340      	movs	r3, #64	@ 0x40
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f001 fcfb 	bl	80066f8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 8004d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8004d1c:	2181      	movs	r1, #129	@ 0x81
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f001 fbb2 	bl	8006488 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8004d24:	2101      	movs	r1, #1
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f001 fbae 	bl	8006488 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8004d2c:	2182      	movs	r1, #130	@ 0x82
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f001 fbaa 	bl	8006488 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00e      	beq.n	8004d5c <USBD_CDC_DeInit+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f001 fd2c 	bl	80067ac <USBD_static_free>
    pdev->pClassData = NULL;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
  }
  
  return ret;
 8004d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
	...

08004d68 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8004d78:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d039      	beq.n	8004dfa <USBD_CDC_Setup+0x92>
 8004d86:	2b20      	cmp	r3, #32
 8004d88:	d143      	bne.n	8004e12 <USBD_CDC_Setup+0xaa>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	88db      	ldrh	r3, [r3, #6]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d029      	beq.n	8004de6 <USBD_CDC_Setup+0x7e>
    {
      if (req->bmRequest & 0x80)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	b25b      	sxtb	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	da11      	bge.n	8004dc0 <USBD_CDC_Setup+0x58>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8004da8:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	88d2      	ldrh	r2, [r2, #6]
 8004dae:	4798      	blx	r3
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
                            (uint8_t *)hcdc->data,
 8004db0:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	88db      	ldrh	r3, [r3, #6]
 8004db6:	461a      	mov	r2, r3
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 ffec 	bl	8005d96 <USBD_CtlSendData>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t*)req,
                                                        0);
    }
    break;
 8004dbe:	e029      	b.n	8004e14 <USBD_CDC_Setup+0xac>
        hcdc->CmdOpCode = req->bRequest;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	785a      	ldrb	r2, [r3, #1]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
        hcdc->CmdLength = req->wLength;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	88db      	ldrh	r3, [r3, #6]
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
                           (uint8_t *)hcdc->data,
 8004dd6:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	88db      	ldrh	r3, [r3, #6]
 8004ddc:	461a      	mov	r2, r3
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f001 f807 	bl	8005df2 <USBD_CtlPrepareRx>
    break;
 8004de4:	e016      	b.n	8004e14 <USBD_CDC_Setup+0xac>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	7850      	ldrb	r0, [r2, #1]
 8004df2:	2200      	movs	r2, #0
 8004df4:	6839      	ldr	r1, [r7, #0]
 8004df6:	4798      	blx	r3
    break;
 8004df8:	e00c      	b.n	8004e14 <USBD_CDC_Setup+0xac>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	785b      	ldrb	r3, [r3, #1]
 8004dfe:	2b0a      	cmp	r3, #10
 8004e00:	d001      	beq.n	8004e06 <USBD_CDC_Setup+0x9e>
 8004e02:	2b0b      	cmp	r3, #11
                        &ifalt,
                        1);
      break;
      
    case USB_REQ_SET_INTERFACE :
      break;
 8004e04:	e005      	b.n	8004e12 <USBD_CDC_Setup+0xaa>
      USBD_CtlSendData (pdev,
 8004e06:	2201      	movs	r2, #1
 8004e08:	4905      	ldr	r1, [pc, #20]	@ (8004e20 <USBD_CDC_Setup+0xb8>)
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 ffc3 	bl	8005d96 <USBD_CtlSendData>
      break;
 8004e10:	bf00      	nop
    }
 
  default: 
    break;
 8004e12:	bf00      	nop
  }
  return USBD_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	20000a7c 	.word	0x20000a7c

08004e24 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8004e36:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d005      	beq.n	8004e4e <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    return USBD_OK;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	e000      	b.n	8004e50 <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 8004e4e:	2302      	movs	r3, #2
  }
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3714      	adds	r7, #20
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bc80      	pop	{r7}
 8004e58:	4770      	bx	lr

08004e5a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b084      	sub	sp, #16
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
 8004e62:	460b      	mov	r3, r1
 8004e64:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8004e6c:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8004e6e:	78fb      	ldrb	r3, [r7, #3]
 8004e70:	4619      	mov	r1, r3
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f001 fc7a 	bl	800676c <USBD_LL_GetRxDataSize>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00d      	beq.n	8004ea6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8004e9e:	4611      	mov	r1, r2
 8004ea0:	4798      	blx	r3

    return USBD_OK;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	e000      	b.n	8004ea8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004ea6:	2302      	movs	r3, #2
  }
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8004ebe:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d014      	beq.n	8004ef4 <USBD_CDC_EP0_RxReady+0x44>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8004ed0:	2bff      	cmp	r3, #255	@ 0xff
 8004ed2:	d00f      	beq.n	8004ef4 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8004ee2:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004eea:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	22ff      	movs	r2, #255	@ 0xff
 8004ef0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
      
  }
  return USBD_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
	...

08004f00 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2243      	movs	r2, #67	@ 0x43
 8004f0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004f0e:	4b03      	ldr	r3, [pc, #12]	@ (8004f1c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bc80      	pop	{r7}
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	20000948 	.word	0x20000948

08004f20 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2243      	movs	r2, #67	@ 0x43
 8004f2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8004f2e:	4b03      	ldr	r3, [pc, #12]	@ (8004f3c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bc80      	pop	{r7}
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	20000904 	.word	0x20000904

08004f40 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2243      	movs	r2, #67	@ 0x43
 8004f4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8004f4e:	4b03      	ldr	r3, [pc, #12]	@ (8004f5c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bc80      	pop	{r7}
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	2000098c 	.word	0x2000098c

08004f60 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	220a      	movs	r2, #10
 8004f6c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8004f6e:	4b03      	ldr	r3, [pc, #12]	@ (8004f7c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bc80      	pop	{r7}
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	200008c0 	.word	0x200008c0

08004f80 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d005      	beq.n	8004fa0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    ret = USBD_OK;    
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3714      	adds	r7, #20
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bc80      	pop	{r7}
 8004faa:	4770      	bx	lr

08004fac <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b087      	sub	sp, #28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8004fc0:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;  
 8004fca:	88fa      	ldrh	r2, [r7, #6]
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  
  return USBD_OK;  
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	371c      	adds	r7, #28
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bc80      	pop	{r7}
 8004fdc:	4770      	bx	lr

08004fde <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b085      	sub	sp, #20
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8004fee:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
  
  return USBD_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3714      	adds	r7, #20
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bc80      	pop	{r7}
 8005002:	4770      	bx	lr

08005004 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8005012:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800501a:	2b00      	cmp	r3, #0
 800501c:	d017      	beq.n	800504e <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	7c1b      	ldrb	r3, [r3, #16]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d109      	bne.n	800503a <USBD_CDC_ReceivePacket+0x36>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800502c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005030:	2101      	movs	r1, #1
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f001 fb60 	bl	80066f8 <USBD_LL_PrepareReceive>
 8005038:	e007      	b.n	800504a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005040:	2340      	movs	r3, #64	@ 0x40
 8005042:	2101      	movs	r1, #1
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f001 fb57 	bl	80066f8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800504a:	2300      	movs	r3, #0
 800504c:	e000      	b.n	8005050 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800504e:	2302      	movs	r3, #2
  }
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	4613      	mov	r3, r2
 8005064:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d101      	bne.n	8005070 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 800506c:	2302      	movs	r3, #2
 800506e:	e01a      	b.n	80050a6 <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
  pdev->id = id;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	79fa      	ldrb	r2, [r7, #7]
 800509c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f001 f920 	bl	80062e4 <USBD_LL_Init>
  
  return USBD_OK; 
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b085      	sub	sp, #20
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80050b8:	2300      	movs	r3, #0
 80050ba:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d006      	beq.n	80050d0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    status = USBD_OK;
 80050ca:	2300      	movs	r3, #0
 80050cc:	73fb      	strb	r3, [r7, #15]
 80050ce:	e001      	b.n	80050d4 <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 80050d0:	2302      	movs	r3, #2
 80050d2:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	bc80      	pop	{r7}
 80050de:	4770      	bx	lr

080050e0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f001 f95d 	bl	80063a8 <USBD_LL_Start>
  
  return USBD_OK;  
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3708      	adds	r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	bc80      	pop	{r7}
 800510a:	4770      	bx	lr

0800510c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	460b      	mov	r3, r1
 8005116:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8005118:	2302      	movs	r3, #2
 800511a:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00c      	beq.n	8005140 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	78fa      	ldrb	r2, [r7, #3]
 8005130:	4611      	mov	r1, r2
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	4798      	blx	r3
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d101      	bne.n	8005140 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800513c:	2300      	movs	r3, #0
 800513e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8005140:	7bfb      	ldrb	r3, [r7, #15]
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b082      	sub	sp, #8
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
 8005152:	460b      	mov	r3, r1
 8005154:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	78fa      	ldrb	r2, [r7, #3]
 8005160:	4611      	mov	r1, r2
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	4798      	blx	r3
  return USBD_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8005180:	6839      	ldr	r1, [r7, #0]
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fd63 	bl	8005c4e <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f8b3 320e 	ldrh.w	r3, [r3, #526]	@ 0x20e
 8005196:	461a      	mov	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80051a4:	f003 031f 	and.w	r3, r3, #31
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d016      	beq.n	80051da <USBD_LL_SetupStage+0x6a>
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	dc1c      	bgt.n	80051ea <USBD_LL_SetupStage+0x7a>
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d002      	beq.n	80051ba <USBD_LL_SetupStage+0x4a>
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d008      	beq.n	80051ca <USBD_LL_SetupStage+0x5a>
 80051b8:	e017      	b.n	80051ea <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80051c0:	4619      	mov	r1, r3
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f988 	bl	80054d8 <USBD_StdDevReq>
    break;
 80051c8:	e01a      	b.n	8005200 <USBD_LL_SetupStage+0x90>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80051d0:	4619      	mov	r1, r3
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f9d0 	bl	8005578 <USBD_StdItfReq>
    break;
 80051d8:	e012      	b.n	8005200 <USBD_LL_SetupStage+0x90>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80051e0:	4619      	mov	r1, r3
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f9fb 	bl	80055de <USBD_StdEPReq>
    break;
 80051e8:	e00a      	b.n	8005200 <USBD_LL_SetupStage+0x90>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80051f0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	4619      	mov	r1, r3
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f001 f97b 	bl	80064f4 <USBD_LL_StallEP>
    break;
 80051fe:	bf00      	nop
  }  
  return USBD_OK;  
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800520a:	b580      	push	{r7, lr}
 800520c:	b086      	sub	sp, #24
 800520e:	af00      	add	r7, sp, #0
 8005210:	60f8      	str	r0, [r7, #12]
 8005212:	460b      	mov	r3, r1
 8005214:	607a      	str	r2, [r7, #4]
 8005216:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8005218:	7afb      	ldrb	r3, [r7, #11]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d138      	bne.n	8005290 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8005224:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f8d3 31f4 	ldr.w	r3, [r3, #500]	@ 0x1f4
 800522c:	2b03      	cmp	r3, #3
 800522e:	d142      	bne.n	80052b6 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	429a      	cmp	r2, r3
 800523a:	d914      	bls.n	8005266 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	689a      	ldr	r2, [r3, #8]
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	1ad2      	subs	r2, r2, r3
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	68da      	ldr	r2, [r3, #12]
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	4293      	cmp	r3, r2
 8005254:	bf28      	it	cs
 8005256:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 8005258:	b29b      	uxth	r3, r3
 800525a:	461a      	mov	r2, r3
 800525c:	6879      	ldr	r1, [r7, #4]
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 fde5 	bl	8005e2e <USBD_CtlContinueRx>
 8005264:	e027      	b.n	80052b6 <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00a      	beq.n	8005288 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005278:	2b03      	cmp	r3, #3
 800527a:	d105      	bne.n	8005288 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 fde2 	bl	8005e52 <USBD_CtlSendStatus>
 800528e:	e012      	b.n	80052b6 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00c      	beq.n	80052b6 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 80052a2:	2b03      	cmp	r3, #3
 80052a4:	d107      	bne.n	80052b6 <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	7afa      	ldrb	r2, [r7, #11]
 80052b0:	4611      	mov	r1, r2
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	4798      	blx	r3
  }  
  return USBD_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3718      	adds	r7, #24
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	460b      	mov	r3, r1
 80052ca:	607a      	str	r2, [r7, #4]
 80052cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80052ce:	7afb      	ldrb	r3, [r7, #11]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d16c      	bne.n	80053ae <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	3314      	adds	r3, #20
 80052d8:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f8d3 31f4 	ldr.w	r3, [r3, #500]	@ 0x1f4
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d157      	bne.n	8005394 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d915      	bls.n	800531c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	1ad2      	subs	r2, r2, r3
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8005302:	b29b      	uxth	r3, r3
 8005304:	461a      	mov	r2, r3
 8005306:	6879      	ldr	r1, [r7, #4]
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f000 fd60 	bl	8005dce <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800530e:	2300      	movs	r3, #0
 8005310:	2200      	movs	r2, #0
 8005312:	2100      	movs	r1, #0
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f001 f9ef 	bl	80066f8 <USBD_LL_PrepareReceive>
 800531a:	e03b      	b.n	8005394 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	68d2      	ldr	r2, [r2, #12]
 8005324:	fbb3 f1f2 	udiv	r1, r3, r2
 8005328:	fb01 f202 	mul.w	r2, r1, r2
 800532c:	1a9b      	subs	r3, r3, r2
 800532e:	2b00      	cmp	r3, #0
 8005330:	d11c      	bne.n	800536c <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 800533a:	429a      	cmp	r2, r3
 800533c:	d316      	bcc.n	800536c <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f8d3 31f8 	ldr.w	r3, [r3, #504]	@ 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8005348:	429a      	cmp	r2, r3
 800534a:	d20f      	bcs.n	800536c <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800534c:	2200      	movs	r2, #0
 800534e:	2100      	movs	r1, #0
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f000 fd3c 	bl	8005dce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800535e:	2300      	movs	r3, #0
 8005360:	2200      	movs	r2, #0
 8005362:	2100      	movs	r1, #0
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f001 f9c7 	bl	80066f8 <USBD_LL_PrepareReceive>
 800536a:	e013      	b.n	8005394 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00a      	beq.n	800538e <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800537e:	2b03      	cmp	r3, #3
 8005380:	d105      	bne.n	800538e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 fd72 	bl	8005e78 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800539a:	2b01      	cmp	r3, #1
 800539c:	d11a      	bne.n	80053d4 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f7ff feaa 	bl	80050f8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
 80053ac:	e012      	b.n	80053d4 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00c      	beq.n	80053d4 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 80053c0:	2b03      	cmp	r3, #3
 80053c2:	d107      	bne.n	80053d4 <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	7afa      	ldrb	r2, [r7, #11]
 80053ce:	4611      	mov	r1, r2
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	4798      	blx	r3
  }  
  return USBD_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b082      	sub	sp, #8
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80053e6:	2340      	movs	r3, #64	@ 0x40
 80053e8:	2200      	movs	r2, #0
 80053ea:	2100      	movs	r1, #0
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f001 f80d 	bl	800640c <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2240      	movs	r2, #64	@ 0x40
 80053f6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80053fa:	2340      	movs	r3, #64	@ 0x40
 80053fc:	2200      	movs	r2, #0
 80053fe:	2180      	movs	r1, #128	@ 0x80
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f001 f803 	bl	800640c <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2240      	movs	r2, #64	@ 0x40
 800540a:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
  
  if (pdev->pClassData) 
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800541a:	2b00      	cmp	r3, #0
 800541c:	d009      	beq.n	8005432 <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	6852      	ldr	r2, [r2, #4]
 800542a:	b2d2      	uxtb	r2, r2
 800542c:	4611      	mov	r1, r2
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	4798      	blx	r3
 
  
  return USBD_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3708      	adds	r7, #8
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	460b      	mov	r3, r1
 8005446:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	78fa      	ldrb	r2, [r7, #3]
 800544c:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	bc80      	pop	{r7}
 8005458:	4770      	bx	lr

0800545a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800545a:	b480      	push	{r7}
 800545c:	b083      	sub	sp, #12
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 21fc 	ldrb.w	r2, [r3, #508]	@ 0x1fc
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f883 21fd 	strb.w	r2, [r3, #509]	@ 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2204      	movs	r2, #4
 8005472:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
  return USBD_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	bc80      	pop	{r7}
 8005480:	4770      	bx	lr

08005482 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 21fd 	ldrb.w	r2, [r3, #509]	@ 0x1fd
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
  return USBD_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	bc80      	pop	{r7}
 80054a0:	4770      	bx	lr

080054a2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b082      	sub	sp, #8
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 80054b0:	2b03      	cmp	r3, #3
 80054b2:	d10b      	bne.n	80054cc <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d005      	beq.n	80054cc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80054c6:	69db      	ldr	r3, [r3, #28]
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	4798      	blx	r3
    }
  }
  return USBD_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
	...

080054d8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 80054e2:	2300      	movs	r3, #0
 80054e4:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	785b      	ldrb	r3, [r3, #1]
 80054ea:	2b09      	cmp	r3, #9
 80054ec:	d839      	bhi.n	8005562 <USBD_StdDevReq+0x8a>
 80054ee:	a201      	add	r2, pc, #4	@ (adr r2, 80054f4 <USBD_StdDevReq+0x1c>)
 80054f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f4:	08005545 	.word	0x08005545
 80054f8:	08005559 	.word	0x08005559
 80054fc:	08005563 	.word	0x08005563
 8005500:	0800554f 	.word	0x0800554f
 8005504:	08005563 	.word	0x08005563
 8005508:	08005527 	.word	0x08005527
 800550c:	0800551d 	.word	0x0800551d
 8005510:	08005563 	.word	0x08005563
 8005514:	0800553b 	.word	0x0800553b
 8005518:	08005531 	.word	0x08005531
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 800551c:	6839      	ldr	r1, [r7, #0]
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f93a 	bl	8005798 <USBD_GetDescriptor>
    break;
 8005524:	e022      	b.n	800556c <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8005526:	6839      	ldr	r1, [r7, #0]
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 fa29 	bl	8005980 <USBD_SetAddress>
    break;
 800552e:	e01d      	b.n	800556c <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8005530:	6839      	ldr	r1, [r7, #0]
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 fa64 	bl	8005a00 <USBD_SetConfig>
    break;
 8005538:	e018      	b.n	800556c <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 800553a:	6839      	ldr	r1, [r7, #0]
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 fae7 	bl	8005b10 <USBD_GetConfig>
    break;
 8005542:	e013      	b.n	800556c <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8005544:	6839      	ldr	r1, [r7, #0]
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fb14 	bl	8005b74 <USBD_GetStatus>
    break;
 800554c:	e00e      	b.n	800556c <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 800554e:	6839      	ldr	r1, [r7, #0]
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 fb39 	bl	8005bc8 <USBD_SetFeature>
    break;
 8005556:	e009      	b.n	800556c <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8005558:	6839      	ldr	r1, [r7, #0]
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 fb4f 	bl	8005bfe <USBD_ClrFeature>
    break;
 8005560:	e004      	b.n	800556c <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 8005562:	6839      	ldr	r1, [r7, #0]
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 fbab 	bl	8005cc0 <USBD_CtlError>
    break;
 800556a:	bf00      	nop
  }
  
  return ret;
 800556c:	7bfb      	ldrb	r3, [r7, #15]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop

08005578 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 8005582:	2300      	movs	r3, #0
 8005584:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 800558c:	2b03      	cmp	r3, #3
 800558e:	d11b      	bne.n	80055c8 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	889b      	ldrh	r3, [r3, #4]
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b01      	cmp	r3, #1
 8005598:	d811      	bhi.n	80055be <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	6839      	ldr	r1, [r7, #0]
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	88db      	ldrh	r3, [r3, #6]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d110      	bne.n	80055d2 <USBD_StdItfReq+0x5a>
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10d      	bne.n	80055d2 <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 fc4b 	bl	8005e52 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 80055bc:	e009      	b.n	80055d2 <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 80055be:	6839      	ldr	r1, [r7, #0]
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 fb7d 	bl	8005cc0 <USBD_CtlError>
    break;
 80055c6:	e004      	b.n	80055d2 <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 80055c8:	6839      	ldr	r1, [r7, #0]
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 fb78 	bl	8005cc0 <USBD_CtlError>
    break;
 80055d0:	e000      	b.n	80055d4 <USBD_StdItfReq+0x5c>
    break;
 80055d2:	bf00      	nop
  }
  return USBD_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b084      	sub	sp, #16
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
 80055e6:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 80055e8:	2300      	movs	r3, #0
 80055ea:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	889b      	ldrh	r3, [r3, #4]
 80055f0:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80055fa:	2b20      	cmp	r3, #32
 80055fc:	d108      	bne.n	8005610 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	6839      	ldr	r1, [r7, #0]
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	4798      	blx	r3
    
    return USBD_OK;
 800560c:	2300      	movs	r3, #0
 800560e:	e0be      	b.n	800578e <USBD_StdEPReq+0x1b0>
  }
  
  switch (req->bRequest) 
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	785b      	ldrb	r3, [r3, #1]
 8005614:	2b03      	cmp	r3, #3
 8005616:	d007      	beq.n	8005628 <USBD_StdEPReq+0x4a>
 8005618:	2b03      	cmp	r3, #3
 800561a:	f300 80b6 	bgt.w	800578a <USBD_StdEPReq+0x1ac>
 800561e:	2b00      	cmp	r3, #0
 8005620:	d06d      	beq.n	80056fe <USBD_StdEPReq+0x120>
 8005622:	2b01      	cmp	r3, #1
 8005624:	d035      	beq.n	8005692 <USBD_StdEPReq+0xb4>
      break;
    }
    break;
    
  default:
    break;
 8005626:	e0b0      	b.n	800578a <USBD_StdEPReq+0x1ac>
    switch (pdev->dev_state) 
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 800562e:	2b02      	cmp	r3, #2
 8005630:	d002      	beq.n	8005638 <USBD_StdEPReq+0x5a>
 8005632:	2b03      	cmp	r3, #3
 8005634:	d00c      	beq.n	8005650 <USBD_StdEPReq+0x72>
 8005636:	e025      	b.n	8005684 <USBD_StdEPReq+0xa6>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8005638:	7bbb      	ldrb	r3, [r7, #14]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d027      	beq.n	800568e <USBD_StdEPReq+0xb0>
 800563e:	7bbb      	ldrb	r3, [r7, #14]
 8005640:	2b80      	cmp	r3, #128	@ 0x80
 8005642:	d024      	beq.n	800568e <USBD_StdEPReq+0xb0>
        USBD_LL_StallEP(pdev , ep_addr);
 8005644:	7bbb      	ldrb	r3, [r7, #14]
 8005646:	4619      	mov	r1, r3
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 ff53 	bl	80064f4 <USBD_LL_StallEP>
      break;	
 800564e:	e01e      	b.n	800568e <USBD_StdEPReq+0xb0>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	885b      	ldrh	r3, [r3, #2]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10a      	bne.n	800566e <USBD_StdEPReq+0x90>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8005658:	7bbb      	ldrb	r3, [r7, #14]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d007      	beq.n	800566e <USBD_StdEPReq+0x90>
 800565e:	7bbb      	ldrb	r3, [r7, #14]
 8005660:	2b80      	cmp	r3, #128	@ 0x80
 8005662:	d004      	beq.n	800566e <USBD_StdEPReq+0x90>
          USBD_LL_StallEP(pdev , ep_addr);
 8005664:	7bbb      	ldrb	r3, [r7, #14]
 8005666:	4619      	mov	r1, r3
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 ff43 	bl	80064f4 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	6839      	ldr	r1, [r7, #0]
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 fbe8 	bl	8005e52 <USBD_CtlSendStatus>
      break;
 8005682:	e005      	b.n	8005690 <USBD_StdEPReq+0xb2>
      USBD_CtlError(pdev , req);
 8005684:	6839      	ldr	r1, [r7, #0]
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 fb1a 	bl	8005cc0 <USBD_CtlError>
      break;    
 800568c:	e000      	b.n	8005690 <USBD_StdEPReq+0xb2>
      break;	
 800568e:	bf00      	nop
    break;
 8005690:	e07c      	b.n	800578c <USBD_StdEPReq+0x1ae>
    switch (pdev->dev_state) 
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 8005698:	2b02      	cmp	r3, #2
 800569a:	d002      	beq.n	80056a2 <USBD_StdEPReq+0xc4>
 800569c:	2b03      	cmp	r3, #3
 800569e:	d00c      	beq.n	80056ba <USBD_StdEPReq+0xdc>
 80056a0:	e024      	b.n	80056ec <USBD_StdEPReq+0x10e>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80056a2:	7bbb      	ldrb	r3, [r7, #14]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d026      	beq.n	80056f6 <USBD_StdEPReq+0x118>
 80056a8:	7bbb      	ldrb	r3, [r7, #14]
 80056aa:	2b80      	cmp	r3, #128	@ 0x80
 80056ac:	d023      	beq.n	80056f6 <USBD_StdEPReq+0x118>
        USBD_LL_StallEP(pdev , ep_addr);
 80056ae:	7bbb      	ldrb	r3, [r7, #14]
 80056b0:	4619      	mov	r1, r3
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 ff1e 	bl	80064f4 <USBD_LL_StallEP>
      break;	
 80056b8:	e01d      	b.n	80056f6 <USBD_StdEPReq+0x118>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	885b      	ldrh	r3, [r3, #2]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d11b      	bne.n	80056fa <USBD_StdEPReq+0x11c>
        if ((ep_addr & 0x7F) != 0x00) 
 80056c2:	7bbb      	ldrb	r3, [r7, #14]
 80056c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00b      	beq.n	80056e4 <USBD_StdEPReq+0x106>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80056cc:	7bbb      	ldrb	r3, [r7, #14]
 80056ce:	4619      	mov	r1, r3
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 ff45 	bl	8006560 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	6839      	ldr	r1, [r7, #0]
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 fbb4 	bl	8005e52 <USBD_CtlSendStatus>
      break;
 80056ea:	e006      	b.n	80056fa <USBD_StdEPReq+0x11c>
      USBD_CtlError(pdev , req);
 80056ec:	6839      	ldr	r1, [r7, #0]
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 fae6 	bl	8005cc0 <USBD_CtlError>
      break;    
 80056f4:	e002      	b.n	80056fc <USBD_StdEPReq+0x11e>
      break;	
 80056f6:	bf00      	nop
 80056f8:	e048      	b.n	800578c <USBD_StdEPReq+0x1ae>
      break;
 80056fa:	bf00      	nop
    break;
 80056fc:	e046      	b.n	800578c <USBD_StdEPReq+0x1ae>
    switch (pdev->dev_state) 
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 8005704:	2b02      	cmp	r3, #2
 8005706:	d002      	beq.n	800570e <USBD_StdEPReq+0x130>
 8005708:	2b03      	cmp	r3, #3
 800570a:	d00b      	beq.n	8005724 <USBD_StdEPReq+0x146>
 800570c:	e036      	b.n	800577c <USBD_StdEPReq+0x19e>
      if ((ep_addr & 0x7F) != 0x00) 
 800570e:	7bbb      	ldrb	r3, [r7, #14]
 8005710:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005714:	2b00      	cmp	r3, #0
 8005716:	d036      	beq.n	8005786 <USBD_StdEPReq+0x1a8>
        USBD_LL_StallEP(pdev , ep_addr);
 8005718:	7bbb      	ldrb	r3, [r7, #14]
 800571a:	4619      	mov	r1, r3
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 fee9 	bl	80064f4 <USBD_LL_StallEP>
      break;	
 8005722:	e030      	b.n	8005786 <USBD_StdEPReq+0x1a8>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8005724:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005728:	2b00      	cmp	r3, #0
 800572a:	da08      	bge.n	800573e <USBD_StdEPReq+0x160>
 800572c:	7bbb      	ldrb	r3, [r7, #14]
 800572e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005732:	3301      	adds	r3, #1
 8005734:	011b      	lsls	r3, r3, #4
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	4413      	add	r3, r2
 800573a:	3304      	adds	r3, #4
 800573c:	e007      	b.n	800574e <USBD_StdEPReq+0x170>
                                         &pdev->ep_out[ep_addr & 0x7F];
 800573e:	7bbb      	ldrb	r3, [r7, #14]
 8005740:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8005744:	3310      	adds	r3, #16
 8005746:	011b      	lsls	r3, r3, #4
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	4413      	add	r3, r2
 800574c:	3304      	adds	r3, #4
 800574e:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8005750:	7bbb      	ldrb	r3, [r7, #14]
 8005752:	4619      	mov	r1, r3
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 ff39 	bl	80065cc <USBD_LL_IsStallEP>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d003      	beq.n	8005768 <USBD_StdEPReq+0x18a>
        pep->status = 0x0001;     
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	2201      	movs	r2, #1
 8005764:	601a      	str	r2, [r3, #0]
 8005766:	e002      	b.n	800576e <USBD_StdEPReq+0x190>
        pep->status = 0x0000;  
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	2200      	movs	r2, #0
 800576c:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 800576e:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 8005770:	2202      	movs	r2, #2
 8005772:	4619      	mov	r1, r3
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 fb0e 	bl	8005d96 <USBD_CtlSendData>
      break;
 800577a:	e005      	b.n	8005788 <USBD_StdEPReq+0x1aa>
      USBD_CtlError(pdev , req);
 800577c:	6839      	ldr	r1, [r7, #0]
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 fa9e 	bl	8005cc0 <USBD_CtlError>
      break;
 8005784:	e000      	b.n	8005788 <USBD_StdEPReq+0x1aa>
      break;	
 8005786:	bf00      	nop
    break;
 8005788:	e000      	b.n	800578c <USBD_StdEPReq+0x1ae>
    break;
 800578a:	bf00      	nop
  }
  return ret;
 800578c:	7bfb      	ldrb	r3, [r7, #15]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
	...

08005798 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	885b      	ldrh	r3, [r3, #2]
 80057a6:	0a1b      	lsrs	r3, r3, #8
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	3b01      	subs	r3, #1
 80057ac:	2b06      	cmp	r3, #6
 80057ae:	f200 80c9 	bhi.w	8005944 <USBD_GetDescriptor+0x1ac>
 80057b2:	a201      	add	r2, pc, #4	@ (adr r2, 80057b8 <USBD_GetDescriptor+0x20>)
 80057b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b8:	080057d5 	.word	0x080057d5
 80057bc:	080057ed 	.word	0x080057ed
 80057c0:	0800582d 	.word	0x0800582d
 80057c4:	08005945 	.word	0x08005945
 80057c8:	08005945 	.word	0x08005945
 80057cc:	080058f1 	.word	0x080058f1
 80057d0:	08005917 	.word	0x08005917
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	7c12      	ldrb	r2, [r2, #16]
 80057e0:	f107 010a 	add.w	r1, r7, #10
 80057e4:	4610      	mov	r0, r2
 80057e6:	4798      	blx	r3
 80057e8:	60f8      	str	r0, [r7, #12]
    break;
 80057ea:	e0b0      	b.n	800594e <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	7c1b      	ldrb	r3, [r3, #16]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10d      	bne.n	8005810 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80057fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057fc:	f107 020a 	add.w	r2, r7, #10
 8005800:	4610      	mov	r0, r2
 8005802:	4798      	blx	r3
 8005804:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	3301      	adds	r3, #1
 800580a:	2202      	movs	r2, #2
 800580c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800580e:	e09e      	b.n	800594e <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005818:	f107 020a 	add.w	r2, r7, #10
 800581c:	4610      	mov	r0, r2
 800581e:	4798      	blx	r3
 8005820:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	3301      	adds	r3, #1
 8005826:	2202      	movs	r2, #2
 8005828:	701a      	strb	r2, [r3, #0]
    break;
 800582a:	e090      	b.n	800594e <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	885b      	ldrh	r3, [r3, #2]
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b05      	cmp	r3, #5
 8005834:	d856      	bhi.n	80058e4 <USBD_GetDescriptor+0x14c>
 8005836:	a201      	add	r2, pc, #4	@ (adr r2, 800583c <USBD_GetDescriptor+0xa4>)
 8005838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583c:	08005855 	.word	0x08005855
 8005840:	0800586d 	.word	0x0800586d
 8005844:	08005885 	.word	0x08005885
 8005848:	0800589d 	.word	0x0800589d
 800584c:	080058b5 	.word	0x080058b5
 8005850:	080058cd 	.word	0x080058cd
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	7c12      	ldrb	r2, [r2, #16]
 8005860:	f107 010a 	add.w	r1, r7, #10
 8005864:	4610      	mov	r0, r2
 8005866:	4798      	blx	r3
 8005868:	60f8      	str	r0, [r7, #12]
      break;
 800586a:	e040      	b.n	80058ee <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	7c12      	ldrb	r2, [r2, #16]
 8005878:	f107 010a 	add.w	r1, r7, #10
 800587c:	4610      	mov	r0, r2
 800587e:	4798      	blx	r3
 8005880:	60f8      	str	r0, [r7, #12]
      break;
 8005882:	e034      	b.n	80058ee <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	7c12      	ldrb	r2, [r2, #16]
 8005890:	f107 010a 	add.w	r1, r7, #10
 8005894:	4610      	mov	r0, r2
 8005896:	4798      	blx	r3
 8005898:	60f8      	str	r0, [r7, #12]
      break;
 800589a:	e028      	b.n	80058ee <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	7c12      	ldrb	r2, [r2, #16]
 80058a8:	f107 010a 	add.w	r1, r7, #10
 80058ac:	4610      	mov	r0, r2
 80058ae:	4798      	blx	r3
 80058b0:	60f8      	str	r0, [r7, #12]
      break;
 80058b2:	e01c      	b.n	80058ee <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	7c12      	ldrb	r2, [r2, #16]
 80058c0:	f107 010a 	add.w	r1, r7, #10
 80058c4:	4610      	mov	r0, r2
 80058c6:	4798      	blx	r3
 80058c8:	60f8      	str	r0, [r7, #12]
      break;
 80058ca:	e010      	b.n	80058ee <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	7c12      	ldrb	r2, [r2, #16]
 80058d8:	f107 010a 	add.w	r1, r7, #10
 80058dc:	4610      	mov	r0, r2
 80058de:	4798      	blx	r3
 80058e0:	60f8      	str	r0, [r7, #12]
      break;
 80058e2:	e004      	b.n	80058ee <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 80058e4:	6839      	ldr	r1, [r7, #0]
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f9ea 	bl	8005cc0 <USBD_CtlError>
      return;
 80058ec:	e044      	b.n	8005978 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 80058ee:	e02e      	b.n	800594e <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	7c1b      	ldrb	r3, [r3, #16]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d109      	bne.n	800590c <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80058fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005900:	f107 020a 	add.w	r2, r7, #10
 8005904:	4610      	mov	r0, r2
 8005906:	4798      	blx	r3
 8005908:	60f8      	str	r0, [r7, #12]
      break;
 800590a:	e020      	b.n	800594e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800590c:	6839      	ldr	r1, [r7, #0]
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f9d6 	bl	8005cc0 <USBD_CtlError>
      return;
 8005914:	e030      	b.n	8005978 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	7c1b      	ldrb	r3, [r3, #16]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10d      	bne.n	800593a <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005926:	f107 020a 	add.w	r2, r7, #10
 800592a:	4610      	mov	r0, r2
 800592c:	4798      	blx	r3
 800592e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	3301      	adds	r3, #1
 8005934:	2207      	movs	r2, #7
 8005936:	701a      	strb	r2, [r3, #0]
      break; 
 8005938:	e009      	b.n	800594e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800593a:	6839      	ldr	r1, [r7, #0]
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 f9bf 	bl	8005cc0 <USBD_CtlError>
      return;
 8005942:	e019      	b.n	8005978 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 8005944:	6839      	ldr	r1, [r7, #0]
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f9ba 	bl	8005cc0 <USBD_CtlError>
    return;
 800594c:	e014      	b.n	8005978 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 800594e:	897b      	ldrh	r3, [r7, #10]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d011      	beq.n	8005978 <USBD_GetDescriptor+0x1e0>
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	88db      	ldrh	r3, [r3, #6]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00d      	beq.n	8005978 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	88da      	ldrh	r2, [r3, #6]
 8005960:	897b      	ldrh	r3, [r7, #10]
 8005962:	4293      	cmp	r3, r2
 8005964:	bf28      	it	cs
 8005966:	4613      	movcs	r3, r2
 8005968:	b29b      	uxth	r3, r3
 800596a:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 800596c:	897b      	ldrh	r3, [r7, #10]
 800596e:	461a      	mov	r2, r3
 8005970:	68f9      	ldr	r1, [r7, #12]
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 fa0f 	bl	8005d96 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop

08005980 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	889b      	ldrh	r3, [r3, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d12c      	bne.n	80059ec <USBD_SetAddress+0x6c>
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	88db      	ldrh	r3, [r3, #6]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d128      	bne.n	80059ec <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	885b      	ldrh	r3, [r3, #2]
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059a4:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 80059ac:	2b03      	cmp	r3, #3
 80059ae:	d104      	bne.n	80059ba <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 80059b0:	6839      	ldr	r1, [r7, #0]
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f984 	bl	8005cc0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80059b8:	e01d      	b.n	80059f6 <USBD_SetAddress+0x76>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	7bfa      	ldrb	r2, [r7, #15]
 80059be:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80059c2:	7bfb      	ldrb	r3, [r7, #15]
 80059c4:	4619      	mov	r1, r3
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 fe26 	bl	8006618 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 fa40 	bl	8005e52 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 80059d2:	7bfb      	ldrb	r3, [r7, #15]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d004      	beq.n	80059e2 <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2202      	movs	r2, #2
 80059dc:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80059e0:	e009      	b.n	80059f6 <USBD_SetAddress+0x76>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80059ea:	e004      	b.n	80059f6 <USBD_SetAddress+0x76>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 80059ec:	6839      	ldr	r1, [r7, #0]
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f966 	bl	8005cc0 <USBD_CtlError>
  } 
}
 80059f4:	bf00      	nop
 80059f6:	bf00      	nop
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
	...

08005a00 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	885b      	ldrh	r3, [r3, #2]
 8005a0e:	b2da      	uxtb	r2, r3
 8005a10:	4b3e      	ldr	r3, [pc, #248]	@ (8005b0c <USBD_SetConfig+0x10c>)
 8005a12:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8005a14:	4b3d      	ldr	r3, [pc, #244]	@ (8005b0c <USBD_SetConfig+0x10c>)
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d904      	bls.n	8005a26 <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 8005a1c:	6839      	ldr	r1, [r7, #0]
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f94e 	bl	8005cc0 <USBD_CtlError>
 8005a24:	e06f      	b.n	8005b06 <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d002      	beq.n	8005a36 <USBD_SetConfig+0x36>
 8005a30:	2b03      	cmp	r3, #3
 8005a32:	d023      	beq.n	8005a7c <USBD_SetConfig+0x7c>
 8005a34:	e062      	b.n	8005afc <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8005a36:	4b35      	ldr	r3, [pc, #212]	@ (8005b0c <USBD_SetConfig+0x10c>)
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d01a      	beq.n	8005a74 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8005a3e:	4b33      	ldr	r3, [pc, #204]	@ (8005b0c <USBD_SetConfig+0x10c>)
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	461a      	mov	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2203      	movs	r2, #3
 8005a4c:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8005a50:	4b2e      	ldr	r3, [pc, #184]	@ (8005b0c <USBD_SetConfig+0x10c>)
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	4619      	mov	r1, r3
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7ff fb58 	bl	800510c <USBD_SetClassConfig>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d104      	bne.n	8005a6c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 8005a62:	6839      	ldr	r1, [r7, #0]
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 f92b 	bl	8005cc0 <USBD_CtlError>
          return;
 8005a6a:	e04c      	b.n	8005b06 <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 f9f0 	bl	8005e52 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 8005a72:	e048      	b.n	8005b06 <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 f9ec 	bl	8005e52 <USBD_CtlSendStatus>
      break;
 8005a7a:	e044      	b.n	8005b06 <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8005a7c:	4b23      	ldr	r3, [pc, #140]	@ (8005b0c <USBD_SetConfig+0x10c>)
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d112      	bne.n	8005aaa <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
        pdev->dev_config = cfgidx;          
 8005a8c:	4b1f      	ldr	r3, [pc, #124]	@ (8005b0c <USBD_SetConfig+0x10c>)
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	461a      	mov	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8005a96:	4b1d      	ldr	r3, [pc, #116]	@ (8005b0c <USBD_SetConfig+0x10c>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7ff fb54 	bl	800514a <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f9d5 	bl	8005e52 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8005aa8:	e02d      	b.n	8005b06 <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 8005aaa:	4b18      	ldr	r3, [pc, #96]	@ (8005b0c <USBD_SetConfig+0x10c>)
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d01d      	beq.n	8005af4 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	4619      	mov	r1, r3
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f7ff fb42 	bl	800514a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005ac6:	4b11      	ldr	r3, [pc, #68]	@ (8005b0c <USBD_SetConfig+0x10c>)
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	461a      	mov	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8005ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8005b0c <USBD_SetConfig+0x10c>)
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7ff fb18 	bl	800510c <USBD_SetClassConfig>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d104      	bne.n	8005aec <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 8005ae2:	6839      	ldr	r1, [r7, #0]
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f8eb 	bl	8005cc0 <USBD_CtlError>
          return;
 8005aea:	e00c      	b.n	8005b06 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f9b0 	bl	8005e52 <USBD_CtlSendStatus>
      break;
 8005af2:	e008      	b.n	8005b06 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 f9ac 	bl	8005e52 <USBD_CtlSendStatus>
      break;
 8005afa:	e004      	b.n	8005b06 <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8005afc:	6839      	ldr	r1, [r7, #0]
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f8de 	bl	8005cc0 <USBD_CtlError>
      break;
 8005b04:	bf00      	nop
    }
  }
}
 8005b06:	3708      	adds	r7, #8
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	20000a7d 	.word	0x20000a7d

08005b10 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	88db      	ldrh	r3, [r3, #6]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d004      	beq.n	8005b2c <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 8005b22:	6839      	ldr	r1, [r7, #0]
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 f8cb 	bl	8005cc0 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8005b2a:	e01f      	b.n	8005b6c <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d002      	beq.n	8005b3c <USBD_GetConfig+0x2c>
 8005b36:	2b03      	cmp	r3, #3
 8005b38:	d00b      	beq.n	8005b52 <USBD_GetConfig+0x42>
 8005b3a:	e012      	b.n	8005b62 <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 8005b46:	2201      	movs	r2, #1
 8005b48:	4619      	mov	r1, r3
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f923 	bl	8005d96 <USBD_CtlSendData>
      break;
 8005b50:	e00c      	b.n	8005b6c <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 8005b56:	2201      	movs	r2, #1
 8005b58:	4619      	mov	r1, r3
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f91b 	bl	8005d96 <USBD_CtlSendData>
      break;
 8005b60:	e004      	b.n	8005b6c <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 8005b62:	6839      	ldr	r1, [r7, #0]
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 f8ab 	bl	8005cc0 <USBD_CtlError>
      break;
 8005b6a:	bf00      	nop
}
 8005b6c:	bf00      	nop
 8005b6e:	3708      	adds	r7, #8
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 8005b84:	3b02      	subs	r3, #2
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d815      	bhi.n	8005bb6 <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d005      	beq.n	8005ba6 <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	f043 0202 	orr.w	r2, r3, #2
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 8005baa:	2202      	movs	r2, #2
 8005bac:	4619      	mov	r1, r3
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f8f1 	bl	8005d96 <USBD_CtlSendData>
                      2);
    break;
 8005bb4:	e004      	b.n	8005bc0 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 8005bb6:	6839      	ldr	r1, [r7, #0]
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f881 	bl	8005cc0 <USBD_CtlError>
    break;
 8005bbe:	bf00      	nop
  }
}
 8005bc0:	bf00      	nop
 8005bc2:	3708      	adds	r7, #8
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	885b      	ldrh	r3, [r3, #2]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d10d      	bne.n	8005bf6 <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    pdev->pClass->Setup (pdev, req);   
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	6839      	ldr	r1, [r7, #0]
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 f92e 	bl	8005e52 <USBD_CtlSendStatus>
  }

}
 8005bf6:	bf00      	nop
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b082      	sub	sp, #8
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 8005c0e:	3b02      	subs	r3, #2
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d812      	bhi.n	8005c3a <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	885b      	ldrh	r3, [r3, #2]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d113      	bne.n	8005c44 <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      pdev->pClass->Setup (pdev, req);   
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	6839      	ldr	r1, [r7, #0]
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f90d 	bl	8005e52 <USBD_CtlSendStatus>
    }
    break;
 8005c38:	e004      	b.n	8005c44 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 8005c3a:	6839      	ldr	r1, [r7, #0]
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 f83f 	bl	8005cc0 <USBD_CtlError>
    break;
 8005c42:	e000      	b.n	8005c46 <USBD_ClrFeature+0x48>
    break;
 8005c44:	bf00      	nop
  }
}
 8005c46:	bf00      	nop
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
 8005c56:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	781a      	ldrb	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	785a      	ldrb	r2, [r3, #1]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	3302      	adds	r3, #2
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	461a      	mov	r2, r3
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	3303      	adds	r3, #3
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	021b      	lsls	r3, r3, #8
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	4413      	add	r3, r2
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	3304      	adds	r3, #4
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	461a      	mov	r2, r3
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	3305      	adds	r3, #5
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	021b      	lsls	r3, r3, #8
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	4413      	add	r3, r2
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	3306      	adds	r3, #6
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	3307      	adds	r3, #7
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	021b      	lsls	r3, r3, #8
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	4413      	add	r3, r2
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	80da      	strh	r2, [r3, #6]

}
 8005cb6:	bf00      	nop
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bc80      	pop	{r7}
 8005cbe:	4770      	bx	lr

08005cc0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 8005cca:	2180      	movs	r1, #128	@ 0x80
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 fc11 	bl	80064f4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 fc0d 	bl	80064f4 <USBD_LL_StallEP>
}
 8005cda:	bf00      	nop
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b086      	sub	sp, #24
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	60f8      	str	r0, [r7, #12]
 8005cea:	60b9      	str	r1, [r7, #8]
 8005cec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d033      	beq.n	8005d60 <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f000 f835 	bl	8005d68 <USBD_GetLen>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	3301      	adds	r3, #1
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	881a      	ldrh	r2, [r3, #0]
 8005d10:	7dfb      	ldrb	r3, [r7, #23]
 8005d12:	1c59      	adds	r1, r3, #1
 8005d14:	75f9      	strb	r1, [r7, #23]
 8005d16:	4619      	mov	r1, r3
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	440b      	add	r3, r1
 8005d1c:	b2d2      	uxtb	r2, r2
 8005d1e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8005d20:	7dfb      	ldrb	r3, [r7, #23]
 8005d22:	1c5a      	adds	r2, r3, #1
 8005d24:	75fa      	strb	r2, [r7, #23]
 8005d26:	461a      	mov	r2, r3
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	2203      	movs	r2, #3
 8005d2e:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 8005d30:	e012      	b.n	8005d58 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	60fa      	str	r2, [r7, #12]
 8005d38:	7dfa      	ldrb	r2, [r7, #23]
 8005d3a:	1c51      	adds	r1, r2, #1
 8005d3c:	75f9      	strb	r1, [r7, #23]
 8005d3e:	4611      	mov	r1, r2
 8005d40:	68ba      	ldr	r2, [r7, #8]
 8005d42:	440a      	add	r2, r1
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 8005d48:	7dfb      	ldrb	r3, [r7, #23]
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	75fa      	strb	r2, [r7, #23]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	4413      	add	r3, r2
 8005d54:	2200      	movs	r2, #0
 8005d56:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1e8      	bne.n	8005d32 <USBD_GetString+0x50>
    }
  } 
}
 8005d60:	bf00      	nop
 8005d62:	3718      	adds	r7, #24
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8005d70:	2300      	movs	r3, #0
 8005d72:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 8005d74:	e005      	b.n	8005d82 <USBD_GetLen+0x1a>
    {
        len++;
 8005d76:	7bfb      	ldrb	r3, [r7, #15]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	73fb      	strb	r3, [r7, #15]
        buf++;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1f5      	bne.n	8005d76 <USBD_GetLen+0xe>
    }

    return len;
 8005d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3714      	adds	r7, #20
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bc80      	pop	{r7}
 8005d94:	4770      	bx	lr

08005d96 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b084      	sub	sp, #16
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	60f8      	str	r0, [r7, #12]
 8005d9e:	60b9      	str	r1, [r7, #8]
 8005da0:	4613      	mov	r3, r2
 8005da2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2202      	movs	r2, #2
 8005da8:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4
  pdev->ep_in[0].total_length = len;
 8005dac:	88fa      	ldrh	r2, [r7, #6]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8005db2:	88fa      	ldrh	r2, [r7, #6]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8005db8:	88fb      	ldrh	r3, [r7, #6]
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f000 fc60 	bl	8006684 <USBD_LL_Transmit>
  
  return USBD_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b084      	sub	sp, #16
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	60f8      	str	r0, [r7, #12]
 8005dd6:	60b9      	str	r1, [r7, #8]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8005ddc:	88fb      	ldrh	r3, [r7, #6]
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	2100      	movs	r1, #0
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 fc4e 	bl	8006684 <USBD_LL_Transmit>
  
  return USBD_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b084      	sub	sp, #16
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	60f8      	str	r0, [r7, #12]
 8005dfa:	60b9      	str	r1, [r7, #8]
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2203      	movs	r2, #3
 8005e04:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4
  pdev->ep_out[0].total_length = len;
 8005e08:	88fa      	ldrh	r2, [r7, #6]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  pdev->ep_out[0].rem_length   = len;
 8005e10:	88fa      	ldrh	r2, [r7, #6]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8005e18:	88fb      	ldrh	r3, [r7, #6]
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f000 fc6a 	bl	80066f8 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3710      	adds	r7, #16
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b084      	sub	sp, #16
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	60f8      	str	r0, [r7, #12]
 8005e36:	60b9      	str	r1, [r7, #8]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 8005e3c:	88fb      	ldrh	r3, [r7, #6]
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	2100      	movs	r1, #0
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f000 fc58 	bl	80066f8 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b082      	sub	sp, #8
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2204      	movs	r2, #4
 8005e5e:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8005e62:	2300      	movs	r3, #0
 8005e64:	2200      	movs	r2, #0
 8005e66:	2100      	movs	r1, #0
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 fc0b 	bl	8006684 <USBD_LL_Transmit>
  
  return USBD_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2205      	movs	r2, #5
 8005e84:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8005e88:	2300      	movs	r3, #0
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 fc32 	bl	80066f8 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
	...

08005ea0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	4908      	ldr	r1, [pc, #32]	@ (8005ec8 <MX_USB_DEVICE_Init+0x28>)
 8005ea8:	4808      	ldr	r0, [pc, #32]	@ (8005ecc <MX_USB_DEVICE_Init+0x2c>)
 8005eaa:	f7ff f8d5 	bl	8005058 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8005eae:	4908      	ldr	r1, [pc, #32]	@ (8005ed0 <MX_USB_DEVICE_Init+0x30>)
 8005eb0:	4806      	ldr	r0, [pc, #24]	@ (8005ecc <MX_USB_DEVICE_Init+0x2c>)
 8005eb2:	f7ff f8fc 	bl	80050ae <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8005eb6:	4907      	ldr	r1, [pc, #28]	@ (8005ed4 <MX_USB_DEVICE_Init+0x34>)
 8005eb8:	4804      	ldr	r0, [pc, #16]	@ (8005ecc <MX_USB_DEVICE_Init+0x2c>)
 8005eba:	f7ff f861 	bl	8004f80 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8005ebe:	4803      	ldr	r0, [pc, #12]	@ (8005ecc <MX_USB_DEVICE_Init+0x2c>)
 8005ec0:	f7ff f90e 	bl	80050e0 <USBD_Start>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005ec4:	bf00      	nop
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	200009e0 	.word	0x200009e0
 8005ecc:	20000a80 	.word	0x20000a80
 8005ed0:	200008cc 	.word	0x200008cc
 8005ed4:	200009d0 	.word	0x200009d0

08005ed8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005edc:	2200      	movs	r2, #0
 8005ede:	4905      	ldr	r1, [pc, #20]	@ (8005ef4 <CDC_Init_FS+0x1c>)
 8005ee0:	4805      	ldr	r0, [pc, #20]	@ (8005ef8 <CDC_Init_FS+0x20>)
 8005ee2:	f7ff f863 	bl	8004fac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005ee6:	4905      	ldr	r1, [pc, #20]	@ (8005efc <CDC_Init_FS+0x24>)
 8005ee8:	4803      	ldr	r0, [pc, #12]	@ (8005ef8 <CDC_Init_FS+0x20>)
 8005eea:	f7ff f878 	bl	8004fde <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005eee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	2000108c 	.word	0x2000108c
 8005ef8:	20000a80 	.word	0x20000a80
 8005efc:	20000ca4 	.word	0x20000ca4

08005f00 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005f00:	b480      	push	{r7}
 8005f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005f04:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bc80      	pop	{r7}
 8005f0c:	4770      	bx	lr
	...

08005f10 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	4603      	mov	r3, r0
 8005f18:	6039      	str	r1, [r7, #0]
 8005f1a:	71fb      	strb	r3, [r7, #7]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005f20:	79fb      	ldrb	r3, [r7, #7]
 8005f22:	2b23      	cmp	r3, #35	@ 0x23
 8005f24:	d84d      	bhi.n	8005fc2 <CDC_Control_FS+0xb2>
 8005f26:	a201      	add	r2, pc, #4	@ (adr r2, 8005f2c <CDC_Control_FS+0x1c>)
 8005f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2c:	08005fc3 	.word	0x08005fc3
 8005f30:	08005fc3 	.word	0x08005fc3
 8005f34:	08005fc3 	.word	0x08005fc3
 8005f38:	08005fc3 	.word	0x08005fc3
 8005f3c:	08005fc3 	.word	0x08005fc3
 8005f40:	08005fc3 	.word	0x08005fc3
 8005f44:	08005fc3 	.word	0x08005fc3
 8005f48:	08005fc3 	.word	0x08005fc3
 8005f4c:	08005fc3 	.word	0x08005fc3
 8005f50:	08005fc3 	.word	0x08005fc3
 8005f54:	08005fc3 	.word	0x08005fc3
 8005f58:	08005fc3 	.word	0x08005fc3
 8005f5c:	08005fc3 	.word	0x08005fc3
 8005f60:	08005fc3 	.word	0x08005fc3
 8005f64:	08005fc3 	.word	0x08005fc3
 8005f68:	08005fc3 	.word	0x08005fc3
 8005f6c:	08005fc3 	.word	0x08005fc3
 8005f70:	08005fc3 	.word	0x08005fc3
 8005f74:	08005fc3 	.word	0x08005fc3
 8005f78:	08005fc3 	.word	0x08005fc3
 8005f7c:	08005fc3 	.word	0x08005fc3
 8005f80:	08005fc3 	.word	0x08005fc3
 8005f84:	08005fc3 	.word	0x08005fc3
 8005f88:	08005fc3 	.word	0x08005fc3
 8005f8c:	08005fc3 	.word	0x08005fc3
 8005f90:	08005fc3 	.word	0x08005fc3
 8005f94:	08005fc3 	.word	0x08005fc3
 8005f98:	08005fc3 	.word	0x08005fc3
 8005f9c:	08005fc3 	.word	0x08005fc3
 8005fa0:	08005fc3 	.word	0x08005fc3
 8005fa4:	08005fc3 	.word	0x08005fc3
 8005fa8:	08005fc3 	.word	0x08005fc3
 8005fac:	08005fc3 	.word	0x08005fc3
 8005fb0:	08005fc3 	.word	0x08005fc3
 8005fb4:	08005fc3 	.word	0x08005fc3
 8005fb8:	08005fbd 	.word	0x08005fbd
    case CDC_SET_CONTROL_LINE_STATE:

    break;

    case CDC_SEND_BREAK:
      CDC_Break_Callback();
 8005fbc:	f7fa f960 	bl	8000280 <CDC_Break_Callback>
    break;
 8005fc0:	e000      	b.n	8005fc4 <CDC_Control_FS+0xb4>

  default:
    break;
 8005fc2:	bf00      	nop
  }

  return (USBD_OK);
 8005fc4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3708      	adds	r7, #8
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop

08005fd0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005fda:	6879      	ldr	r1, [r7, #4]
 8005fdc:	4808      	ldr	r0, [pc, #32]	@ (8006000 <CDC_Receive_FS+0x30>)
 8005fde:	f7fe fffe 	bl	8004fde <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005fe2:	4807      	ldr	r0, [pc, #28]	@ (8006000 <CDC_Receive_FS+0x30>)
 8005fe4:	f7ff f80e 	bl	8005004 <USBD_CDC_ReceivePacket>
  CDC_Receive_Callback(Buf, *Len);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4619      	mov	r1, r3
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f7fa f952 	bl	8000298 <CDC_Receive_Callback>
  return (USBD_OK);
 8005ff4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3708      	adds	r7, #8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	20000a80 	.word	0x20000a80

08006004 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	4603      	mov	r3, r0
 800600c:	6039      	str	r1, [r7, #0]
 800600e:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	2212      	movs	r2, #18
 8006014:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006016:	4b03      	ldr	r3, [pc, #12]	@ (8006024 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006018:	4618      	mov	r0, r3
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	bc80      	pop	{r7}
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	200009fc 	.word	0x200009fc

08006028 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	4603      	mov	r3, r0
 8006030:	6039      	str	r1, [r7, #0]
 8006032:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	2204      	movs	r2, #4
 8006038:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800603a:	4b03      	ldr	r3, [pc, #12]	@ (8006048 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800603c:	4618      	mov	r0, r3
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	bc80      	pop	{r7}
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	20000a10 	.word	0x20000a10

0800604c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	4603      	mov	r3, r0
 8006054:	6039      	str	r1, [r7, #0]
 8006056:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006058:	79fb      	ldrb	r3, [r7, #7]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d105      	bne.n	800606a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	4907      	ldr	r1, [pc, #28]	@ (8006080 <USBD_FS_ProductStrDescriptor+0x34>)
 8006062:	4808      	ldr	r0, [pc, #32]	@ (8006084 <USBD_FS_ProductStrDescriptor+0x38>)
 8006064:	f7ff fe3d 	bl	8005ce2 <USBD_GetString>
 8006068:	e004      	b.n	8006074 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	4904      	ldr	r1, [pc, #16]	@ (8006080 <USBD_FS_ProductStrDescriptor+0x34>)
 800606e:	4805      	ldr	r0, [pc, #20]	@ (8006084 <USBD_FS_ProductStrDescriptor+0x38>)
 8006070:	f7ff fe37 	bl	8005ce2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006074:	4b02      	ldr	r3, [pc, #8]	@ (8006080 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006076:	4618      	mov	r0, r3
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	20001474 	.word	0x20001474
 8006084:	080069dc 	.word	0x080069dc

08006088 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	4603      	mov	r3, r0
 8006090:	6039      	str	r1, [r7, #0]
 8006092:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	4904      	ldr	r1, [pc, #16]	@ (80060a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006098:	4804      	ldr	r0, [pc, #16]	@ (80060ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800609a:	f7ff fe22 	bl	8005ce2 <USBD_GetString>
  return USBD_StrDesc;
 800609e:	4b02      	ldr	r3, [pc, #8]	@ (80060a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	20001474 	.word	0x20001474
 80060ac:	080069ec 	.word	0x080069ec

080060b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	4603      	mov	r3, r0
 80060b8:	6039      	str	r1, [r7, #0]
 80060ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80060bc:	79fb      	ldrb	r3, [r7, #7]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d105      	bne.n	80060ce <USBD_FS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 80060c2:	683a      	ldr	r2, [r7, #0]
 80060c4:	4907      	ldr	r1, [pc, #28]	@ (80060e4 <USBD_FS_SerialStrDescriptor+0x34>)
 80060c6:	4808      	ldr	r0, [pc, #32]	@ (80060e8 <USBD_FS_SerialStrDescriptor+0x38>)
 80060c8:	f7ff fe0b 	bl	8005ce2 <USBD_GetString>
 80060cc:	e004      	b.n	80060d8 <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	4904      	ldr	r1, [pc, #16]	@ (80060e4 <USBD_FS_SerialStrDescriptor+0x34>)
 80060d2:	4805      	ldr	r0, [pc, #20]	@ (80060e8 <USBD_FS_SerialStrDescriptor+0x38>)
 80060d4:	f7ff fe05 	bl	8005ce2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80060d8:	4b02      	ldr	r3, [pc, #8]	@ (80060e4 <USBD_FS_SerialStrDescriptor+0x34>)
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3708      	adds	r7, #8
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	20001474 	.word	0x20001474
 80060e8:	080069f8 	.word	0x080069f8

080060ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	4603      	mov	r3, r0
 80060f4:	6039      	str	r1, [r7, #0]
 80060f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80060f8:	79fb      	ldrb	r3, [r7, #7]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d105      	bne.n	800610a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	4907      	ldr	r1, [pc, #28]	@ (8006120 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006102:	4808      	ldr	r0, [pc, #32]	@ (8006124 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006104:	f7ff fded 	bl	8005ce2 <USBD_GetString>
 8006108:	e004      	b.n	8006114 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	4904      	ldr	r1, [pc, #16]	@ (8006120 <USBD_FS_ConfigStrDescriptor+0x34>)
 800610e:	4805      	ldr	r0, [pc, #20]	@ (8006124 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006110:	f7ff fde7 	bl	8005ce2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006114:	4b02      	ldr	r3, [pc, #8]	@ (8006120 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006116:	4618      	mov	r0, r3
 8006118:	3708      	adds	r7, #8
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	20001474 	.word	0x20001474
 8006124:	08006a08 	.word	0x08006a08

08006128 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	4603      	mov	r3, r0
 8006130:	6039      	str	r1, [r7, #0]
 8006132:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006134:	79fb      	ldrb	r3, [r7, #7]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d105      	bne.n	8006146 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800613a:	683a      	ldr	r2, [r7, #0]
 800613c:	4907      	ldr	r1, [pc, #28]	@ (800615c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800613e:	4808      	ldr	r0, [pc, #32]	@ (8006160 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006140:	f7ff fdcf 	bl	8005ce2 <USBD_GetString>
 8006144:	e004      	b.n	8006150 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	4904      	ldr	r1, [pc, #16]	@ (800615c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800614a:	4805      	ldr	r0, [pc, #20]	@ (8006160 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800614c:	f7ff fdc9 	bl	8005ce2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006150:	4b02      	ldr	r3, [pc, #8]	@ (800615c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006152:	4618      	mov	r0, r3
 8006154:	3708      	adds	r7, #8
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	20001474 	.word	0x20001474
 8006160:	08006a14 	.word	0x08006a14

08006164 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a0d      	ldr	r2, [pc, #52]	@ (80061a8 <HAL_PCD_MspInit+0x44>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d113      	bne.n	800619e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006176:	4b0d      	ldr	r3, [pc, #52]	@ (80061ac <HAL_PCD_MspInit+0x48>)
 8006178:	69db      	ldr	r3, [r3, #28]
 800617a:	4a0c      	ldr	r2, [pc, #48]	@ (80061ac <HAL_PCD_MspInit+0x48>)
 800617c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006180:	61d3      	str	r3, [r2, #28]
 8006182:	4b0a      	ldr	r3, [pc, #40]	@ (80061ac <HAL_PCD_MspInit+0x48>)
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800618a:	60fb      	str	r3, [r7, #12]
 800618c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800618e:	2200      	movs	r2, #0
 8006190:	2100      	movs	r1, #0
 8006192:	2014      	movs	r0, #20
 8006194:	f7fa fde6 	bl	8000d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006198:	2014      	movs	r0, #20
 800619a:	f7fa fe0f 	bl	8000dbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800619e:	bf00      	nop
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	40005c00 	.word	0x40005c00
 80061ac:	40021000 	.word	0x40021000

080061b0 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 245c 	ldr.w	r2, [r3, #1116]	@ 0x45c
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f203 432c 	addw	r3, r3, #1068	@ 0x42c
 80061c4:	4619      	mov	r1, r3
 80061c6:	4610      	mov	r0, r2
 80061c8:	f7fe ffd2 	bl	8005170 <USBD_LL_SetupStage>
}
 80061cc:	bf00      	nop
 80061ce:	3708      	adds	r7, #8
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	460b      	mov	r3, r1
 80061de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 045c 	ldr.w	r0, [r3, #1116]	@ 0x45c
 80061e6:	78fb      	ldrb	r3, [r7, #3]
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	015b      	lsls	r3, r3, #5
 80061ec:	4413      	add	r3, r2
 80061ee:	f503 730f 	add.w	r3, r3, #572	@ 0x23c
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	78fb      	ldrb	r3, [r7, #3]
 80061f6:	4619      	mov	r1, r3
 80061f8:	f7ff f807 	bl	800520a <USBD_LL_DataOutStage>
}
 80061fc:	bf00      	nop
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	460b      	mov	r3, r1
 800620e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 045c 	ldr.w	r0, [r3, #1116]	@ 0x45c
 8006216:	78fb      	ldrb	r3, [r7, #3]
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	015b      	lsls	r3, r3, #5
 800621c:	4413      	add	r3, r2
 800621e:	333c      	adds	r3, #60	@ 0x3c
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	78fb      	ldrb	r3, [r7, #3]
 8006224:	4619      	mov	r1, r3
 8006226:	f7ff f84b 	bl	80052c0 <USBD_LL_DataInStage>
}
 800622a:	bf00      	nop
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b082      	sub	sp, #8
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8d3 345c 	ldr.w	r3, [r3, #1116]	@ 0x45c
 8006240:	4618      	mov	r0, r3
 8006242:	f7ff f92e 	bl	80054a2 <USBD_LL_SOF>
}
 8006246:	bf00      	nop
 8006248:	3708      	adds	r7, #8
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800624e:	b580      	push	{r7, lr}
 8006250:	b084      	sub	sp, #16
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006256:	2301      	movs	r3, #1
 8006258:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	2b02      	cmp	r3, #2
 8006260:	d102      	bne.n	8006268 <HAL_PCD_ResetCallback+0x1a>
  {
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 8006262:	2301      	movs	r3, #1
 8006264:	73fb      	strb	r3, [r7, #15]
    break;
 8006266:	e002      	b.n	800626e <HAL_PCD_ResetCallback+0x20>
	
  default:
    speed = USBD_SPEED_FULL;
 8006268:	2301      	movs	r3, #1
 800626a:	73fb      	strb	r3, [r7, #15]
    break;    
 800626c:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 345c 	ldr.w	r3, [r3, #1116]	@ 0x45c
 8006274:	7bfa      	ldrb	r2, [r7, #15]
 8006276:	4611      	mov	r1, r2
 8006278:	4618      	mov	r0, r3
 800627a:	f7ff f8df 	bl	800543c <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 345c 	ldr.w	r3, [r3, #1116]	@ 0x45c
 8006284:	4618      	mov	r0, r3
 8006286:	f7ff f8aa 	bl	80053de <USBD_LL_Reset>
}
 800628a:	bf00      	nop
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
	...

08006294 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 345c 	ldr.w	r3, [r3, #1116]	@ 0x45c
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7ff f8d9 	bl	800545a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d005      	beq.n	80062bc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80062b0:	4b04      	ldr	r3, [pc, #16]	@ (80062c4 <HAL_PCD_SuspendCallback+0x30>)
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	4a03      	ldr	r2, [pc, #12]	@ (80062c4 <HAL_PCD_SuspendCallback+0x30>)
 80062b6:	f043 0306 	orr.w	r3, r3, #6
 80062ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80062bc:	bf00      	nop
 80062be:	3708      	adds	r7, #8
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	e000ed00 	.word	0xe000ed00

080062c8 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 345c 	ldr.w	r3, [r3, #1116]	@ 0x45c
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7ff f8d3 	bl	8005482 <USBD_LL_Resume>
}
 80062dc:	bf00      	nop
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80062ec:	4a2b      	ldr	r2, [pc, #172]	@ (800639c <USBD_LL_Init+0xb8>)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8c2 345c 	str.w	r3, [r2, #1116]	@ 0x45c
  pdev->pData = &hpcd_USB_FS;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a29      	ldr	r2, [pc, #164]	@ (800639c <USBD_LL_Init+0xb8>)
 80062f8:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220

  hpcd_USB_FS.Instance = USB;
 80062fc:	4b27      	ldr	r3, [pc, #156]	@ (800639c <USBD_LL_Init+0xb8>)
 80062fe:	4a28      	ldr	r2, [pc, #160]	@ (80063a0 <USBD_LL_Init+0xbc>)
 8006300:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006302:	4b26      	ldr	r3, [pc, #152]	@ (800639c <USBD_LL_Init+0xb8>)
 8006304:	2208      	movs	r2, #8
 8006306:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006308:	4b24      	ldr	r3, [pc, #144]	@ (800639c <USBD_LL_Init+0xb8>)
 800630a:	2202      	movs	r2, #2
 800630c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 800630e:	4b23      	ldr	r3, [pc, #140]	@ (800639c <USBD_LL_Init+0xb8>)
 8006310:	2203      	movs	r2, #3
 8006312:	60da      	str	r2, [r3, #12]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006314:	4b21      	ldr	r3, [pc, #132]	@ (800639c <USBD_LL_Init+0xb8>)
 8006316:	2200      	movs	r2, #0
 8006318:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800631a:	4b20      	ldr	r3, [pc, #128]	@ (800639c <USBD_LL_Init+0xb8>)
 800631c:	2200      	movs	r2, #0
 800631e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006320:	4b1e      	ldr	r3, [pc, #120]	@ (800639c <USBD_LL_Init+0xb8>)
 8006322:	2200      	movs	r2, #0
 8006324:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006326:	481d      	ldr	r0, [pc, #116]	@ (800639c <USBD_LL_Init+0xb8>)
 8006328:	f7fb f8ca 	bl	80014c0 <HAL_PCD_Init>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d004      	beq.n	800633c <USBD_LL_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006332:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 8006336:	481b      	ldr	r0, [pc, #108]	@ (80063a4 <USBD_LL_Init+0xc0>)
 8006338:	f7fa fa2c 	bl	8000794 <_Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 8006342:	2318      	movs	r3, #24
 8006344:	2200      	movs	r2, #0
 8006346:	2100      	movs	r1, #0
 8006348:	f7fb ffda 	bl	8002300 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 8006352:	2358      	movs	r3, #88	@ 0x58
 8006354:	2200      	movs	r2, #0
 8006356:	2180      	movs	r1, #128	@ 0x80
 8006358:	f7fb ffd2 	bl	8002300 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 8006362:	23c0      	movs	r3, #192	@ 0xc0
 8006364:	2200      	movs	r2, #0
 8006366:	2181      	movs	r1, #129	@ 0x81
 8006368:	f7fb ffca 	bl	8002300 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 8006372:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8006376:	2200      	movs	r2, #0
 8006378:	2101      	movs	r1, #1
 800637a:	f7fb ffc1 	bl	8002300 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 8006384:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006388:	2200      	movs	r2, #0
 800638a:	2182      	movs	r1, #130	@ 0x82
 800638c:	f7fb ffb8 	bl	8002300 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3708      	adds	r7, #8
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	20001674 	.word	0x20001674
 80063a0:	40005c00 	.word	0x40005c00
 80063a4:	08006a24 	.word	0x08006a24

080063a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063b0:	2300      	movs	r3, #0
 80063b2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063b4:	2300      	movs	r3, #0
 80063b6:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 80063be:	4618      	mov	r0, r3
 80063c0:	f7fb f966 	bl	8001690 <HAL_PCD_Start>
 80063c4:	4603      	mov	r3, r0
 80063c6:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 80063c8:	7bbb      	ldrb	r3, [r7, #14]
 80063ca:	2b03      	cmp	r3, #3
 80063cc:	d816      	bhi.n	80063fc <USBD_LL_Start+0x54>
 80063ce:	a201      	add	r2, pc, #4	@ (adr r2, 80063d4 <USBD_LL_Start+0x2c>)
 80063d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d4:	080063e5 	.word	0x080063e5
 80063d8:	080063eb 	.word	0x080063eb
 80063dc:	080063f1 	.word	0x080063f1
 80063e0:	080063f7 	.word	0x080063f7
    case HAL_OK :
      usb_status = USBD_OK;
 80063e4:	2300      	movs	r3, #0
 80063e6:	73fb      	strb	r3, [r7, #15]
    break;
 80063e8:	e00b      	b.n	8006402 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80063ea:	2302      	movs	r3, #2
 80063ec:	73fb      	strb	r3, [r7, #15]
    break;
 80063ee:	e008      	b.n	8006402 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80063f0:	2301      	movs	r3, #1
 80063f2:	73fb      	strb	r3, [r7, #15]
    break;
 80063f4:	e005      	b.n	8006402 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80063f6:	2302      	movs	r3, #2
 80063f8:	73fb      	strb	r3, [r7, #15]
    break;
 80063fa:	e002      	b.n	8006402 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80063fc:	2302      	movs	r3, #2
 80063fe:	73fb      	strb	r3, [r7, #15]
    break;
 8006400:	bf00      	nop
  }
  return usb_status;
 8006402:	7bfb      	ldrb	r3, [r7, #15]
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	4608      	mov	r0, r1
 8006416:	4611      	mov	r1, r2
 8006418:	461a      	mov	r2, r3
 800641a:	4603      	mov	r3, r0
 800641c:	70fb      	strb	r3, [r7, #3]
 800641e:	460b      	mov	r3, r1
 8006420:	70bb      	strb	r3, [r7, #2]
 8006422:	4613      	mov	r3, r2
 8006424:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006426:	2300      	movs	r3, #0
 8006428:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 8006434:	78bb      	ldrb	r3, [r7, #2]
 8006436:	883a      	ldrh	r2, [r7, #0]
 8006438:	78f9      	ldrb	r1, [r7, #3]
 800643a:	f7fb fa76 	bl	800192a <HAL_PCD_EP_Open>
 800643e:	4603      	mov	r3, r0
 8006440:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006442:	7bbb      	ldrb	r3, [r7, #14]
 8006444:	2b03      	cmp	r3, #3
 8006446:	d817      	bhi.n	8006478 <USBD_LL_OpenEP+0x6c>
 8006448:	a201      	add	r2, pc, #4	@ (adr r2, 8006450 <USBD_LL_OpenEP+0x44>)
 800644a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644e:	bf00      	nop
 8006450:	08006461 	.word	0x08006461
 8006454:	08006467 	.word	0x08006467
 8006458:	0800646d 	.word	0x0800646d
 800645c:	08006473 	.word	0x08006473
    case HAL_OK :
      usb_status = USBD_OK;
 8006460:	2300      	movs	r3, #0
 8006462:	73fb      	strb	r3, [r7, #15]
    break;
 8006464:	e00b      	b.n	800647e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006466:	2302      	movs	r3, #2
 8006468:	73fb      	strb	r3, [r7, #15]
    break;
 800646a:	e008      	b.n	800647e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800646c:	2301      	movs	r3, #1
 800646e:	73fb      	strb	r3, [r7, #15]
    break;
 8006470:	e005      	b.n	800647e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006472:	2302      	movs	r3, #2
 8006474:	73fb      	strb	r3, [r7, #15]
    break;
 8006476:	e002      	b.n	800647e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8006478:	2302      	movs	r3, #2
 800647a:	73fb      	strb	r3, [r7, #15]
    break;
 800647c:	bf00      	nop
  }
  return usb_status;
 800647e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006480:	4618      	mov	r0, r3
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	460b      	mov	r3, r1
 8006492:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006494:	2300      	movs	r3, #0
 8006496:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006498:	2300      	movs	r3, #0
 800649a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 80064a2:	78fa      	ldrb	r2, [r7, #3]
 80064a4:	4611      	mov	r1, r2
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fb fa94 	bl	80019d4 <HAL_PCD_EP_Close>
 80064ac:	4603      	mov	r3, r0
 80064ae:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 80064b0:	7bbb      	ldrb	r3, [r7, #14]
 80064b2:	2b03      	cmp	r3, #3
 80064b4:	d816      	bhi.n	80064e4 <USBD_LL_CloseEP+0x5c>
 80064b6:	a201      	add	r2, pc, #4	@ (adr r2, 80064bc <USBD_LL_CloseEP+0x34>)
 80064b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064bc:	080064cd 	.word	0x080064cd
 80064c0:	080064d3 	.word	0x080064d3
 80064c4:	080064d9 	.word	0x080064d9
 80064c8:	080064df 	.word	0x080064df
    case HAL_OK :
      usb_status = USBD_OK;
 80064cc:	2300      	movs	r3, #0
 80064ce:	73fb      	strb	r3, [r7, #15]
    break;
 80064d0:	e00b      	b.n	80064ea <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80064d2:	2302      	movs	r3, #2
 80064d4:	73fb      	strb	r3, [r7, #15]
    break;
 80064d6:	e008      	b.n	80064ea <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80064d8:	2301      	movs	r3, #1
 80064da:	73fb      	strb	r3, [r7, #15]
    break;
 80064dc:	e005      	b.n	80064ea <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80064de:	2302      	movs	r3, #2
 80064e0:	73fb      	strb	r3, [r7, #15]
    break;
 80064e2:	e002      	b.n	80064ea <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80064e4:	2302      	movs	r3, #2
 80064e6:	73fb      	strb	r3, [r7, #15]
    break;
 80064e8:	bf00      	nop
  }
  return usb_status;  
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	460b      	mov	r3, r1
 80064fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006500:	2300      	movs	r3, #0
 8006502:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006504:	2300      	movs	r3, #0
 8006506:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800650e:	78fa      	ldrb	r2, [r7, #3]
 8006510:	4611      	mov	r1, r2
 8006512:	4618      	mov	r0, r3
 8006514:	f7fb fb30 	bl	8001b78 <HAL_PCD_EP_SetStall>
 8006518:	4603      	mov	r3, r0
 800651a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800651c:	7bbb      	ldrb	r3, [r7, #14]
 800651e:	2b03      	cmp	r3, #3
 8006520:	d816      	bhi.n	8006550 <USBD_LL_StallEP+0x5c>
 8006522:	a201      	add	r2, pc, #4	@ (adr r2, 8006528 <USBD_LL_StallEP+0x34>)
 8006524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006528:	08006539 	.word	0x08006539
 800652c:	0800653f 	.word	0x0800653f
 8006530:	08006545 	.word	0x08006545
 8006534:	0800654b 	.word	0x0800654b
    case HAL_OK :
      usb_status = USBD_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	73fb      	strb	r3, [r7, #15]
    break;
 800653c:	e00b      	b.n	8006556 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800653e:	2302      	movs	r3, #2
 8006540:	73fb      	strb	r3, [r7, #15]
    break;
 8006542:	e008      	b.n	8006556 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006544:	2301      	movs	r3, #1
 8006546:	73fb      	strb	r3, [r7, #15]
    break;
 8006548:	e005      	b.n	8006556 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800654a:	2302      	movs	r3, #2
 800654c:	73fb      	strb	r3, [r7, #15]
    break;
 800654e:	e002      	b.n	8006556 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006550:	2302      	movs	r3, #2
 8006552:	73fb      	strb	r3, [r7, #15]
    break;
 8006554:	bf00      	nop
  }
  return usb_status;  
 8006556:	7bfb      	ldrb	r3, [r7, #15]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	460b      	mov	r3, r1
 800656a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800656c:	2300      	movs	r3, #0
 800656e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006570:	2300      	movs	r3, #0
 8006572:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800657a:	78fa      	ldrb	r2, [r7, #3]
 800657c:	4611      	mov	r1, r2
 800657e:	4618      	mov	r0, r3
 8006580:	f7fb fb4f 	bl	8001c22 <HAL_PCD_EP_ClrStall>
 8006584:	4603      	mov	r3, r0
 8006586:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8006588:	7bbb      	ldrb	r3, [r7, #14]
 800658a:	2b03      	cmp	r3, #3
 800658c:	d816      	bhi.n	80065bc <USBD_LL_ClearStallEP+0x5c>
 800658e:	a201      	add	r2, pc, #4	@ (adr r2, 8006594 <USBD_LL_ClearStallEP+0x34>)
 8006590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006594:	080065a5 	.word	0x080065a5
 8006598:	080065ab 	.word	0x080065ab
 800659c:	080065b1 	.word	0x080065b1
 80065a0:	080065b7 	.word	0x080065b7
    case HAL_OK :
      usb_status = USBD_OK;
 80065a4:	2300      	movs	r3, #0
 80065a6:	73fb      	strb	r3, [r7, #15]
    break;
 80065a8:	e00b      	b.n	80065c2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80065aa:	2302      	movs	r3, #2
 80065ac:	73fb      	strb	r3, [r7, #15]
    break;
 80065ae:	e008      	b.n	80065c2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80065b0:	2301      	movs	r3, #1
 80065b2:	73fb      	strb	r3, [r7, #15]
    break;
 80065b4:	e005      	b.n	80065c2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80065b6:	2302      	movs	r3, #2
 80065b8:	73fb      	strb	r3, [r7, #15]
    break;
 80065ba:	e002      	b.n	80065c2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80065bc:	2302      	movs	r3, #2
 80065be:	73fb      	strb	r3, [r7, #15]
    break;
 80065c0:	bf00      	nop
  }
  return usb_status; 
 80065c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	460b      	mov	r3, r1
 80065d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 80065de:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80065e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	da08      	bge.n	80065fa <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80065e8:	78fb      	ldrb	r3, [r7, #3]
 80065ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	015b      	lsls	r3, r3, #5
 80065f2:	4413      	add	r3, r2
 80065f4:	332a      	adds	r3, #42	@ 0x2a
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	e008      	b.n	800660c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80065fa:	78fb      	ldrb	r3, [r7, #3]
 80065fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	015b      	lsls	r3, r3, #5
 8006604:	4413      	add	r3, r2
 8006606:	f203 232a 	addw	r3, r3, #554	@ 0x22a
 800660a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800660c:	4618      	mov	r0, r3
 800660e:	3714      	adds	r7, #20
 8006610:	46bd      	mov	sp, r7
 8006612:	bc80      	pop	{r7}
 8006614:	4770      	bx	lr
	...

08006618 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	460b      	mov	r3, r1
 8006622:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006624:	2300      	movs	r3, #0
 8006626:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006628:	2300      	movs	r3, #0
 800662a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8006632:	78fa      	ldrb	r2, [r7, #3]
 8006634:	4611      	mov	r1, r2
 8006636:	4618      	mov	r0, r3
 8006638:	f7fb f952 	bl	80018e0 <HAL_PCD_SetAddress>
 800663c:	4603      	mov	r3, r0
 800663e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8006640:	7bbb      	ldrb	r3, [r7, #14]
 8006642:	2b03      	cmp	r3, #3
 8006644:	d816      	bhi.n	8006674 <USBD_LL_SetUSBAddress+0x5c>
 8006646:	a201      	add	r2, pc, #4	@ (adr r2, 800664c <USBD_LL_SetUSBAddress+0x34>)
 8006648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664c:	0800665d 	.word	0x0800665d
 8006650:	08006663 	.word	0x08006663
 8006654:	08006669 	.word	0x08006669
 8006658:	0800666f 	.word	0x0800666f
    case HAL_OK :
      usb_status = USBD_OK;
 800665c:	2300      	movs	r3, #0
 800665e:	73fb      	strb	r3, [r7, #15]
    break;
 8006660:	e00b      	b.n	800667a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006662:	2302      	movs	r3, #2
 8006664:	73fb      	strb	r3, [r7, #15]
    break;
 8006666:	e008      	b.n	800667a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006668:	2301      	movs	r3, #1
 800666a:	73fb      	strb	r3, [r7, #15]
    break;
 800666c:	e005      	b.n	800667a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800666e:	2302      	movs	r3, #2
 8006670:	73fb      	strb	r3, [r7, #15]
    break;
 8006672:	e002      	b.n	800667a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8006674:	2302      	movs	r3, #2
 8006676:	73fb      	strb	r3, [r7, #15]
    break;
 8006678:	bf00      	nop
  }
  return usb_status;  
 800667a:	7bfb      	ldrb	r3, [r7, #15]
}
 800667c:	4618      	mov	r0, r3
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b086      	sub	sp, #24
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	607a      	str	r2, [r7, #4]
 800668e:	461a      	mov	r2, r3
 8006690:	460b      	mov	r3, r1
 8006692:	72fb      	strb	r3, [r7, #11]
 8006694:	4613      	mov	r3, r2
 8006696:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006698:	2300      	movs	r3, #0
 800669a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800669c:	2300      	movs	r3, #0
 800669e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 80066a6:	893b      	ldrh	r3, [r7, #8]
 80066a8:	7af9      	ldrb	r1, [r7, #11]
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	f7fb fa29 	bl	8001b02 <HAL_PCD_EP_Transmit>
 80066b0:	4603      	mov	r3, r0
 80066b2:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 80066b4:	7dbb      	ldrb	r3, [r7, #22]
 80066b6:	2b03      	cmp	r3, #3
 80066b8:	d816      	bhi.n	80066e8 <USBD_LL_Transmit+0x64>
 80066ba:	a201      	add	r2, pc, #4	@ (adr r2, 80066c0 <USBD_LL_Transmit+0x3c>)
 80066bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c0:	080066d1 	.word	0x080066d1
 80066c4:	080066d7 	.word	0x080066d7
 80066c8:	080066dd 	.word	0x080066dd
 80066cc:	080066e3 	.word	0x080066e3
    case HAL_OK :
      usb_status = USBD_OK;
 80066d0:	2300      	movs	r3, #0
 80066d2:	75fb      	strb	r3, [r7, #23]
    break;
 80066d4:	e00b      	b.n	80066ee <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80066d6:	2302      	movs	r3, #2
 80066d8:	75fb      	strb	r3, [r7, #23]
    break;
 80066da:	e008      	b.n	80066ee <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80066dc:	2301      	movs	r3, #1
 80066de:	75fb      	strb	r3, [r7, #23]
    break;
 80066e0:	e005      	b.n	80066ee <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80066e2:	2302      	movs	r3, #2
 80066e4:	75fb      	strb	r3, [r7, #23]
    break;
 80066e6:	e002      	b.n	80066ee <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 80066e8:	2302      	movs	r3, #2
 80066ea:	75fb      	strb	r3, [r7, #23]
    break;
 80066ec:	bf00      	nop
  }
  return usb_status;    
 80066ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3718      	adds	r7, #24
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b086      	sub	sp, #24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	607a      	str	r2, [r7, #4]
 8006702:	461a      	mov	r2, r3
 8006704:	460b      	mov	r3, r1
 8006706:	72fb      	strb	r3, [r7, #11]
 8006708:	4613      	mov	r3, r2
 800670a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800670c:	2300      	movs	r3, #0
 800670e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006710:	2300      	movs	r3, #0
 8006712:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 800671a:	893b      	ldrh	r3, [r7, #8]
 800671c:	7af9      	ldrb	r1, [r7, #11]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	f7fb f99e 	bl	8001a60 <HAL_PCD_EP_Receive>
 8006724:	4603      	mov	r3, r0
 8006726:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8006728:	7dbb      	ldrb	r3, [r7, #22]
 800672a:	2b03      	cmp	r3, #3
 800672c:	d816      	bhi.n	800675c <USBD_LL_PrepareReceive+0x64>
 800672e:	a201      	add	r2, pc, #4	@ (adr r2, 8006734 <USBD_LL_PrepareReceive+0x3c>)
 8006730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006734:	08006745 	.word	0x08006745
 8006738:	0800674b 	.word	0x0800674b
 800673c:	08006751 	.word	0x08006751
 8006740:	08006757 	.word	0x08006757
    case HAL_OK :
      usb_status = USBD_OK;
 8006744:	2300      	movs	r3, #0
 8006746:	75fb      	strb	r3, [r7, #23]
    break;
 8006748:	e00b      	b.n	8006762 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800674a:	2302      	movs	r3, #2
 800674c:	75fb      	strb	r3, [r7, #23]
    break;
 800674e:	e008      	b.n	8006762 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006750:	2301      	movs	r3, #1
 8006752:	75fb      	strb	r3, [r7, #23]
    break;
 8006754:	e005      	b.n	8006762 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006756:	2302      	movs	r3, #2
 8006758:	75fb      	strb	r3, [r7, #23]
    break;
 800675a:	e002      	b.n	8006762 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800675c:	2302      	movs	r3, #2
 800675e:	75fb      	strb	r3, [r7, #23]
    break;
 8006760:	bf00      	nop
  }
  return usb_status; 
 8006762:	7dfb      	ldrb	r3, [r7, #23]
}
 8006764:	4618      	mov	r0, r3
 8006766:	3718      	adds	r7, #24
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	460b      	mov	r3, r1
 8006776:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800677e:	78fa      	ldrb	r2, [r7, #3]
 8006780:	4611      	mov	r1, r2
 8006782:	4618      	mov	r0, r3
 8006784:	f7fb f9a8 	bl	8001ad8 <HAL_PCD_EP_GetRxCount>
 8006788:	4603      	mov	r3, r0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
	...

08006794 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800679c:	4b02      	ldr	r3, [pc, #8]	@ (80067a8 <USBD_static_malloc+0x14>)
}
 800679e:	4618      	mov	r0, r3
 80067a0:	370c      	adds	r7, #12
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bc80      	pop	{r7}
 80067a6:	4770      	bx	lr
 80067a8:	20001ad4 	.word	0x20001ad4

080067ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]

}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bc80      	pop	{r7}
 80067bc:	4770      	bx	lr

080067be <HAL_PCDEx_SetConnectionState>:
  * @param hpcd: PCD handle
  * @param state: Connection state (0: disconnected / 1: connected)
  * @retval None
  */
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 80067be:	b480      	push	{r7}
 80067c0:	b083      	sub	sp, #12
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
 80067c6:	460b      	mov	r3, r1
 80067c8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80067ca:	bf00      	nop
 80067cc:	370c      	adds	r7, #12
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bc80      	pop	{r7}
 80067d2:	4770      	bx	lr

080067d4 <__libc_init_array>:
 80067d4:	b570      	push	{r4, r5, r6, lr}
 80067d6:	2600      	movs	r6, #0
 80067d8:	4d0c      	ldr	r5, [pc, #48]	@ (800680c <__libc_init_array+0x38>)
 80067da:	4c0d      	ldr	r4, [pc, #52]	@ (8006810 <__libc_init_array+0x3c>)
 80067dc:	1b64      	subs	r4, r4, r5
 80067de:	10a4      	asrs	r4, r4, #2
 80067e0:	42a6      	cmp	r6, r4
 80067e2:	d109      	bne.n	80067f8 <__libc_init_array+0x24>
 80067e4:	f000 f81a 	bl	800681c <_init>
 80067e8:	2600      	movs	r6, #0
 80067ea:	4d0a      	ldr	r5, [pc, #40]	@ (8006814 <__libc_init_array+0x40>)
 80067ec:	4c0a      	ldr	r4, [pc, #40]	@ (8006818 <__libc_init_array+0x44>)
 80067ee:	1b64      	subs	r4, r4, r5
 80067f0:	10a4      	asrs	r4, r4, #2
 80067f2:	42a6      	cmp	r6, r4
 80067f4:	d105      	bne.n	8006802 <__libc_init_array+0x2e>
 80067f6:	bd70      	pop	{r4, r5, r6, pc}
 80067f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80067fc:	4798      	blx	r3
 80067fe:	3601      	adds	r6, #1
 8006800:	e7ee      	b.n	80067e0 <__libc_init_array+0xc>
 8006802:	f855 3b04 	ldr.w	r3, [r5], #4
 8006806:	4798      	blx	r3
 8006808:	3601      	adds	r6, #1
 800680a:	e7f2      	b.n	80067f2 <__libc_init_array+0x1e>
 800680c:	08006a60 	.word	0x08006a60
 8006810:	08006a60 	.word	0x08006a60
 8006814:	08006a60 	.word	0x08006a60
 8006818:	08006a64 	.word	0x08006a64

0800681c <_init>:
 800681c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800681e:	bf00      	nop
 8006820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006822:	bc08      	pop	{r3}
 8006824:	469e      	mov	lr, r3
 8006826:	4770      	bx	lr

08006828 <_fini>:
 8006828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682a:	bf00      	nop
 800682c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800682e:	bc08      	pop	{r3}
 8006830:	469e      	mov	lr, r3
 8006832:	4770      	bx	lr
