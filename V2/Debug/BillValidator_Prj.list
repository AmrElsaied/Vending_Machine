
BillValidator_Prj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085fc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08008708  08008708  00009708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800877c  0800877c  0000aa30  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800877c  0800877c  0000aa30  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800877c  0800877c  0000aa30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800877c  0800877c  0000977c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008780  08008780  00009780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000a30  20000000  08008784  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001230  20000a30  080091b4  0000aa30  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c60  080091b4  0000ac60  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000aa30  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010aee  00000000  00000000  0000aa59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003127  00000000  00000000  0001b547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  0001e670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a1d  00000000  00000000  0001f3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019860  00000000  00000000  0001fdfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001153f  00000000  00000000  0003965d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087418  00000000  00000000  0004ab9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1fb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034c4  00000000  00000000  000d1ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000d54bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000a30 	.word	0x20000a30
 8000128:	00000000 	.word	0x00000000
 800012c:	080086f0 	.word	0x080086f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000a34 	.word	0x20000a34
 8000148:	080086f0 	.word	0x080086f0

0800014c <HAL_UART_RxCpltCallback>:
void MDB_Peripheral_Init(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  if (huart == &huart1) {
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	4a37      	ldr	r2, [pc, #220]	@ (8000234 <HAL_UART_RxCpltCallback+0xe8>)
 8000158:	4293      	cmp	r3, r2
 800015a:	d167      	bne.n	800022c <HAL_UART_RxCpltCallback+0xe0>
    uint16_t word = mdb_rx_buf[0]&0x1FF;
 800015c:	4b36      	ldr	r3, [pc, #216]	@ (8000238 <HAL_UART_RxCpltCallback+0xec>)
 800015e:	881b      	ldrh	r3, [r3, #0]
 8000160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000164:	81bb      	strh	r3, [r7, #12]
    // check if the BV_CMD_RXhandler is ready to recieve a new command
    switch (BV_StateManager.BV_CMD_RX_StateHandler)
 8000166:	4b35      	ldr	r3, [pc, #212]	@ (800023c <HAL_UART_RxCpltCallback+0xf0>)
 8000168:	785b      	ldrb	r3, [r3, #1]
 800016a:	2b03      	cmp	r3, #3
 800016c:	d856      	bhi.n	800021c <HAL_UART_RxCpltCallback+0xd0>
 800016e:	a201      	add	r2, pc, #4	@ (adr r2, 8000174 <HAL_UART_RxCpltCallback+0x28>)
 8000170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000174:	08000185 	.word	0x08000185
 8000178:	080001d9 	.word	0x080001d9
 800017c:	0800021d 	.word	0x0800021d
 8000180:	0800021d 	.word	0x0800021d
    {
    case CMD_RX_READY:
      // Check if the first byte is a valid VMC command
      for (uint8_t i = 0; i < VMC_CMD_MAX_NUMBER; i++)
 8000184:	2300      	movs	r3, #0
 8000186:	73fb      	strb	r3, [r7, #15]
 8000188:	e022      	b.n	80001d0 <HAL_UART_RxCpltCallback+0x84>
      {
        if( word == VMC_CMDs[i].CMD[0])
 800018a:	7bfb      	ldrb	r3, [r7, #15]
 800018c:	4a2c      	ldr	r2, [pc, #176]	@ (8000240 <HAL_UART_RxCpltCallback+0xf4>)
 800018e:	2194      	movs	r1, #148	@ 0x94
 8000190:	fb01 f303 	mul.w	r3, r1, r3
 8000194:	4413      	add	r3, r2
 8000196:	881b      	ldrh	r3, [r3, #0]
 8000198:	89ba      	ldrh	r2, [r7, #12]
 800019a:	429a      	cmp	r2, r3
 800019c:	d115      	bne.n	80001ca <HAL_UART_RxCpltCallback+0x7e>
        {
          // Command found, recieve rest of the command
          BV_StateManager.BV_CMD_RX_StateHandler = CMD_RX_INPROGRESS;
 800019e:	4b27      	ldr	r3, [pc, #156]	@ (800023c <HAL_UART_RxCpltCallback+0xf0>)
 80001a0:	2201      	movs	r2, #1
 80001a2:	705a      	strb	r2, [r3, #1]
          BV_MDB_BusManager.MDB_RX_CMD_Index = i; // Store the Rx command index
 80001a4:	4a27      	ldr	r2, [pc, #156]	@ (8000244 <HAL_UART_RxCpltCallback+0xf8>)
 80001a6:	7bfb      	ldrb	r3, [r7, #15]
 80001a8:	f882 3094 	strb.w	r3, [r2, #148]	@ 0x94
          BV_MDB_BusManager.MDB_RXbuffer[BV_MDB_BusManager.RXBuffer_index++] = word;
 80001ac:	4b25      	ldr	r3, [pc, #148]	@ (8000244 <HAL_UART_RxCpltCallback+0xf8>)
 80001ae:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 80001b2:	1c5a      	adds	r2, r3, #1
 80001b4:	b2d1      	uxtb	r1, r2
 80001b6:	4a23      	ldr	r2, [pc, #140]	@ (8000244 <HAL_UART_RxCpltCallback+0xf8>)
 80001b8:	f882 1090 	strb.w	r1, [r2, #144]	@ 0x90
 80001bc:	4619      	mov	r1, r3
 80001be:	4a21      	ldr	r2, [pc, #132]	@ (8000244 <HAL_UART_RxCpltCallback+0xf8>)
 80001c0:	89bb      	ldrh	r3, [r7, #12]
 80001c2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
          break;
 80001c6:	bf00      	nop
        }
      }
      break;
 80001c8:	e02b      	b.n	8000222 <HAL_UART_RxCpltCallback+0xd6>
      for (uint8_t i = 0; i < VMC_CMD_MAX_NUMBER; i++)
 80001ca:	7bfb      	ldrb	r3, [r7, #15]
 80001cc:	3301      	adds	r3, #1
 80001ce:	73fb      	strb	r3, [r7, #15]
 80001d0:	7bfb      	ldrb	r3, [r7, #15]
 80001d2:	2b0d      	cmp	r3, #13
 80001d4:	d9d9      	bls.n	800018a <HAL_UART_RxCpltCallback+0x3e>
      break;
 80001d6:	e024      	b.n	8000222 <HAL_UART_RxCpltCallback+0xd6>
    case CMD_RX_INPROGRESS:
      // Store the received word in the RX buffer
      BV_MDB_BusManager.MDB_RXbuffer[BV_MDB_BusManager.RXBuffer_index++] = word;
 80001d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000244 <HAL_UART_RxCpltCallback+0xf8>)
 80001da:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 80001de:	1c5a      	adds	r2, r3, #1
 80001e0:	b2d1      	uxtb	r1, r2
 80001e2:	4a18      	ldr	r2, [pc, #96]	@ (8000244 <HAL_UART_RxCpltCallback+0xf8>)
 80001e4:	f882 1090 	strb.w	r1, [r2, #144]	@ 0x90
 80001e8:	4619      	mov	r1, r3
 80001ea:	4a16      	ldr	r2, [pc, #88]	@ (8000244 <HAL_UART_RxCpltCallback+0xf8>)
 80001ec:	89bb      	ldrh	r3, [r7, #12]
 80001ee:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
      // Check if the command is fully received
      if (BV_MDB_BusManager.RXBuffer_index >= VMC_CMDs[BV_MDB_BusManager.MDB_RX_CMD_Index].CMD_Length)
 80001f2:	4b14      	ldr	r3, [pc, #80]	@ (8000244 <HAL_UART_RxCpltCallback+0xf8>)
 80001f4:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 80001f8:	4619      	mov	r1, r3
 80001fa:	4b12      	ldr	r3, [pc, #72]	@ (8000244 <HAL_UART_RxCpltCallback+0xf8>)
 80001fc:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8000200:	4618      	mov	r0, r3
 8000202:	4a0f      	ldr	r2, [pc, #60]	@ (8000240 <HAL_UART_RxCpltCallback+0xf4>)
 8000204:	2394      	movs	r3, #148	@ 0x94
 8000206:	fb00 f303 	mul.w	r3, r0, r3
 800020a:	4413      	add	r3, r2
 800020c:	3348      	adds	r3, #72	@ 0x48
 800020e:	881b      	ldrh	r3, [r3, #0]
 8000210:	4299      	cmp	r1, r3
 8000212:	d305      	bcc.n	8000220 <HAL_UART_RxCpltCallback+0xd4>
      {
        // Command fully received, process it
        BV_StateManager.BV_CMD_RX_StateHandler = CMD_RX_DONE;
 8000214:	4b09      	ldr	r3, [pc, #36]	@ (800023c <HAL_UART_RxCpltCallback+0xf0>)
 8000216:	2202      	movs	r2, #2
 8000218:	705a      	strb	r2, [r3, #1]
        // MDB_HandleCommand(BV_MDB_BusManager.MDB_RXbuffer, BV_MDB_BusManager.RXBuffer_index);
      }
      break;
 800021a:	e001      	b.n	8000220 <HAL_UART_RxCpltCallback+0xd4>
      break;
    case CMD_RX_BUSY:
      //TODO handle the state of processing at this time
      break;
    default:
      break;
 800021c:	bf00      	nop
 800021e:	e000      	b.n	8000222 <HAL_UART_RxCpltCallback+0xd6>
      break;
 8000220:	bf00      	nop
    }
    HAL_UART_Receive_IT(huart, (uint8_t *) mdb_rx_buf, 1);
 8000222:	2201      	movs	r2, #1
 8000224:	4904      	ldr	r1, [pc, #16]	@ (8000238 <HAL_UART_RxCpltCallback+0xec>)
 8000226:	6878      	ldr	r0, [r7, #4]
 8000228:	f003 f9c1 	bl	80035ae <HAL_UART_Receive_IT>
  }
}
 800022c:	bf00      	nop
 800022e:	3710      	adds	r7, #16
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	20000a4c 	.word	0x20000a4c
 8000238:	20000a98 	.word	0x20000a98
 800023c:	20000098 	.word	0x20000098
 8000240:	2000009c 	.word	0x2000009c
 8000244:	20000000 	.word	0x20000000

08000248 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]

  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	68da      	ldr	r2, [r3, #12]
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800025e:	60da      	str	r2, [r3, #12]
  __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	68da      	ldr	r2, [r3, #12]
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800026e:	60da      	str	r2, [r3, #12]

  /* Check if a receive process is ongoing or not */
  if(huart->gState == HAL_UART_STATE_BUSY_TX_RX)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000276:	b2db      	uxtb	r3, r3
 8000278:	2b23      	cmp	r3, #35	@ 0x23
 800027a:	d104      	bne.n	8000286 <HAL_UART_ErrorCallback+0x3e>
  {
    huart->gState = HAL_UART_STATE_BUSY_RX;
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2222      	movs	r2, #34	@ 0x22
 8000280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8000284:	e003      	b.n	800028e <HAL_UART_ErrorCallback+0x46>
  }
  else
  {
    huart->gState = HAL_UART_STATE_READY;
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	2220      	movs	r2, #32
 800028a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
   HAL_UART_RxCpltCallback(huart);
 800028e:	6878      	ldr	r0, [r7, #4]
 8000290:	f7ff ff5c 	bl	800014c <HAL_UART_RxCpltCallback>
}
 8000294:	bf00      	nop
 8000296:	3708      	adds	r7, #8
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}

0800029c <MDB_Peripheral_Init>:


// MDB Peripheral Initialization Function
void MDB_Peripheral_Init(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  BV_StateManager.BV_StateHnadler = STATE_RESTART; // Set initial state to RESTART
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <MDB_Peripheral_Init+0x18>)
 80002a2:	2203      	movs	r2, #3
 80002a4:	701a      	strb	r2, [r3, #0]
  BV_StateManager.BV_CMD_RX_StateHandler = CMD_RX_READY; // Set command reception state to READY
 80002a6:	4b03      	ldr	r3, [pc, #12]	@ (80002b4 <MDB_Peripheral_Init+0x18>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	705a      	strb	r2, [r3, #1]
}
 80002ac:	bf00      	nop
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bc80      	pop	{r7}
 80002b2:	4770      	bx	lr
 80002b4:	20000098 	.word	0x20000098

080002b8 <MDB_SendResponseWithModeBit>:

void MDB_SendResponseWithModeBit(uint16_t *data, uint8_t dataLength)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
 80002c0:	460b      	mov	r3, r1
 80002c2:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit_IT(&huart1, (uint8_t *)data, dataLength);
 80002c4:	78fb      	ldrb	r3, [r7, #3]
 80002c6:	b29b      	uxth	r3, r3
 80002c8:	461a      	mov	r2, r3
 80002ca:	6879      	ldr	r1, [r7, #4]
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <MDB_SendResponseWithModeBit+0x24>)
 80002ce:	f003 f939 	bl	8003544 <HAL_UART_Transmit_IT>
}
 80002d2:	bf00      	nop
 80002d4:	3708      	adds	r7, #8
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	20000a4c 	.word	0x20000a4c

080002e0 <MDB_HandleCommand>:

void MDB_HandleCommand(uint16_t *BV_RxBuffer, uint8_t length)
{
 80002e0:	b590      	push	{r4, r7, lr}
 80002e2:	b085      	sub	sp, #20
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	460b      	mov	r3, r1
 80002ea:	70fb      	strb	r3, [r7, #3]
  switch (BV_StateManager.BV_CMD_Process_StateHandler)
 80002ec:	4b85      	ldr	r3, [pc, #532]	@ (8000504 <MDB_HandleCommand+0x224>)
 80002ee:	78db      	ldrb	r3, [r3, #3]
 80002f0:	2b02      	cmp	r3, #2
 80002f2:	f000 80f6 	beq.w	80004e2 <MDB_HandleCommand+0x202>
 80002f6:	2b02      	cmp	r3, #2
 80002f8:	f300 80fb 	bgt.w	80004f2 <MDB_HandleCommand+0x212>
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d003      	beq.n	8000308 <MDB_HandleCommand+0x28>
 8000300:	2b01      	cmp	r3, #1
 8000302:	f000 80f8 	beq.w	80004f6 <MDB_HandleCommand+0x216>
      BV_MDB_BusManager.RXBuffer_index = 0; // Reset the RX buffer index for the next command
      break;
    default:
      // Error: Command processing state is not ready or in progress
      // TODO Handle error appropriately
      return;
 8000306:	e0f4      	b.n	80004f2 <MDB_HandleCommand+0x212>
      if (BV_StateManager.BV_CMD_RX_StateHandler == CMD_RX_DONE)
 8000308:	4b7e      	ldr	r3, [pc, #504]	@ (8000504 <MDB_HandleCommand+0x224>)
 800030a:	785b      	ldrb	r3, [r3, #1]
 800030c:	2b02      	cmp	r3, #2
 800030e:	f040 80f4 	bne.w	80004fa <MDB_HandleCommand+0x21a>
        BV_StateManager.BV_CMD_RX_StateHandler = CMD_RX_BUSY; // Set the state to BUSY
 8000312:	4b7c      	ldr	r3, [pc, #496]	@ (8000504 <MDB_HandleCommand+0x224>)
 8000314:	2203      	movs	r2, #3
 8000316:	705a      	strb	r2, [r3, #1]
        BV_StateManager.BV_CMD_Process_StateHandler = CMD_PROCESS_INPROGRESS; // Set the command processing state to INPROGRESS
 8000318:	4b7a      	ldr	r3, [pc, #488]	@ (8000504 <MDB_HandleCommand+0x224>)
 800031a:	2201      	movs	r2, #1
 800031c:	70da      	strb	r2, [r3, #3]
        int temp_index = BV_MDB_BusManager.MDB_RX_CMD_Index;
 800031e:	4b7a      	ldr	r3, [pc, #488]	@ (8000508 <MDB_HandleCommand+0x228>)
 8000320:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8000324:	60fb      	str	r3, [r7, #12]
        int temp_length = VMC_CMDs[temp_index].CMD_Length;
 8000326:	4a79      	ldr	r2, [pc, #484]	@ (800050c <MDB_HandleCommand+0x22c>)
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	2194      	movs	r1, #148	@ 0x94
 800032c:	fb01 f303 	mul.w	r3, r1, r3
 8000330:	4413      	add	r3, r2
 8000332:	3348      	adds	r3, #72	@ 0x48
 8000334:	881b      	ldrh	r3, [r3, #0]
 8000336:	60bb      	str	r3, [r7, #8]
        if (BV_MDB_BusManager.RXBuffer_index != VMC_CMDs[temp_index].CMD_Length)
 8000338:	4b73      	ldr	r3, [pc, #460]	@ (8000508 <MDB_HandleCommand+0x228>)
 800033a:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800033e:	4618      	mov	r0, r3
 8000340:	4a72      	ldr	r2, [pc, #456]	@ (800050c <MDB_HandleCommand+0x22c>)
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	2194      	movs	r1, #148	@ 0x94
 8000346:	fb01 f303 	mul.w	r3, r1, r3
 800034a:	4413      	add	r3, r2
 800034c:	3348      	adds	r3, #72	@ 0x48
 800034e:	881b      	ldrh	r3, [r3, #0]
 8000350:	4298      	cmp	r0, r3
 8000352:	f040 80bb 	bne.w	80004cc <MDB_HandleCommand+0x1ec>
          if (BV_RxBuffer[(BV_MDB_BusManager.RXBuffer_index)-1] == VMC_CMDs[temp_index].CMD[temp_length-1])
 8000356:	4b6c      	ldr	r3, [pc, #432]	@ (8000508 <MDB_HandleCommand+0x228>)
 8000358:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800035c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8000360:	3b01      	subs	r3, #1
 8000362:	005b      	lsls	r3, r3, #1
 8000364:	687a      	ldr	r2, [r7, #4]
 8000366:	4413      	add	r3, r2
 8000368:	881a      	ldrh	r2, [r3, #0]
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	3b01      	subs	r3, #1
 800036e:	4867      	ldr	r0, [pc, #412]	@ (800050c <MDB_HandleCommand+0x22c>)
 8000370:	68f9      	ldr	r1, [r7, #12]
 8000372:	244a      	movs	r4, #74	@ 0x4a
 8000374:	fb04 f101 	mul.w	r1, r4, r1
 8000378:	440b      	add	r3, r1
 800037a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800037e:	429a      	cmp	r2, r3
 8000380:	f040 80a4 	bne.w	80004cc <MDB_HandleCommand+0x1ec>
            BV_MDB_BusManager.MDB_Process_CMD_Index = temp_index; // Set the command index to the command being processed
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	b2da      	uxtb	r2, r3
 8000388:	4b5f      	ldr	r3, [pc, #380]	@ (8000508 <MDB_HandleCommand+0x228>)
 800038a:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
            if (VMC_CMDs[temp_index].CMD[0] == VMC_CMDs[VMC_CMD_0x0066].CMD[0])
 800038e:	4a5f      	ldr	r2, [pc, #380]	@ (800050c <MDB_HandleCommand+0x22c>)
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	2194      	movs	r1, #148	@ 0x94
 8000394:	fb01 f303 	mul.w	r3, r1, r3
 8000398:	4413      	add	r3, r2
 800039a:	881a      	ldrh	r2, [r3, #0]
 800039c:	4b5b      	ldr	r3, [pc, #364]	@ (800050c <MDB_HandleCommand+0x22c>)
 800039e:	f8b3 3534 	ldrh.w	r3, [r3, #1332]	@ 0x534
 80003a2:	429a      	cmp	r2, r3
 80003a4:	d166      	bne.n	8000474 <MDB_HandleCommand+0x194>
              switch (BV_StateManager.BV_StateHnadler)
 80003a6:	4b57      	ldr	r3, [pc, #348]	@ (8000504 <MDB_HandleCommand+0x224>)
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	2b03      	cmp	r3, #3
 80003ac:	d006      	beq.n	80003bc <MDB_HandleCommand+0xdc>
 80003ae:	2b03      	cmp	r3, #3
 80003b0:	dc5c      	bgt.n	800046c <MDB_HandleCommand+0x18c>
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d013      	beq.n	80003de <MDB_HandleCommand+0xfe>
 80003b6:	2b02      	cmp	r3, #2
 80003b8:	d01f      	beq.n	80003fa <MDB_HandleCommand+0x11a>
 80003ba:	e057      	b.n	800046c <MDB_HandleCommand+0x18c>
                VMC_CMDs[VMC_CMD_0x0066].CMD_Response[0] = 0x0006;
 80003bc:	4b53      	ldr	r3, [pc, #332]	@ (800050c <MDB_HandleCommand+0x22c>)
 80003be:	2206      	movs	r2, #6
 80003c0:	f8a3 257e 	strh.w	r2, [r3, #1406]	@ 0x57e
                VMC_CMDs[VMC_CMD_0x0066].CMD_Response[1] = 0x0106;
 80003c4:	4b51      	ldr	r3, [pc, #324]	@ (800050c <MDB_HandleCommand+0x22c>)
 80003c6:	f44f 7283 	mov.w	r2, #262	@ 0x106
 80003ca:	f8a3 2580 	strh.w	r2, [r3, #1408]	@ 0x580
                VMC_CMDs[VMC_CMD_0x0066].CMD_Response_Length = 2;
 80003ce:	4b4f      	ldr	r3, [pc, #316]	@ (800050c <MDB_HandleCommand+0x22c>)
 80003d0:	2202      	movs	r2, #2
 80003d2:	f8a3 25c6 	strh.w	r2, [r3, #1478]	@ 0x5c6
                BV_StateManager.BV_StateHnadler = STATE_DISABLED; // Set the system state to disabled
 80003d6:	4b4b      	ldr	r3, [pc, #300]	@ (8000504 <MDB_HandleCommand+0x224>)
 80003d8:	2200      	movs	r2, #0
 80003da:	701a      	strb	r2, [r3, #0]
                break;
 80003dc:	e05b      	b.n	8000496 <MDB_HandleCommand+0x1b6>
                VMC_CMDs[VMC_CMD_0x0066].CMD_Response[0] = 0x0009;
 80003de:	4b4b      	ldr	r3, [pc, #300]	@ (800050c <MDB_HandleCommand+0x22c>)
 80003e0:	2209      	movs	r2, #9
 80003e2:	f8a3 257e 	strh.w	r2, [r3, #1406]	@ 0x57e
                VMC_CMDs[VMC_CMD_0x0066].CMD_Response[1] = 0x0109;
 80003e6:	4b49      	ldr	r3, [pc, #292]	@ (800050c <MDB_HandleCommand+0x22c>)
 80003e8:	f240 1209 	movw	r2, #265	@ 0x109
 80003ec:	f8a3 2580 	strh.w	r2, [r3, #1408]	@ 0x580
                VMC_CMDs[VMC_CMD_0x0066].CMD_Response_Length = 2;
 80003f0:	4b46      	ldr	r3, [pc, #280]	@ (800050c <MDB_HandleCommand+0x22c>)
 80003f2:	2202      	movs	r2, #2
 80003f4:	f8a3 25c6 	strh.w	r2, [r3, #1478]	@ 0x5c6
                break;
 80003f8:	e04d      	b.n	8000496 <MDB_HandleCommand+0x1b6>
                if (HAL_GPIO_ReadPin(VENDING_GPIO_Port, VENDING_Pin) == GPIO_PIN_RESET
 80003fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003fe:	4844      	ldr	r0, [pc, #272]	@ (8000510 <MDB_HandleCommand+0x230>)
 8000400:	f000 fe12 	bl	8001028 <HAL_GPIO_ReadPin>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d117      	bne.n	800043a <MDB_HandleCommand+0x15a>
                                     && Vending_EN == false)
 800040a:	4b42      	ldr	r3, [pc, #264]	@ (8000514 <MDB_HandleCommand+0x234>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	f083 0301 	eor.w	r3, r3, #1
 8000412:	b2db      	uxtb	r3, r3
 8000414:	2b00      	cmp	r3, #0
 8000416:	d010      	beq.n	800043a <MDB_HandleCommand+0x15a>
                    VMC_CMDs[VMC_CMD_0x0066].CMD_Response[0] = 0x0083;
 8000418:	4b3c      	ldr	r3, [pc, #240]	@ (800050c <MDB_HandleCommand+0x22c>)
 800041a:	2283      	movs	r2, #131	@ 0x83
 800041c:	f8a3 257e 	strh.w	r2, [r3, #1406]	@ 0x57e
                    VMC_CMDs[VMC_CMD_0x0066].CMD_Response[1] = 0x0183;
 8000420:	4b3a      	ldr	r3, [pc, #232]	@ (800050c <MDB_HandleCommand+0x22c>)
 8000422:	f240 1283 	movw	r2, #387	@ 0x183
 8000426:	f8a3 2580 	strh.w	r2, [r3, #1408]	@ 0x580
                    VMC_CMDs[VMC_CMD_0x0066].CMD_Response_Length = 2;
 800042a:	4b38      	ldr	r3, [pc, #224]	@ (800050c <MDB_HandleCommand+0x22c>)
 800042c:	2202      	movs	r2, #2
 800042e:	f8a3 25c6 	strh.w	r2, [r3, #1478]	@ 0x5c6
                    Vending_EN = true;
 8000432:	4b38      	ldr	r3, [pc, #224]	@ (8000514 <MDB_HandleCommand+0x234>)
 8000434:	2201      	movs	r2, #1
 8000436:	701a      	strb	r2, [r3, #0]
 8000438:	e008      	b.n	800044c <MDB_HandleCommand+0x16c>
                    VMC_CMDs[VMC_CMD_0x0066].CMD_Response[0] = 0x0100;
 800043a:	4b34      	ldr	r3, [pc, #208]	@ (800050c <MDB_HandleCommand+0x22c>)
 800043c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000440:	f8a3 257e 	strh.w	r2, [r3, #1406]	@ 0x57e
                    VMC_CMDs[VMC_CMD_0x0066].CMD_Response_Length = 1;
 8000444:	4b31      	ldr	r3, [pc, #196]	@ (800050c <MDB_HandleCommand+0x22c>)
 8000446:	2201      	movs	r2, #1
 8000448:	f8a3 25c6 	strh.w	r2, [r3, #1478]	@ 0x5c6
                  if (HAL_GPIO_ReadPin(VENDING_GPIO_Port, VENDING_Pin) == GPIO_PIN_SET
 800044c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000450:	482f      	ldr	r0, [pc, #188]	@ (8000510 <MDB_HandleCommand+0x230>)
 8000452:	f000 fde9 	bl	8001028 <HAL_GPIO_ReadPin>
 8000456:	4603      	mov	r3, r0
 8000458:	2b01      	cmp	r3, #1
 800045a:	d11b      	bne.n	8000494 <MDB_HandleCommand+0x1b4>
                                     && Vending_EN == true)
 800045c:	4b2d      	ldr	r3, [pc, #180]	@ (8000514 <MDB_HandleCommand+0x234>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d017      	beq.n	8000494 <MDB_HandleCommand+0x1b4>
                    Vending_EN = false;
 8000464:	4b2b      	ldr	r3, [pc, #172]	@ (8000514 <MDB_HandleCommand+0x234>)
 8000466:	2200      	movs	r2, #0
 8000468:	701a      	strb	r2, [r3, #0]
                break;
 800046a:	e013      	b.n	8000494 <MDB_HandleCommand+0x1b4>
                BV_StateManager.BV_StateHnadler = STATE_ERROR; // Set the system state to error
 800046c:	4b25      	ldr	r3, [pc, #148]	@ (8000504 <MDB_HandleCommand+0x224>)
 800046e:	2204      	movs	r2, #4
 8000470:	701a      	strb	r2, [r3, #0]
                break;
 8000472:	e010      	b.n	8000496 <MDB_HandleCommand+0x1b6>
            else if (VMC_CMDs[temp_index].CMD[0] == VMC_CMDs[VMC_CMD_0x009D].CMD[0])
 8000474:	4a25      	ldr	r2, [pc, #148]	@ (800050c <MDB_HandleCommand+0x22c>)
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	2194      	movs	r1, #148	@ 0x94
 800047a:	fb01 f303 	mul.w	r3, r1, r3
 800047e:	4413      	add	r3, r2
 8000480:	881a      	ldrh	r2, [r3, #0]
 8000482:	4b22      	ldr	r3, [pc, #136]	@ (800050c <MDB_HandleCommand+0x22c>)
 8000484:	f8b3 3784 	ldrh.w	r3, [r3, #1924]	@ 0x784
 8000488:	429a      	cmp	r2, r3
 800048a:	d104      	bne.n	8000496 <MDB_HandleCommand+0x1b6>
              BV_StateManager.BV_StateHnadler = STATE_READY; // Set the system state to ready
 800048c:	4b1d      	ldr	r3, [pc, #116]	@ (8000504 <MDB_HandleCommand+0x224>)
 800048e:	2202      	movs	r2, #2
 8000490:	701a      	strb	r2, [r3, #0]
 8000492:	e000      	b.n	8000496 <MDB_HandleCommand+0x1b6>
                break;
 8000494:	bf00      	nop
            MDB_SendResponseWithModeBit(VMC_CMDs[BV_MDB_BusManager.MDB_Process_CMD_Index].CMD_Response,
 8000496:	4b1c      	ldr	r3, [pc, #112]	@ (8000508 <MDB_HandleCommand+0x228>)
 8000498:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 800049c:	461a      	mov	r2, r3
 800049e:	2394      	movs	r3, #148	@ 0x94
 80004a0:	fb02 f303 	mul.w	r3, r2, r3
 80004a4:	3348      	adds	r3, #72	@ 0x48
 80004a6:	4a19      	ldr	r2, [pc, #100]	@ (800050c <MDB_HandleCommand+0x22c>)
 80004a8:	4413      	add	r3, r2
 80004aa:	1c9a      	adds	r2, r3, #2
                                        VMC_CMDs[BV_MDB_BusManager.MDB_Process_CMD_Index].CMD_Response_Length);
 80004ac:	4b16      	ldr	r3, [pc, #88]	@ (8000508 <MDB_HandleCommand+0x228>)
 80004ae:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 80004b2:	4618      	mov	r0, r3
 80004b4:	4915      	ldr	r1, [pc, #84]	@ (800050c <MDB_HandleCommand+0x22c>)
 80004b6:	2394      	movs	r3, #148	@ 0x94
 80004b8:	fb00 f303 	mul.w	r3, r0, r3
 80004bc:	440b      	add	r3, r1
 80004be:	3392      	adds	r3, #146	@ 0x92
 80004c0:	881b      	ldrh	r3, [r3, #0]
            MDB_SendResponseWithModeBit(VMC_CMDs[BV_MDB_BusManager.MDB_Process_CMD_Index].CMD_Response,
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	4619      	mov	r1, r3
 80004c6:	4610      	mov	r0, r2
 80004c8:	f7ff fef6 	bl	80002b8 <MDB_SendResponseWithModeBit>
        BV_StateManager.BV_CMD_RX_StateHandler = CMD_RX_READY; // Set the state to READY for the next command
 80004cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000504 <MDB_HandleCommand+0x224>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	705a      	strb	r2, [r3, #1]
        BV_StateManager.BV_CMD_Process_StateHandler = CMD_PROCESS_READY; // Set the command processing state to DONE
 80004d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000504 <MDB_HandleCommand+0x224>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	70da      	strb	r2, [r3, #3]
        BV_MDB_BusManager.RXBuffer_index = 0; // Reset the RX buffer index
 80004d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000508 <MDB_HandleCommand+0x228>)
 80004da:	2200      	movs	r2, #0
 80004dc:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      break;
 80004e0:	e00c      	b.n	80004fc <MDB_HandleCommand+0x21c>
      BV_StateManager.BV_CMD_Process_StateHandler = CMD_PROCESS_READY; // Set the command processing state to READY
 80004e2:	4b08      	ldr	r3, [pc, #32]	@ (8000504 <MDB_HandleCommand+0x224>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	70da      	strb	r2, [r3, #3]
      BV_MDB_BusManager.RXBuffer_index = 0; // Reset the RX buffer index for the next command
 80004e8:	4b07      	ldr	r3, [pc, #28]	@ (8000508 <MDB_HandleCommand+0x228>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      break;
 80004f0:	e004      	b.n	80004fc <MDB_HandleCommand+0x21c>
      return;
 80004f2:	bf00      	nop
 80004f4:	e002      	b.n	80004fc <MDB_HandleCommand+0x21c>
      return;
 80004f6:	bf00      	nop
 80004f8:	e000      	b.n	80004fc <MDB_HandleCommand+0x21c>
        return;
 80004fa:	bf00      	nop
  }
}
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd90      	pop	{r4, r7, pc}
 8000502:	bf00      	nop
 8000504:	20000098 	.word	0x20000098
 8000508:	20000000 	.word	0x20000000
 800050c:	2000009c 	.word	0x2000009c
 8000510:	40010c00 	.word	0x40010c00
 8000514:	20000a94 	.word	0x20000a94

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 f9de 	bl	80008dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f81c 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 f89e 	bl	8000664 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000528:	f000 f872 	bl	8000610 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800052c:	f007 fc3e 	bl	8007dac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // Initialize MDB Peripheral
  MDB_Peripheral_Init();
 8000530:	f7ff feb4 	bl	800029c <MDB_Peripheral_Init>
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wmissing-noreturn"
  HAL_UART_Receive_IT(&huart1, (uint8_t *) mdb_rx_buf, 1);
 8000534:	2201      	movs	r2, #1
 8000536:	4906      	ldr	r1, [pc, #24]	@ (8000550 <main+0x38>)
 8000538:	4806      	ldr	r0, [pc, #24]	@ (8000554 <main+0x3c>)
 800053a:	f003 f838 	bl	80035ae <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MDB_HandleCommand(BV_MDB_BusManager.MDB_RXbuffer, BV_MDB_BusManager.RXBuffer_index);
 800053e:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <main+0x40>)
 8000540:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8000544:	4619      	mov	r1, r3
 8000546:	4804      	ldr	r0, [pc, #16]	@ (8000558 <main+0x40>)
 8000548:	f7ff feca 	bl	80002e0 <MDB_HandleCommand>
 800054c:	e7f7      	b.n	800053e <main+0x26>
 800054e:	bf00      	nop
 8000550:	20000a98 	.word	0x20000a98
 8000554:	20000a4c 	.word	0x20000a4c
 8000558:	20000000 	.word	0x20000000

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	@ 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000566:	2228      	movs	r2, #40	@ 0x28
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f008 f894 	bl	8008698 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058c:	2301      	movs	r3, #1
 800058e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000590:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000594:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059a:	2301      	movs	r3, #1
 800059c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059e:	2302      	movs	r3, #2
 80005a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005a8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80005ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 fab0 	bl	8002b18 <HAL_RCC_OscConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005be:	f000 f895 	bl	80006ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c2:	230f      	movs	r3, #15
 80005c4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c6:	2302      	movs	r3, #2
 80005c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005d2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005d8:	f107 0314 	add.w	r3, r7, #20
 80005dc:	2102      	movs	r1, #2
 80005de:	4618      	mov	r0, r3
 80005e0:	f002 fd1c 	bl	800301c <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x92>
  {
    Error_Handler();
 80005ea:	f000 f87f 	bl	80006ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80005ee:	2310      	movs	r3, #16
 80005f0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	4618      	mov	r0, r3
 80005fa:	f002 fe9d 	bl	8003338 <HAL_RCCEx_PeriphCLKConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000604:	f000 f872 	bl	80006ec <Error_Handler>
  }
}
 8000608:	bf00      	nop
 800060a:	3750      	adds	r7, #80	@ 0x50
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000614:	4b11      	ldr	r3, [pc, #68]	@ (800065c <MX_USART1_UART_Init+0x4c>)
 8000616:	4a12      	ldr	r2, [pc, #72]	@ (8000660 <MX_USART1_UART_Init+0x50>)
 8000618:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800061a:	4b10      	ldr	r3, [pc, #64]	@ (800065c <MX_USART1_UART_Init+0x4c>)
 800061c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000620:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000622:	4b0e      	ldr	r3, [pc, #56]	@ (800065c <MX_USART1_UART_Init+0x4c>)
 8000624:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000628:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800062a:	4b0c      	ldr	r3, [pc, #48]	@ (800065c <MX_USART1_UART_Init+0x4c>)
 800062c:	2200      	movs	r2, #0
 800062e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000630:	4b0a      	ldr	r3, [pc, #40]	@ (800065c <MX_USART1_UART_Init+0x4c>)
 8000632:	2200      	movs	r2, #0
 8000634:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000636:	4b09      	ldr	r3, [pc, #36]	@ (800065c <MX_USART1_UART_Init+0x4c>)
 8000638:	220c      	movs	r2, #12
 800063a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063c:	4b07      	ldr	r3, [pc, #28]	@ (800065c <MX_USART1_UART_Init+0x4c>)
 800063e:	2200      	movs	r2, #0
 8000640:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000642:	4b06      	ldr	r3, [pc, #24]	@ (800065c <MX_USART1_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000648:	4804      	ldr	r0, [pc, #16]	@ (800065c <MX_USART1_UART_Init+0x4c>)
 800064a:	f002 ff2b 	bl	80034a4 <HAL_UART_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8000654:	f000 f84a 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000a4c 	.word	0x20000a4c
 8000660:	40013800 	.word	0x40013800

08000664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066a:	f107 0310 	add.w	r3, r7, #16
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000678:	4b1a      	ldr	r3, [pc, #104]	@ (80006e4 <MX_GPIO_Init+0x80>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4a19      	ldr	r2, [pc, #100]	@ (80006e4 <MX_GPIO_Init+0x80>)
 800067e:	f043 0320 	orr.w	r3, r3, #32
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b17      	ldr	r3, [pc, #92]	@ (80006e4 <MX_GPIO_Init+0x80>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f003 0320 	and.w	r3, r3, #32
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000690:	4b14      	ldr	r3, [pc, #80]	@ (80006e4 <MX_GPIO_Init+0x80>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4a13      	ldr	r2, [pc, #76]	@ (80006e4 <MX_GPIO_Init+0x80>)
 8000696:	f043 0304 	orr.w	r3, r3, #4
 800069a:	6193      	str	r3, [r2, #24]
 800069c:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <MX_GPIO_Init+0x80>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f003 0304 	and.w	r3, r3, #4
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a8:	4b0e      	ldr	r3, [pc, #56]	@ (80006e4 <MX_GPIO_Init+0x80>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	4a0d      	ldr	r2, [pc, #52]	@ (80006e4 <MX_GPIO_Init+0x80>)
 80006ae:	f043 0308 	orr.w	r3, r3, #8
 80006b2:	6193      	str	r3, [r2, #24]
 80006b4:	4b0b      	ldr	r3, [pc, #44]	@ (80006e4 <MX_GPIO_Init+0x80>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	f003 0308 	and.w	r3, r3, #8
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : VENDING_Pin */
  GPIO_InitStruct.Pin = VENDING_Pin;
 80006c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006ca:	2301      	movs	r3, #1
 80006cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(VENDING_GPIO_Port, &GPIO_InitStruct);
 80006ce:	f107 0310 	add.w	r3, r7, #16
 80006d2:	4619      	mov	r1, r3
 80006d4:	4804      	ldr	r0, [pc, #16]	@ (80006e8 <MX_GPIO_Init+0x84>)
 80006d6:	f000 fb23 	bl	8000d20 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006da:	bf00      	nop
 80006dc:	3720      	adds	r7, #32
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40021000 	.word	0x40021000
 80006e8:	40010c00 	.word	0x40010c00

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
}
 80006f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <Error_Handler+0x8>

080006f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006fe:	4b15      	ldr	r3, [pc, #84]	@ (8000754 <HAL_MspInit+0x5c>)
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	4a14      	ldr	r2, [pc, #80]	@ (8000754 <HAL_MspInit+0x5c>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6193      	str	r3, [r2, #24]
 800070a:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <HAL_MspInit+0x5c>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000716:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <HAL_MspInit+0x5c>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	4a0e      	ldr	r2, [pc, #56]	@ (8000754 <HAL_MspInit+0x5c>)
 800071c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000720:	61d3      	str	r3, [r2, #28]
 8000722:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <HAL_MspInit+0x5c>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800072e:	4b0a      	ldr	r3, [pc, #40]	@ (8000758 <HAL_MspInit+0x60>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	4a04      	ldr	r2, [pc, #16]	@ (8000758 <HAL_MspInit+0x60>)
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074a:	bf00      	nop
 800074c:	3714      	adds	r7, #20
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	40021000 	.word	0x40021000
 8000758:	40010000 	.word	0x40010000

0800075c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b088      	sub	sp, #32
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000764:	f107 0310 	add.w	r3, r7, #16
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a20      	ldr	r2, [pc, #128]	@ (80007f8 <HAL_UART_MspInit+0x9c>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d139      	bne.n	80007f0 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800077c:	4b1f      	ldr	r3, [pc, #124]	@ (80007fc <HAL_UART_MspInit+0xa0>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	4a1e      	ldr	r2, [pc, #120]	@ (80007fc <HAL_UART_MspInit+0xa0>)
 8000782:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000786:	6193      	str	r3, [r2, #24]
 8000788:	4b1c      	ldr	r3, [pc, #112]	@ (80007fc <HAL_UART_MspInit+0xa0>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000794:	4b19      	ldr	r3, [pc, #100]	@ (80007fc <HAL_UART_MspInit+0xa0>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	4a18      	ldr	r2, [pc, #96]	@ (80007fc <HAL_UART_MspInit+0xa0>)
 800079a:	f043 0304 	orr.w	r3, r3, #4
 800079e:	6193      	str	r3, [r2, #24]
 80007a0:	4b16      	ldr	r3, [pc, #88]	@ (80007fc <HAL_UART_MspInit+0xa0>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	f003 0304 	and.w	r3, r3, #4
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b2:	2302      	movs	r3, #2
 80007b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007b6:	2303      	movs	r3, #3
 80007b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ba:	f107 0310 	add.w	r3, r7, #16
 80007be:	4619      	mov	r1, r3
 80007c0:	480f      	ldr	r0, [pc, #60]	@ (8000800 <HAL_UART_MspInit+0xa4>)
 80007c2:	f000 faad 	bl	8000d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d4:	f107 0310 	add.w	r3, r7, #16
 80007d8:	4619      	mov	r1, r3
 80007da:	4809      	ldr	r0, [pc, #36]	@ (8000800 <HAL_UART_MspInit+0xa4>)
 80007dc:	f000 faa0 	bl	8000d20 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2100      	movs	r1, #0
 80007e4:	2025      	movs	r0, #37	@ 0x25
 80007e6:	f000 f9b2 	bl	8000b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007ea:	2025      	movs	r0, #37	@ 0x25
 80007ec:	f000 f9cb 	bl	8000b86 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80007f0:	bf00      	nop
 80007f2:	3720      	adds	r7, #32
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40013800 	.word	0x40013800
 80007fc:	40021000 	.word	0x40021000
 8000800:	40010800 	.word	0x40010800

08000804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <NMI_Handler+0x4>

0800080c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <HardFault_Handler+0x4>

08000814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <MemManage_Handler+0x4>

0800081c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <BusFault_Handler+0x4>

08000824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <UsageFault_Handler+0x4>

0800082c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr

08000838 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr

08000850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000854:	f000 f888 	bl	8000968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}

0800085c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000860:	4802      	ldr	r0, [pc, #8]	@ (800086c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000862:	f000 fd14 	bl	800128e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20001768 	.word	0x20001768

08000870 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000874:	4802      	ldr	r0, [pc, #8]	@ (8000880 <USART1_IRQHandler+0x10>)
 8000876:	f002 febf 	bl	80035f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000a4c 	.word	0x20000a4c

08000884 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000890:	f7ff fff8 	bl	8000884 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000894:	480b      	ldr	r0, [pc, #44]	@ (80008c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000896:	490c      	ldr	r1, [pc, #48]	@ (80008c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000898:	4a0c      	ldr	r2, [pc, #48]	@ (80008cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800089c:	e002      	b.n	80008a4 <LoopCopyDataInit>

0800089e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800089e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008a2:	3304      	adds	r3, #4

080008a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a8:	d3f9      	bcc.n	800089e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008aa:	4a09      	ldr	r2, [pc, #36]	@ (80008d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008ac:	4c09      	ldr	r4, [pc, #36]	@ (80008d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b0:	e001      	b.n	80008b6 <LoopFillZerobss>

080008b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b4:	3204      	adds	r2, #4

080008b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b8:	d3fb      	bcc.n	80008b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ba:	f007 fef5 	bl	80086a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008be:	f7ff fe2b 	bl	8000518 <main>
  bx lr
 80008c2:	4770      	bx	lr
  ldr r0, =_sdata
 80008c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c8:	20000a30 	.word	0x20000a30
  ldr r2, =_sidata
 80008cc:	08008784 	.word	0x08008784
  ldr r2, =_sbss
 80008d0:	20000a30 	.word	0x20000a30
  ldr r4, =_ebss
 80008d4:	20001c60 	.word	0x20001c60

080008d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d8:	e7fe      	b.n	80008d8 <ADC1_2_IRQHandler>
	...

080008dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e0:	4b08      	ldr	r3, [pc, #32]	@ (8000904 <HAL_Init+0x28>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a07      	ldr	r2, [pc, #28]	@ (8000904 <HAL_Init+0x28>)
 80008e6:	f043 0310 	orr.w	r3, r3, #16
 80008ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ec:	2003      	movs	r0, #3
 80008ee:	f000 f923 	bl	8000b38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008f2:	200f      	movs	r0, #15
 80008f4:	f000 f808 	bl	8000908 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008f8:	f7ff fefe 	bl	80006f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40022000 	.word	0x40022000

08000908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000910:	4b12      	ldr	r3, [pc, #72]	@ (800095c <HAL_InitTick+0x54>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <HAL_InitTick+0x58>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	4619      	mov	r1, r3
 800091a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800091e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000922:	fbb2 f3f3 	udiv	r3, r2, r3
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f93b 	bl	8000ba2 <HAL_SYSTICK_Config>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000932:	2301      	movs	r3, #1
 8000934:	e00e      	b.n	8000954 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2b0f      	cmp	r3, #15
 800093a:	d80a      	bhi.n	8000952 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800093c:	2200      	movs	r2, #0
 800093e:	6879      	ldr	r1, [r7, #4]
 8000940:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000944:	f000 f903 	bl	8000b4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000948:	4a06      	ldr	r2, [pc, #24]	@ (8000964 <HAL_InitTick+0x5c>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800094e:	2300      	movs	r3, #0
 8000950:	e000      	b.n	8000954 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000952:	2301      	movs	r3, #1
}
 8000954:	4618      	mov	r0, r3
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	200008b4 	.word	0x200008b4
 8000960:	200008bc 	.word	0x200008bc
 8000964:	200008b8 	.word	0x200008b8

08000968 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800096c:	4b05      	ldr	r3, [pc, #20]	@ (8000984 <HAL_IncTick+0x1c>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	461a      	mov	r2, r3
 8000972:	4b05      	ldr	r3, [pc, #20]	@ (8000988 <HAL_IncTick+0x20>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4413      	add	r3, r2
 8000978:	4a03      	ldr	r2, [pc, #12]	@ (8000988 <HAL_IncTick+0x20>)
 800097a:	6013      	str	r3, [r2, #0]
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr
 8000984:	200008bc 	.word	0x200008bc
 8000988:	20000a9c 	.word	0x20000a9c

0800098c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  return uwTick;
 8000990:	4b02      	ldr	r3, [pc, #8]	@ (800099c <HAL_GetTick+0x10>)
 8000992:	681b      	ldr	r3, [r3, #0]
}
 8000994:	4618      	mov	r0, r3
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr
 800099c:	20000a9c 	.word	0x20000a9c

080009a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f003 0307 	and.w	r3, r3, #7
 80009ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b0:	4b0c      	ldr	r3, [pc, #48]	@ (80009e4 <__NVIC_SetPriorityGrouping+0x44>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009b6:	68ba      	ldr	r2, [r7, #8]
 80009b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009bc:	4013      	ands	r3, r2
 80009be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009d2:	4a04      	ldr	r2, [pc, #16]	@ (80009e4 <__NVIC_SetPriorityGrouping+0x44>)
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	60d3      	str	r3, [r2, #12]
}
 80009d8:	bf00      	nop
 80009da:	3714      	adds	r7, #20
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009ec:	4b04      	ldr	r3, [pc, #16]	@ (8000a00 <__NVIC_GetPriorityGrouping+0x18>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	0a1b      	lsrs	r3, r3, #8
 80009f2:	f003 0307 	and.w	r3, r3, #7
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc80      	pop	{r7}
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	db0b      	blt.n	8000a2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	f003 021f 	and.w	r2, r3, #31
 8000a1c:	4906      	ldr	r1, [pc, #24]	@ (8000a38 <__NVIC_EnableIRQ+0x34>)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	095b      	lsrs	r3, r3, #5
 8000a24:	2001      	movs	r0, #1
 8000a26:	fa00 f202 	lsl.w	r2, r0, r2
 8000a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr
 8000a38:	e000e100 	.word	0xe000e100

08000a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	6039      	str	r1, [r7, #0]
 8000a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	db0a      	blt.n	8000a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	490c      	ldr	r1, [pc, #48]	@ (8000a88 <__NVIC_SetPriority+0x4c>)
 8000a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5a:	0112      	lsls	r2, r2, #4
 8000a5c:	b2d2      	uxtb	r2, r2
 8000a5e:	440b      	add	r3, r1
 8000a60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a64:	e00a      	b.n	8000a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	4908      	ldr	r1, [pc, #32]	@ (8000a8c <__NVIC_SetPriority+0x50>)
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	f003 030f 	and.w	r3, r3, #15
 8000a72:	3b04      	subs	r3, #4
 8000a74:	0112      	lsls	r2, r2, #4
 8000a76:	b2d2      	uxtb	r2, r2
 8000a78:	440b      	add	r3, r1
 8000a7a:	761a      	strb	r2, [r3, #24]
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	e000e100 	.word	0xe000e100
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b089      	sub	sp, #36	@ 0x24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	f1c3 0307 	rsb	r3, r3, #7
 8000aaa:	2b04      	cmp	r3, #4
 8000aac:	bf28      	it	cs
 8000aae:	2304      	movcs	r3, #4
 8000ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	2b06      	cmp	r3, #6
 8000ab8:	d902      	bls.n	8000ac0 <NVIC_EncodePriority+0x30>
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	3b03      	subs	r3, #3
 8000abe:	e000      	b.n	8000ac2 <NVIC_EncodePriority+0x32>
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	43da      	mvns	r2, r3
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	401a      	ands	r2, r3
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae2:	43d9      	mvns	r1, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae8:	4313      	orrs	r3, r2
         );
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3724      	adds	r7, #36	@ 0x24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr

08000af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b04:	d301      	bcc.n	8000b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b06:	2301      	movs	r3, #1
 8000b08:	e00f      	b.n	8000b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b34 <SysTick_Config+0x40>)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b12:	210f      	movs	r1, #15
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b18:	f7ff ff90 	bl	8000a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b1c:	4b05      	ldr	r3, [pc, #20]	@ (8000b34 <SysTick_Config+0x40>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b22:	4b04      	ldr	r3, [pc, #16]	@ (8000b34 <SysTick_Config+0x40>)
 8000b24:	2207      	movs	r2, #7
 8000b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	e000e010 	.word	0xe000e010

08000b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff ff2d 	bl	80009a0 <__NVIC_SetPriorityGrouping>
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b086      	sub	sp, #24
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	4603      	mov	r3, r0
 8000b56:	60b9      	str	r1, [r7, #8]
 8000b58:	607a      	str	r2, [r7, #4]
 8000b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b60:	f7ff ff42 	bl	80009e8 <__NVIC_GetPriorityGrouping>
 8000b64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	68b9      	ldr	r1, [r7, #8]
 8000b6a:	6978      	ldr	r0, [r7, #20]
 8000b6c:	f7ff ff90 	bl	8000a90 <NVIC_EncodePriority>
 8000b70:	4602      	mov	r2, r0
 8000b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b76:	4611      	mov	r1, r2
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff ff5f 	bl	8000a3c <__NVIC_SetPriority>
}
 8000b7e:	bf00      	nop
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff ff35 	bl	8000a04 <__NVIC_EnableIRQ>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff ffa2 	bl	8000af4 <SysTick_Config>
 8000bb0:	4603      	mov	r3, r0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	b085      	sub	sp, #20
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	d008      	beq.n	8000be4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2204      	movs	r2, #4
 8000bd6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000be0:	2301      	movs	r3, #1
 8000be2:	e020      	b.n	8000c26 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f022 020e 	bic.w	r2, r2, #14
 8000bf2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f022 0201 	bic.w	r2, r2, #1
 8000c02:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c12:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2201      	movs	r2, #1
 8000c18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr

08000c30 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d005      	beq.n	8000c54 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2204      	movs	r2, #4
 8000c4c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	73fb      	strb	r3, [r7, #15]
 8000c52:	e051      	b.n	8000cf8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f022 020e 	bic.w	r2, r2, #14
 8000c62:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f022 0201 	bic.w	r2, r2, #1
 8000c72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a22      	ldr	r2, [pc, #136]	@ (8000d04 <HAL_DMA_Abort_IT+0xd4>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d029      	beq.n	8000cd2 <HAL_DMA_Abort_IT+0xa2>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a21      	ldr	r2, [pc, #132]	@ (8000d08 <HAL_DMA_Abort_IT+0xd8>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d022      	beq.n	8000cce <HAL_DMA_Abort_IT+0x9e>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a1f      	ldr	r2, [pc, #124]	@ (8000d0c <HAL_DMA_Abort_IT+0xdc>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d01a      	beq.n	8000cc8 <HAL_DMA_Abort_IT+0x98>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a1e      	ldr	r2, [pc, #120]	@ (8000d10 <HAL_DMA_Abort_IT+0xe0>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d012      	beq.n	8000cc2 <HAL_DMA_Abort_IT+0x92>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a1c      	ldr	r2, [pc, #112]	@ (8000d14 <HAL_DMA_Abort_IT+0xe4>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d00a      	beq.n	8000cbc <HAL_DMA_Abort_IT+0x8c>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a1b      	ldr	r2, [pc, #108]	@ (8000d18 <HAL_DMA_Abort_IT+0xe8>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d102      	bne.n	8000cb6 <HAL_DMA_Abort_IT+0x86>
 8000cb0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000cb4:	e00e      	b.n	8000cd4 <HAL_DMA_Abort_IT+0xa4>
 8000cb6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000cba:	e00b      	b.n	8000cd4 <HAL_DMA_Abort_IT+0xa4>
 8000cbc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cc0:	e008      	b.n	8000cd4 <HAL_DMA_Abort_IT+0xa4>
 8000cc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cc6:	e005      	b.n	8000cd4 <HAL_DMA_Abort_IT+0xa4>
 8000cc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ccc:	e002      	b.n	8000cd4 <HAL_DMA_Abort_IT+0xa4>
 8000cce:	2310      	movs	r3, #16
 8000cd0:	e000      	b.n	8000cd4 <HAL_DMA_Abort_IT+0xa4>
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	4a11      	ldr	r2, [pc, #68]	@ (8000d1c <HAL_DMA_Abort_IT+0xec>)
 8000cd6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2201      	movs	r2, #1
 8000cdc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d003      	beq.n	8000cf8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	4798      	blx	r3
    } 
  }
  return status;
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40020008 	.word	0x40020008
 8000d08:	4002001c 	.word	0x4002001c
 8000d0c:	40020030 	.word	0x40020030
 8000d10:	40020044 	.word	0x40020044
 8000d14:	40020058 	.word	0x40020058
 8000d18:	4002006c 	.word	0x4002006c
 8000d1c:	40020000 	.word	0x40020000

08000d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b08b      	sub	sp, #44	@ 0x2c
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d32:	e169      	b.n	8001008 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d34:	2201      	movs	r2, #1
 8000d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	69fa      	ldr	r2, [r7, #28]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	f040 8158 	bne.w	8001002 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	4a9a      	ldr	r2, [pc, #616]	@ (8000fc0 <HAL_GPIO_Init+0x2a0>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d05e      	beq.n	8000e1a <HAL_GPIO_Init+0xfa>
 8000d5c:	4a98      	ldr	r2, [pc, #608]	@ (8000fc0 <HAL_GPIO_Init+0x2a0>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d875      	bhi.n	8000e4e <HAL_GPIO_Init+0x12e>
 8000d62:	4a98      	ldr	r2, [pc, #608]	@ (8000fc4 <HAL_GPIO_Init+0x2a4>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d058      	beq.n	8000e1a <HAL_GPIO_Init+0xfa>
 8000d68:	4a96      	ldr	r2, [pc, #600]	@ (8000fc4 <HAL_GPIO_Init+0x2a4>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d86f      	bhi.n	8000e4e <HAL_GPIO_Init+0x12e>
 8000d6e:	4a96      	ldr	r2, [pc, #600]	@ (8000fc8 <HAL_GPIO_Init+0x2a8>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d052      	beq.n	8000e1a <HAL_GPIO_Init+0xfa>
 8000d74:	4a94      	ldr	r2, [pc, #592]	@ (8000fc8 <HAL_GPIO_Init+0x2a8>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d869      	bhi.n	8000e4e <HAL_GPIO_Init+0x12e>
 8000d7a:	4a94      	ldr	r2, [pc, #592]	@ (8000fcc <HAL_GPIO_Init+0x2ac>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d04c      	beq.n	8000e1a <HAL_GPIO_Init+0xfa>
 8000d80:	4a92      	ldr	r2, [pc, #584]	@ (8000fcc <HAL_GPIO_Init+0x2ac>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d863      	bhi.n	8000e4e <HAL_GPIO_Init+0x12e>
 8000d86:	4a92      	ldr	r2, [pc, #584]	@ (8000fd0 <HAL_GPIO_Init+0x2b0>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d046      	beq.n	8000e1a <HAL_GPIO_Init+0xfa>
 8000d8c:	4a90      	ldr	r2, [pc, #576]	@ (8000fd0 <HAL_GPIO_Init+0x2b0>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d85d      	bhi.n	8000e4e <HAL_GPIO_Init+0x12e>
 8000d92:	2b12      	cmp	r3, #18
 8000d94:	d82a      	bhi.n	8000dec <HAL_GPIO_Init+0xcc>
 8000d96:	2b12      	cmp	r3, #18
 8000d98:	d859      	bhi.n	8000e4e <HAL_GPIO_Init+0x12e>
 8000d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8000da0 <HAL_GPIO_Init+0x80>)
 8000d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da0:	08000e1b 	.word	0x08000e1b
 8000da4:	08000df5 	.word	0x08000df5
 8000da8:	08000e07 	.word	0x08000e07
 8000dac:	08000e49 	.word	0x08000e49
 8000db0:	08000e4f 	.word	0x08000e4f
 8000db4:	08000e4f 	.word	0x08000e4f
 8000db8:	08000e4f 	.word	0x08000e4f
 8000dbc:	08000e4f 	.word	0x08000e4f
 8000dc0:	08000e4f 	.word	0x08000e4f
 8000dc4:	08000e4f 	.word	0x08000e4f
 8000dc8:	08000e4f 	.word	0x08000e4f
 8000dcc:	08000e4f 	.word	0x08000e4f
 8000dd0:	08000e4f 	.word	0x08000e4f
 8000dd4:	08000e4f 	.word	0x08000e4f
 8000dd8:	08000e4f 	.word	0x08000e4f
 8000ddc:	08000e4f 	.word	0x08000e4f
 8000de0:	08000e4f 	.word	0x08000e4f
 8000de4:	08000dfd 	.word	0x08000dfd
 8000de8:	08000e11 	.word	0x08000e11
 8000dec:	4a79      	ldr	r2, [pc, #484]	@ (8000fd4 <HAL_GPIO_Init+0x2b4>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d013      	beq.n	8000e1a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000df2:	e02c      	b.n	8000e4e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	623b      	str	r3, [r7, #32]
          break;
 8000dfa:	e029      	b.n	8000e50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	3304      	adds	r3, #4
 8000e02:	623b      	str	r3, [r7, #32]
          break;
 8000e04:	e024      	b.n	8000e50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	3308      	adds	r3, #8
 8000e0c:	623b      	str	r3, [r7, #32]
          break;
 8000e0e:	e01f      	b.n	8000e50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	330c      	adds	r3, #12
 8000e16:	623b      	str	r3, [r7, #32]
          break;
 8000e18:	e01a      	b.n	8000e50 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d102      	bne.n	8000e28 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e22:	2304      	movs	r3, #4
 8000e24:	623b      	str	r3, [r7, #32]
          break;
 8000e26:	e013      	b.n	8000e50 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d105      	bne.n	8000e3c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e30:	2308      	movs	r3, #8
 8000e32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	69fa      	ldr	r2, [r7, #28]
 8000e38:	611a      	str	r2, [r3, #16]
          break;
 8000e3a:	e009      	b.n	8000e50 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e3c:	2308      	movs	r3, #8
 8000e3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	69fa      	ldr	r2, [r7, #28]
 8000e44:	615a      	str	r2, [r3, #20]
          break;
 8000e46:	e003      	b.n	8000e50 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	623b      	str	r3, [r7, #32]
          break;
 8000e4c:	e000      	b.n	8000e50 <HAL_GPIO_Init+0x130>
          break;
 8000e4e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	2bff      	cmp	r3, #255	@ 0xff
 8000e54:	d801      	bhi.n	8000e5a <HAL_GPIO_Init+0x13a>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	e001      	b.n	8000e5e <HAL_GPIO_Init+0x13e>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	2bff      	cmp	r3, #255	@ 0xff
 8000e64:	d802      	bhi.n	8000e6c <HAL_GPIO_Init+0x14c>
 8000e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	e002      	b.n	8000e72 <HAL_GPIO_Init+0x152>
 8000e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e6e:	3b08      	subs	r3, #8
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	210f      	movs	r1, #15
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	401a      	ands	r2, r3
 8000e84:	6a39      	ldr	r1, [r7, #32]
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8c:	431a      	orrs	r2, r3
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	f000 80b1 	beq.w	8001002 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ea0:	4b4d      	ldr	r3, [pc, #308]	@ (8000fd8 <HAL_GPIO_Init+0x2b8>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	4a4c      	ldr	r2, [pc, #304]	@ (8000fd8 <HAL_GPIO_Init+0x2b8>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	6193      	str	r3, [r2, #24]
 8000eac:	4b4a      	ldr	r3, [pc, #296]	@ (8000fd8 <HAL_GPIO_Init+0x2b8>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000eb8:	4a48      	ldr	r2, [pc, #288]	@ (8000fdc <HAL_GPIO_Init+0x2bc>)
 8000eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ebc:	089b      	lsrs	r3, r3, #2
 8000ebe:	3302      	adds	r3, #2
 8000ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	220f      	movs	r2, #15
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a40      	ldr	r2, [pc, #256]	@ (8000fe0 <HAL_GPIO_Init+0x2c0>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d013      	beq.n	8000f0c <HAL_GPIO_Init+0x1ec>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a3f      	ldr	r2, [pc, #252]	@ (8000fe4 <HAL_GPIO_Init+0x2c4>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d00d      	beq.n	8000f08 <HAL_GPIO_Init+0x1e8>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a3e      	ldr	r2, [pc, #248]	@ (8000fe8 <HAL_GPIO_Init+0x2c8>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d007      	beq.n	8000f04 <HAL_GPIO_Init+0x1e4>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a3d      	ldr	r2, [pc, #244]	@ (8000fec <HAL_GPIO_Init+0x2cc>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d101      	bne.n	8000f00 <HAL_GPIO_Init+0x1e0>
 8000efc:	2303      	movs	r3, #3
 8000efe:	e006      	b.n	8000f0e <HAL_GPIO_Init+0x1ee>
 8000f00:	2304      	movs	r3, #4
 8000f02:	e004      	b.n	8000f0e <HAL_GPIO_Init+0x1ee>
 8000f04:	2302      	movs	r3, #2
 8000f06:	e002      	b.n	8000f0e <HAL_GPIO_Init+0x1ee>
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e000      	b.n	8000f0e <HAL_GPIO_Init+0x1ee>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f10:	f002 0203 	and.w	r2, r2, #3
 8000f14:	0092      	lsls	r2, r2, #2
 8000f16:	4093      	lsls	r3, r2
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f1e:	492f      	ldr	r1, [pc, #188]	@ (8000fdc <HAL_GPIO_Init+0x2bc>)
 8000f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f22:	089b      	lsrs	r3, r3, #2
 8000f24:	3302      	adds	r3, #2
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d006      	beq.n	8000f46 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f38:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff0 <HAL_GPIO_Init+0x2d0>)
 8000f3a:	689a      	ldr	r2, [r3, #8]
 8000f3c:	492c      	ldr	r1, [pc, #176]	@ (8000ff0 <HAL_GPIO_Init+0x2d0>)
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	608b      	str	r3, [r1, #8]
 8000f44:	e006      	b.n	8000f54 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f46:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff0 <HAL_GPIO_Init+0x2d0>)
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	4928      	ldr	r1, [pc, #160]	@ (8000ff0 <HAL_GPIO_Init+0x2d0>)
 8000f50:	4013      	ands	r3, r2
 8000f52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d006      	beq.n	8000f6e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f60:	4b23      	ldr	r3, [pc, #140]	@ (8000ff0 <HAL_GPIO_Init+0x2d0>)
 8000f62:	68da      	ldr	r2, [r3, #12]
 8000f64:	4922      	ldr	r1, [pc, #136]	@ (8000ff0 <HAL_GPIO_Init+0x2d0>)
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	60cb      	str	r3, [r1, #12]
 8000f6c:	e006      	b.n	8000f7c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f6e:	4b20      	ldr	r3, [pc, #128]	@ (8000ff0 <HAL_GPIO_Init+0x2d0>)
 8000f70:	68da      	ldr	r2, [r3, #12]
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	43db      	mvns	r3, r3
 8000f76:	491e      	ldr	r1, [pc, #120]	@ (8000ff0 <HAL_GPIO_Init+0x2d0>)
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d006      	beq.n	8000f96 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f88:	4b19      	ldr	r3, [pc, #100]	@ (8000ff0 <HAL_GPIO_Init+0x2d0>)
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	4918      	ldr	r1, [pc, #96]	@ (8000ff0 <HAL_GPIO_Init+0x2d0>)
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	604b      	str	r3, [r1, #4]
 8000f94:	e006      	b.n	8000fa4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f96:	4b16      	ldr	r3, [pc, #88]	@ (8000ff0 <HAL_GPIO_Init+0x2d0>)
 8000f98:	685a      	ldr	r2, [r3, #4]
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	4914      	ldr	r1, [pc, #80]	@ (8000ff0 <HAL_GPIO_Init+0x2d0>)
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d021      	beq.n	8000ff4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff0 <HAL_GPIO_Init+0x2d0>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	490e      	ldr	r1, [pc, #56]	@ (8000ff0 <HAL_GPIO_Init+0x2d0>)
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	600b      	str	r3, [r1, #0]
 8000fbc:	e021      	b.n	8001002 <HAL_GPIO_Init+0x2e2>
 8000fbe:	bf00      	nop
 8000fc0:	10320000 	.word	0x10320000
 8000fc4:	10310000 	.word	0x10310000
 8000fc8:	10220000 	.word	0x10220000
 8000fcc:	10210000 	.word	0x10210000
 8000fd0:	10120000 	.word	0x10120000
 8000fd4:	10110000 	.word	0x10110000
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40010000 	.word	0x40010000
 8000fe0:	40010800 	.word	0x40010800
 8000fe4:	40010c00 	.word	0x40010c00
 8000fe8:	40011000 	.word	0x40011000
 8000fec:	40011400 	.word	0x40011400
 8000ff0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8001024 <HAL_GPIO_Init+0x304>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	4909      	ldr	r1, [pc, #36]	@ (8001024 <HAL_GPIO_Init+0x304>)
 8000ffe:	4013      	ands	r3, r2
 8001000:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001004:	3301      	adds	r3, #1
 8001006:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100e:	fa22 f303 	lsr.w	r3, r2, r3
 8001012:	2b00      	cmp	r3, #0
 8001014:	f47f ae8e 	bne.w	8000d34 <HAL_GPIO_Init+0x14>
  }
}
 8001018:	bf00      	nop
 800101a:	bf00      	nop
 800101c:	372c      	adds	r7, #44	@ 0x2c
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	40010400 	.word	0x40010400

08001028 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689a      	ldr	r2, [r3, #8]
 8001038:	887b      	ldrh	r3, [r7, #2]
 800103a:	4013      	ands	r3, r2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d002      	beq.n	8001046 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001040:	2301      	movs	r3, #1
 8001042:	73fb      	strb	r3, [r7, #15]
 8001044:	e001      	b.n	800104a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001046:	2300      	movs	r3, #0
 8001048:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800104a:	7bfb      	ldrb	r3, [r7, #15]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr

08001056 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b084      	sub	sp, #16
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d101      	bne.n	8001068 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e0e8      	b.n	800123a <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800106e:	b2db      	uxtb	r3, r3
 8001070:	2b00      	cmp	r3, #0
 8001072:	d106      	bne.n	8001082 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f007 f861 	bl	8008144 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2203      	movs	r2, #3
 8001086:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f002 ffda 	bl	800404e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3304      	adds	r3, #4
 80010a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010a4:	f002 ffb0 	bl	8004008 <USB_CoreInit>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d005      	beq.n	80010ba <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2202      	movs	r2, #2
 80010b2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e0bf      	b.n	800123a <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2100      	movs	r1, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f002 ffde 	bl	8004082 <USB_SetCurrentMode>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d005      	beq.n	80010d8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2202      	movs	r2, #2
 80010d0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e0b0      	b.n	800123a <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010d8:	2300      	movs	r3, #0
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	e03e      	b.n	800115c <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010de:	7bfa      	ldrb	r2, [r7, #15]
 80010e0:	6879      	ldr	r1, [r7, #4]
 80010e2:	4613      	mov	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4413      	add	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	440b      	add	r3, r1
 80010ec:	3311      	adds	r3, #17
 80010ee:	2201      	movs	r2, #1
 80010f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010f2:	7bfa      	ldrb	r2, [r7, #15]
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	4413      	add	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	440b      	add	r3, r1
 8001100:	3310      	adds	r3, #16
 8001102:	7bfa      	ldrb	r2, [r7, #15]
 8001104:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001106:	7bfa      	ldrb	r2, [r7, #15]
 8001108:	6879      	ldr	r1, [r7, #4]
 800110a:	4613      	mov	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	440b      	add	r3, r1
 8001114:	3313      	adds	r3, #19
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800111a:	7bfa      	ldrb	r2, [r7, #15]
 800111c:	6879      	ldr	r1, [r7, #4]
 800111e:	4613      	mov	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	440b      	add	r3, r1
 8001128:	3320      	adds	r3, #32
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800112e:	7bfa      	ldrb	r2, [r7, #15]
 8001130:	6879      	ldr	r1, [r7, #4]
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	440b      	add	r3, r1
 800113c:	3324      	adds	r3, #36	@ 0x24
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	1c5a      	adds	r2, r3, #1
 8001148:	4613      	mov	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	4413      	add	r3, r2
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	440b      	add	r3, r1
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	3301      	adds	r3, #1
 800115a:	73fb      	strb	r3, [r7, #15]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	791b      	ldrb	r3, [r3, #4]
 8001160:	7bfa      	ldrb	r2, [r7, #15]
 8001162:	429a      	cmp	r2, r3
 8001164:	d3bb      	bcc.n	80010de <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001166:	2300      	movs	r3, #0
 8001168:	73fb      	strb	r3, [r7, #15]
 800116a:	e044      	b.n	80011f6 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800116c:	7bfa      	ldrb	r2, [r7, #15]
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	4613      	mov	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	440b      	add	r3, r1
 800117a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001182:	7bfa      	ldrb	r2, [r7, #15]
 8001184:	6879      	ldr	r1, [r7, #4]
 8001186:	4613      	mov	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	440b      	add	r3, r1
 8001190:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001194:	7bfa      	ldrb	r2, [r7, #15]
 8001196:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001198:	7bfa      	ldrb	r2, [r7, #15]
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	4613      	mov	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	440b      	add	r3, r1
 80011a6:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011ae:	7bfa      	ldrb	r2, [r7, #15]
 80011b0:	6879      	ldr	r1, [r7, #4]
 80011b2:	4613      	mov	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	440b      	add	r3, r1
 80011bc:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011c4:	7bfa      	ldrb	r2, [r7, #15]
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	4613      	mov	r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	4413      	add	r3, r2
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	440b      	add	r3, r1
 80011d2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011da:	7bfa      	ldrb	r2, [r7, #15]
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	4613      	mov	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	440b      	add	r3, r1
 80011e8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	3301      	adds	r3, #1
 80011f4:	73fb      	strb	r3, [r7, #15]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	791b      	ldrb	r3, [r3, #4]
 80011fa:	7bfa      	ldrb	r2, [r7, #15]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d3b5      	bcc.n	800116c <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6818      	ldr	r0, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3304      	adds	r3, #4
 8001208:	cb0e      	ldmia	r3, {r1, r2, r3}
 800120a:	f002 ff46 	bl	800409a <USB_DevInit>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d005      	beq.n	8001220 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2202      	movs	r2, #2
 8001218:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e00c      	b.n	800123a <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2201      	movs	r2, #1
 800122a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f005 f9c5 	bl	80065c2 <USB_DevDisconnect>

  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001250:	2b01      	cmp	r3, #1
 8001252:	d101      	bne.n	8001258 <HAL_PCD_Start+0x16>
 8001254:	2302      	movs	r3, #2
 8001256:	e016      	b.n	8001286 <HAL_PCD_Start+0x44>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2201      	movs	r2, #1
 800125c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f002 fedc 	bl	8004022 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800126a:	2101      	movs	r1, #1
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f007 f9dc 	bl	800862a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f005 f999 	bl	80065ae <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b088      	sub	sp, #32
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f005 f99b 	bl	80065d6 <USB_ReadInterrupts>
 80012a0:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 fb1a 	bl	80018e6 <PCD_EP_ISR_Handler>

    return;
 80012b2:	e119      	b.n	80014e8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d013      	beq.n	80012e6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80012d0:	b292      	uxth	r2, r2
 80012d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f006 ffaf 	bl	800823a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80012dc:	2100      	movs	r1, #0
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f000 f905 	bl	80014ee <HAL_PCD_SetAddress>

    return;
 80012e4:	e100      	b.n	80014e8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d00c      	beq.n	800130a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001302:	b292      	uxth	r2, r2
 8001304:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001308:	e0ee      	b.n	80014e8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d00c      	beq.n	800132e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800131c:	b29a      	uxth	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001326:	b292      	uxth	r2, r2
 8001328:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800132c:	e0dc      	b.n	80014e8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d027      	beq.n	8001388 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001340:	b29a      	uxth	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 0204 	bic.w	r2, r2, #4
 800134a:	b292      	uxth	r2, r2
 800134c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001358:	b29a      	uxth	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 0208 	bic.w	r2, r2, #8
 8001362:	b292      	uxth	r2, r2
 8001364:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f006 ff9f 	bl	80082ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001376:	b29a      	uxth	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001380:	b292      	uxth	r2, r2
 8001382:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001386:	e0af      	b.n	80014e8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800138e:	2b00      	cmp	r3, #0
 8001390:	f000 8083 	beq.w	800149a <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001394:	2300      	movs	r3, #0
 8001396:	77fb      	strb	r3, [r7, #31]
 8001398:	e010      	b.n	80013bc <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	7ffb      	ldrb	r3, [r7, #31]
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	441a      	add	r2, r3
 80013a6:	7ffb      	ldrb	r3, [r7, #31]
 80013a8:	8812      	ldrh	r2, [r2, #0]
 80013aa:	b292      	uxth	r2, r2
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	3320      	adds	r3, #32
 80013b0:	443b      	add	r3, r7
 80013b2:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80013b6:	7ffb      	ldrb	r3, [r7, #31]
 80013b8:	3301      	adds	r3, #1
 80013ba:	77fb      	strb	r3, [r7, #31]
 80013bc:	7ffb      	ldrb	r3, [r7, #31]
 80013be:	2b07      	cmp	r3, #7
 80013c0:	d9eb      	bls.n	800139a <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f042 0201 	orr.w	r2, r2, #1
 80013d4:	b292      	uxth	r2, r2
 80013d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 0201 	bic.w	r2, r2, #1
 80013ec:	b292      	uxth	r2, r2
 80013ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80013f2:	bf00      	nop
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f6      	beq.n	80013f4 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800140e:	b29a      	uxth	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001418:	b292      	uxth	r2, r2
 800141a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800141e:	2300      	movs	r3, #0
 8001420:	77fb      	strb	r3, [r7, #31]
 8001422:	e00f      	b.n	8001444 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001424:	7ffb      	ldrb	r3, [r7, #31]
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	6812      	ldr	r2, [r2, #0]
 800142a:	4611      	mov	r1, r2
 800142c:	7ffa      	ldrb	r2, [r7, #31]
 800142e:	0092      	lsls	r2, r2, #2
 8001430:	440a      	add	r2, r1
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	3320      	adds	r3, #32
 8001436:	443b      	add	r3, r7
 8001438:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800143c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800143e:	7ffb      	ldrb	r3, [r7, #31]
 8001440:	3301      	adds	r3, #1
 8001442:	77fb      	strb	r3, [r7, #31]
 8001444:	7ffb      	ldrb	r3, [r7, #31]
 8001446:	2b07      	cmp	r3, #7
 8001448:	d9ec      	bls.n	8001424 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001452:	b29a      	uxth	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f042 0208 	orr.w	r2, r2, #8
 800145c:	b292      	uxth	r2, r2
 800145e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800146a:	b29a      	uxth	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001474:	b292      	uxth	r2, r2
 8001476:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001482:	b29a      	uxth	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f042 0204 	orr.w	r2, r2, #4
 800148c:	b292      	uxth	r2, r2
 800148e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f006 fef0 	bl	8008278 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001498:	e026      	b.n	80014e8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00f      	beq.n	80014c4 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80014b6:	b292      	uxth	r2, r2
 80014b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f006 feae 	bl	800821e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80014c2:	e011      	b.n	80014e8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00c      	beq.n	80014e8 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014e0:	b292      	uxth	r2, r2
 80014e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80014e6:	bf00      	nop
  }
}
 80014e8:	3720      	adds	r7, #32
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
 80014f6:	460b      	mov	r3, r1
 80014f8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001500:	2b01      	cmp	r3, #1
 8001502:	d101      	bne.n	8001508 <HAL_PCD_SetAddress+0x1a>
 8001504:	2302      	movs	r3, #2
 8001506:	e012      	b.n	800152e <HAL_PCD_SetAddress+0x40>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2201      	movs	r2, #1
 800150c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	78fa      	ldrb	r2, [r7, #3]
 8001514:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	78fa      	ldrb	r2, [r7, #3]
 800151c:	4611      	mov	r1, r2
 800151e:	4618      	mov	r0, r3
 8001520:	f005 f832 	bl	8006588 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b084      	sub	sp, #16
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	4608      	mov	r0, r1
 8001540:	4611      	mov	r1, r2
 8001542:	461a      	mov	r2, r3
 8001544:	4603      	mov	r3, r0
 8001546:	70fb      	strb	r3, [r7, #3]
 8001548:	460b      	mov	r3, r1
 800154a:	803b      	strh	r3, [r7, #0]
 800154c:	4613      	mov	r3, r2
 800154e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001550:	2300      	movs	r3, #0
 8001552:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001554:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001558:	2b00      	cmp	r3, #0
 800155a:	da0e      	bge.n	800157a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800155c:	78fb      	ldrb	r3, [r7, #3]
 800155e:	f003 0207 	and.w	r2, r3, #7
 8001562:	4613      	mov	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	3310      	adds	r3, #16
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	4413      	add	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2201      	movs	r2, #1
 8001576:	705a      	strb	r2, [r3, #1]
 8001578:	e00e      	b.n	8001598 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800157a:	78fb      	ldrb	r3, [r7, #3]
 800157c:	f003 0207 	and.w	r2, r3, #7
 8001580:	4613      	mov	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	4413      	add	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2200      	movs	r2, #0
 8001596:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80015a4:	883a      	ldrh	r2, [r7, #0]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	78ba      	ldrb	r2, [r7, #2]
 80015ae:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80015b0:	78bb      	ldrb	r3, [r7, #2]
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d102      	bne.n	80015bc <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2200      	movs	r2, #0
 80015ba:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d101      	bne.n	80015ca <HAL_PCD_EP_Open+0x94>
 80015c6:	2302      	movs	r3, #2
 80015c8:	e00e      	b.n	80015e8 <HAL_PCD_EP_Open+0xb2>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2201      	movs	r2, #1
 80015ce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68f9      	ldr	r1, [r7, #12]
 80015d8:	4618      	mov	r0, r3
 80015da:	f002 fd7b 	bl	80040d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80015e6:	7afb      	ldrb	r3, [r7, #11]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80015fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001600:	2b00      	cmp	r3, #0
 8001602:	da0e      	bge.n	8001622 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001604:	78fb      	ldrb	r3, [r7, #3]
 8001606:	f003 0207 	and.w	r2, r3, #7
 800160a:	4613      	mov	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	3310      	adds	r3, #16
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	4413      	add	r3, r2
 8001618:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2201      	movs	r2, #1
 800161e:	705a      	strb	r2, [r3, #1]
 8001620:	e00e      	b.n	8001640 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001622:	78fb      	ldrb	r3, [r7, #3]
 8001624:	f003 0207 	and.w	r2, r3, #7
 8001628:	4613      	mov	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	4413      	add	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2200      	movs	r2, #0
 800163e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001640:	78fb      	ldrb	r3, [r7, #3]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	b2da      	uxtb	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001652:	2b01      	cmp	r3, #1
 8001654:	d101      	bne.n	800165a <HAL_PCD_EP_Close+0x6a>
 8001656:	2302      	movs	r3, #2
 8001658:	e00e      	b.n	8001678 <HAL_PCD_EP_Close+0x88>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68f9      	ldr	r1, [r7, #12]
 8001668:	4618      	mov	r0, r3
 800166a:	f003 f8f3 	bl	8004854 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	460b      	mov	r3, r1
 800168e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001690:	7afb      	ldrb	r3, [r7, #11]
 8001692:	f003 0207 	and.w	r2, r3, #7
 8001696:	4613      	mov	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	4413      	add	r3, r2
 80016a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	2200      	movs	r2, #0
 80016b8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	2200      	movs	r2, #0
 80016be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016c0:	7afb      	ldrb	r3, [r7, #11]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6979      	ldr	r1, [r7, #20]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f003 faaa 	bl	8004c2c <USB_EPStartXfer>

  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	460b      	mov	r3, r1
 80016ec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80016ee:	78fb      	ldrb	r3, [r7, #3]
 80016f0:	f003 0207 	and.w	r2, r3, #7
 80016f4:	6879      	ldr	r1, [r7, #4]
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	440b      	add	r3, r1
 8001700:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001704:	681b      	ldr	r3, [r3, #0]
}
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	603b      	str	r3, [r7, #0]
 800171c:	460b      	mov	r3, r1
 800171e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001720:	7afb      	ldrb	r3, [r7, #11]
 8001722:	f003 0207 	and.w	r2, r3, #7
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	3310      	adds	r3, #16
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	2200      	movs	r2, #0
 8001754:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	2201      	movs	r2, #1
 800175a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800175c:	7afb      	ldrb	r3, [r7, #11]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	b2da      	uxtb	r2, r3
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6979      	ldr	r1, [r7, #20]
 800176e:	4618      	mov	r0, r3
 8001770:	f003 fa5c 	bl	8004c2c <USB_EPStartXfer>

  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b084      	sub	sp, #16
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
 8001786:	460b      	mov	r3, r1
 8001788:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800178a:	78fb      	ldrb	r3, [r7, #3]
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	7912      	ldrb	r2, [r2, #4]
 8001794:	4293      	cmp	r3, r2
 8001796:	d901      	bls.n	800179c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e04c      	b.n	8001836 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800179c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	da0e      	bge.n	80017c2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017a4:	78fb      	ldrb	r3, [r7, #3]
 80017a6:	f003 0207 	and.w	r2, r3, #7
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	3310      	adds	r3, #16
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	4413      	add	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2201      	movs	r2, #1
 80017be:	705a      	strb	r2, [r3, #1]
 80017c0:	e00c      	b.n	80017dc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80017c2:	78fa      	ldrb	r2, [r7, #3]
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	4413      	add	r3, r2
 80017d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2200      	movs	r2, #0
 80017da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2201      	movs	r2, #1
 80017e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017e2:	78fb      	ldrb	r3, [r7, #3]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d101      	bne.n	80017fc <HAL_PCD_EP_SetStall+0x7e>
 80017f8:	2302      	movs	r3, #2
 80017fa:	e01c      	b.n	8001836 <HAL_PCD_EP_SetStall+0xb8>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68f9      	ldr	r1, [r7, #12]
 800180a:	4618      	mov	r0, r3
 800180c:	f004 fdbf 	bl	800638e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001810:	78fb      	ldrb	r3, [r7, #3]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	2b00      	cmp	r3, #0
 8001818:	d108      	bne.n	800182c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8001824:	4619      	mov	r1, r3
 8001826:	4610      	mov	r0, r2
 8001828:	f004 fee4 	bl	80065f4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b084      	sub	sp, #16
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	460b      	mov	r3, r1
 8001848:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800184a:	78fb      	ldrb	r3, [r7, #3]
 800184c:	f003 030f 	and.w	r3, r3, #15
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	7912      	ldrb	r2, [r2, #4]
 8001854:	4293      	cmp	r3, r2
 8001856:	d901      	bls.n	800185c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e040      	b.n	80018de <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800185c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001860:	2b00      	cmp	r3, #0
 8001862:	da0e      	bge.n	8001882 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	f003 0207 	and.w	r2, r3, #7
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	3310      	adds	r3, #16
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	4413      	add	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2201      	movs	r2, #1
 800187e:	705a      	strb	r2, [r3, #1]
 8001880:	e00e      	b.n	80018a0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	f003 0207 	and.w	r2, r3, #7
 8001888:	4613      	mov	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	4413      	add	r3, r2
 8001898:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2200      	movs	r2, #0
 800189e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2200      	movs	r2, #0
 80018a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018a6:	78fb      	ldrb	r3, [r7, #3]
 80018a8:	f003 0307 	and.w	r3, r3, #7
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d101      	bne.n	80018c0 <HAL_PCD_EP_ClrStall+0x82>
 80018bc:	2302      	movs	r3, #2
 80018be:	e00e      	b.n	80018de <HAL_PCD_EP_ClrStall+0xa0>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68f9      	ldr	r1, [r7, #12]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f004 fdad 	bl	800642e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b096      	sub	sp, #88	@ 0x58
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80018ee:	e3bb      	b.n	8002068 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80018f8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80018fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001900:	b2db      	uxtb	r3, r3
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800190a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800190e:	2b00      	cmp	r3, #0
 8001910:	f040 8175 	bne.w	8001bfe <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001914:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001918:	f003 0310 	and.w	r3, r3, #16
 800191c:	2b00      	cmp	r3, #0
 800191e:	d14e      	bne.n	80019be <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	b29b      	uxth	r3, r3
 8001928:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800192c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001930:	81fb      	strh	r3, [r7, #14]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	89fb      	ldrh	r3, [r7, #14]
 8001938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800193c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001940:	b29b      	uxth	r3, r3
 8001942:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3310      	adds	r3, #16
 8001948:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001952:	b29b      	uxth	r3, r3
 8001954:	461a      	mov	r2, r3
 8001956:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	4413      	add	r3, r2
 800195e:	3302      	adds	r3, #2
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6812      	ldr	r2, [r2, #0]
 8001966:	4413      	add	r3, r2
 8001968:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001974:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001978:	695a      	ldr	r2, [r3, #20]
 800197a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	441a      	add	r2, r3
 8001980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001982:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001984:	2100      	movs	r1, #0
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f006 fc2f 	bl	80081ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	7b5b      	ldrb	r3, [r3, #13]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	f000 8368 	beq.w	8002068 <PCD_EP_ISR_Handler+0x782>
 8001998:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	2b00      	cmp	r3, #0
 800199e:	f040 8363 	bne.w	8002068 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7b5b      	ldrb	r3, [r3, #13]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	735a      	strb	r2, [r3, #13]
 80019bc:	e354      	b.n	8002068 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80019c4:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80019d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80019d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d034      	beq.n	8001a46 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	461a      	mov	r2, r3
 80019e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	4413      	add	r3, r2
 80019f0:	3306      	adds	r3, #6
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6812      	ldr	r2, [r2, #0]
 80019f8:	4413      	add	r3, r2
 80019fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a06:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6818      	ldr	r0, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001a12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a14:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a18:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	f004 fe3b 	bl	8006696 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	823b      	strh	r3, [r7, #16]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	8a3a      	ldrh	r2, [r7, #16]
 8001a36:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a3a:	b292      	uxth	r2, r2
 8001a3c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f006 fba6 	bl	8008190 <HAL_PCD_SetupStageCallback>
 8001a44:	e310      	b.n	8002068 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a46:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f280 830c 	bge.w	8002068 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	83fb      	strh	r3, [r7, #30]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	8bfa      	ldrh	r2, [r7, #30]
 8001a66:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a6a:	b292      	uxth	r2, r2
 8001a6c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	461a      	mov	r2, r3
 8001a7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	4413      	add	r3, r2
 8001a82:	3306      	adds	r3, #6
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6812      	ldr	r2, [r2, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a98:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d019      	beq.n	8001ad6 <PCD_EP_ISR_Handler+0x1f0>
 8001aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d015      	beq.n	8001ad6 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6818      	ldr	r0, [r3, #0]
 8001aae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ab0:	6959      	ldr	r1, [r3, #20]
 8001ab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ab4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ab8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	f004 fdeb 	bl	8006696 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001ac0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ac2:	695a      	ldr	r2, [r3, #20]
 8001ac4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	441a      	add	r2, r3
 8001aca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001acc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001ace:	2100      	movs	r1, #0
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f006 fb6f 	bl	80081b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001ae0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001ae4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f040 82bd 	bne.w	8002068 <PCD_EP_ISR_Handler+0x782>
 8001aee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001af2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001af6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001afa:	f000 82b5 	beq.w	8002068 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	61bb      	str	r3, [r7, #24]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	461a      	mov	r2, r3
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	4413      	add	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	801a      	strh	r2, [r3, #0]
 8001b2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	2b3e      	cmp	r3, #62	@ 0x3e
 8001b34:	d91d      	bls.n	8001b72 <PCD_EP_ISR_Handler+0x28c>
 8001b36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	095b      	lsrs	r3, r3, #5
 8001b3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	f003 031f 	and.w	r3, r3, #31
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d102      	bne.n	8001b50 <PCD_EP_ISR_Handler+0x26a>
 8001b4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	029b      	lsls	r3, r3, #10
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	801a      	strh	r2, [r3, #0]
 8001b70:	e026      	b.n	8001bc0 <PCD_EP_ISR_Handler+0x2da>
 8001b72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10a      	bne.n	8001b90 <PCD_EP_ISR_Handler+0x2aa>
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	801a      	strh	r2, [r3, #0]
 8001b8e:	e017      	b.n	8001bc0 <PCD_EP_ISR_Handler+0x2da>
 8001b90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	085b      	lsrs	r3, r3, #1
 8001b96:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d002      	beq.n	8001baa <PCD_EP_ISR_Handler+0x2c4>
 8001ba4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	647b      	str	r3, [r7, #68]	@ 0x44
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	029b      	lsls	r3, r3, #10
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	881b      	ldrh	r3, [r3, #0]
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001bcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001bd0:	827b      	strh	r3, [r7, #18]
 8001bd2:	8a7b      	ldrh	r3, [r7, #18]
 8001bd4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001bd8:	827b      	strh	r3, [r7, #18]
 8001bda:	8a7b      	ldrh	r3, [r7, #18]
 8001bdc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001be0:	827b      	strh	r3, [r7, #18]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	8a7b      	ldrh	r3, [r7, #18]
 8001be8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001bec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001bf0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	8013      	strh	r3, [r2, #0]
 8001bfc:	e234      	b.n	8002068 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	461a      	mov	r2, r3
 8001c04:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c12:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f280 80fc 	bge.w	8001e14 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	461a      	mov	r2, r3
 8001c22:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001c32:	4013      	ands	r3, r2
 8001c34:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001c4a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c4e:	b292      	uxth	r2, r2
 8001c50:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001c52:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001c68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c6a:	7b1b      	ldrb	r3, [r3, #12]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d125      	bne.n	8001cbc <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	4413      	add	r3, r2
 8001c84:	3306      	adds	r3, #6
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	6812      	ldr	r2, [r2, #0]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c98:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001c9c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f000 8092 	beq.w	8001dca <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6818      	ldr	r0, [r3, #0]
 8001caa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cac:	6959      	ldr	r1, [r3, #20]
 8001cae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cb0:	88da      	ldrh	r2, [r3, #6]
 8001cb2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001cb6:	f004 fcee 	bl	8006696 <USB_ReadPMA>
 8001cba:	e086      	b.n	8001dca <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001cbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cbe:	78db      	ldrb	r3, [r3, #3]
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d10a      	bne.n	8001cda <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001cc4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001cc8:	461a      	mov	r2, r3
 8001cca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 f9d9 	bl	8002084 <HAL_PCD_EP_DB_Receive>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001cd8:	e077      	b.n	8001dca <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001cf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001cf4:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	441a      	add	r2, r3
 8001d06:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001d0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001d0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001d12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d16:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d024      	beq.n	8001d82 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	461a      	mov	r2, r3
 8001d44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3302      	adds	r3, #2
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	4413      	add	r3, r2
 8001d56:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d5a:	881b      	ldrh	r3, [r3, #0]
 8001d5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d60:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001d64:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d02e      	beq.n	8001dca <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6818      	ldr	r0, [r3, #0]
 8001d70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d72:	6959      	ldr	r1, [r3, #20]
 8001d74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d76:	891a      	ldrh	r2, [r3, #8]
 8001d78:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001d7c:	f004 fc8b 	bl	8006696 <USB_ReadPMA>
 8001d80:	e023      	b.n	8001dca <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	4413      	add	r3, r2
 8001d96:	3306      	adds	r3, #6
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6812      	ldr	r2, [r2, #0]
 8001d9e:	4413      	add	r3, r2
 8001da0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001da4:	881b      	ldrh	r3, [r3, #0]
 8001da6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001daa:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001dae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d009      	beq.n	8001dca <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dbc:	6959      	ldr	r1, [r3, #20]
 8001dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc0:	895a      	ldrh	r2, [r3, #10]
 8001dc2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001dc6:	f004 fc66 	bl	8006696 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001dca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dcc:	69da      	ldr	r2, [r3, #28]
 8001dce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001dd2:	441a      	add	r2, r3
 8001dd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dd6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001dd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dda:	695a      	ldr	r2, [r3, #20]
 8001ddc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001de0:	441a      	add	r2, r3
 8001de2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001de4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001de6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d005      	beq.n	8001dfa <PCD_EP_ISR_Handler+0x514>
 8001dee:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001df2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d206      	bcs.n	8001e08 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001dfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	4619      	mov	r1, r3
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f006 f9d7 	bl	80081b4 <HAL_PCD_DataOutStageCallback>
 8001e06:	e005      	b.n	8001e14 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f002 ff0c 	bl	8004c2c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001e14:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001e18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 8123 	beq.w	8002068 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8001e22:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	3310      	adds	r3, #16
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	4413      	add	r3, r2
 8001e34:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001e4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e50:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	441a      	add	r2, r3
 8001e62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001e66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001e72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e74:	78db      	ldrb	r3, [r3, #3]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	f040 80a2 	bne.w	8001fc0 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8001e7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e7e:	2200      	movs	r2, #0
 8001e80:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e84:	7b1b      	ldrb	r3, [r3, #12]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 8093 	beq.w	8001fb2 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e8c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d046      	beq.n	8001f26 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e9a:	785b      	ldrb	r3, [r3, #1]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d126      	bne.n	8001eee <PCD_EP_ISR_Handler+0x608>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb4:	4413      	add	r3, r2
 8001eb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	011a      	lsls	r2, r3, #4
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec0:	4413      	add	r3, r2
 8001ec2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001ec6:	623b      	str	r3, [r7, #32]
 8001ec8:	6a3b      	ldr	r3, [r7, #32]
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	801a      	strh	r2, [r3, #0]
 8001ed8:	6a3b      	ldr	r3, [r7, #32]
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ee2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	6a3b      	ldr	r3, [r7, #32]
 8001eea:	801a      	strh	r2, [r3, #0]
 8001eec:	e061      	b.n	8001fb2 <PCD_EP_ISR_Handler+0x6cc>
 8001eee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ef0:	785b      	ldrb	r3, [r3, #1]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d15d      	bne.n	8001fb2 <PCD_EP_ISR_Handler+0x6cc>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	461a      	mov	r2, r3
 8001f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f0a:	4413      	add	r3, r2
 8001f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	011a      	lsls	r2, r3, #4
 8001f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f16:	4413      	add	r3, r2
 8001f18:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f20:	2200      	movs	r2, #0
 8001f22:	801a      	strh	r2, [r3, #0]
 8001f24:	e045      	b.n	8001fb2 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f2e:	785b      	ldrb	r3, [r3, #1]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d126      	bne.n	8001f82 <PCD_EP_ISR_Handler+0x69c>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	461a      	mov	r2, r3
 8001f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f48:	4413      	add	r3, r2
 8001f4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	011a      	lsls	r2, r3, #4
 8001f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f54:	4413      	add	r3, r2
 8001f56:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001f5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f6a:	801a      	strh	r2, [r3, #0]
 8001f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f7e:	801a      	strh	r2, [r3, #0]
 8001f80:	e017      	b.n	8001fb2 <PCD_EP_ISR_Handler+0x6cc>
 8001f82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f84:	785b      	ldrb	r3, [r3, #1]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d113      	bne.n	8001fb2 <PCD_EP_ISR_Handler+0x6cc>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	461a      	mov	r2, r3
 8001f96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f98:	4413      	add	r3, r2
 8001f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	011a      	lsls	r2, r3, #4
 8001fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fa4:	4413      	add	r3, r2
 8001fa6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001faa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fae:	2200      	movs	r2, #0
 8001fb0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001fb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f006 f916 	bl	80081ea <HAL_PCD_DataInStageCallback>
 8001fbe:	e053      	b.n	8002068 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001fc0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d146      	bne.n	800205a <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	4413      	add	r3, r2
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	4413      	add	r3, r2
 8001fea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ff4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ffa:	699a      	ldr	r2, [r3, #24]
 8001ffc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002000:	429a      	cmp	r2, r3
 8002002:	d907      	bls.n	8002014 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002004:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002006:	699a      	ldr	r2, [r3, #24]
 8002008:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800200c:	1ad2      	subs	r2, r2, r3
 800200e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002010:	619a      	str	r2, [r3, #24]
 8002012:	e002      	b.n	800201a <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002014:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002016:	2200      	movs	r2, #0
 8002018:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800201a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d106      	bne.n	8002030 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002022:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	4619      	mov	r1, r3
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f006 f8de 	bl	80081ea <HAL_PCD_DataInStageCallback>
 800202e:	e01b      	b.n	8002068 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002030:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002032:	695a      	ldr	r2, [r3, #20]
 8002034:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002038:	441a      	add	r2, r3
 800203a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800203c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800203e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002040:	69da      	ldr	r2, [r3, #28]
 8002042:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002046:	441a      	add	r2, r3
 8002048:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800204a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002052:	4618      	mov	r0, r3
 8002054:	f002 fdea 	bl	8004c2c <USB_EPStartXfer>
 8002058:	e006      	b.n	8002068 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800205a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800205e:	461a      	mov	r2, r3
 8002060:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f91b 	bl	800229e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002070:	b29b      	uxth	r3, r3
 8002072:	b21b      	sxth	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	f6ff ac3b 	blt.w	80018f0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3758      	adds	r7, #88	@ 0x58
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	4613      	mov	r3, r2
 8002090:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002092:	88fb      	ldrh	r3, [r7, #6]
 8002094:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d07e      	beq.n	800219a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	461a      	mov	r2, r3
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	4413      	add	r3, r2
 80020b0:	3302      	adds	r3, #2
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020c4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	699a      	ldr	r2, [r3, #24]
 80020ca:	8b7b      	ldrh	r3, [r7, #26]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d306      	bcc.n	80020de <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	699a      	ldr	r2, [r3, #24]
 80020d4:	8b7b      	ldrh	r3, [r7, #26]
 80020d6:	1ad2      	subs	r2, r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	619a      	str	r2, [r3, #24]
 80020dc:	e002      	b.n	80020e4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2200      	movs	r2, #0
 80020e2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d123      	bne.n	8002134 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002106:	833b      	strh	r3, [r7, #24]
 8002108:	8b3b      	ldrh	r3, [r7, #24]
 800210a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800210e:	833b      	strh	r3, [r7, #24]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	441a      	add	r2, r3
 800211e:	8b3b      	ldrh	r3, [r7, #24]
 8002120:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002124:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002128:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800212c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002130:	b29b      	uxth	r3, r3
 8002132:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002134:	88fb      	ldrh	r3, [r7, #6]
 8002136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800213a:	2b00      	cmp	r3, #0
 800213c:	d01f      	beq.n	800217e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	461a      	mov	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	b29b      	uxth	r3, r3
 8002150:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002154:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002158:	82fb      	strh	r3, [r7, #22]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	441a      	add	r2, r3
 8002168:	8afb      	ldrh	r3, [r7, #22]
 800216a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800216e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002172:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002176:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800217a:	b29b      	uxth	r3, r3
 800217c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800217e:	8b7b      	ldrh	r3, [r7, #26]
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 8087 	beq.w	8002294 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6818      	ldr	r0, [r3, #0]
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	6959      	ldr	r1, [r3, #20]
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	891a      	ldrh	r2, [r3, #8]
 8002192:	8b7b      	ldrh	r3, [r7, #26]
 8002194:	f004 fa7f 	bl	8006696 <USB_ReadPMA>
 8002198:	e07c      	b.n	8002294 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	461a      	mov	r2, r3
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4413      	add	r3, r2
 80021ae:	3306      	adds	r3, #6
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	4413      	add	r3, r2
 80021b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021c2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	699a      	ldr	r2, [r3, #24]
 80021c8:	8b7b      	ldrh	r3, [r7, #26]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d306      	bcc.n	80021dc <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	699a      	ldr	r2, [r3, #24]
 80021d2:	8b7b      	ldrh	r3, [r7, #26]
 80021d4:	1ad2      	subs	r2, r2, r3
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	619a      	str	r2, [r3, #24]
 80021da:	e002      	b.n	80021e2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2200      	movs	r2, #0
 80021e0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d123      	bne.n	8002232 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	461a      	mov	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002200:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002204:	83fb      	strh	r3, [r7, #30]
 8002206:	8bfb      	ldrh	r3, [r7, #30]
 8002208:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800220c:	83fb      	strh	r3, [r7, #30]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	461a      	mov	r2, r3
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	441a      	add	r2, r3
 800221c:	8bfb      	ldrh	r3, [r7, #30]
 800221e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002222:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002226:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800222a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800222e:	b29b      	uxth	r3, r3
 8002230:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002232:	88fb      	ldrh	r3, [r7, #6]
 8002234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002238:	2b00      	cmp	r3, #0
 800223a:	d11f      	bne.n	800227c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	461a      	mov	r2, r3
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	881b      	ldrh	r3, [r3, #0]
 800224c:	b29b      	uxth	r3, r3
 800224e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002256:	83bb      	strh	r3, [r7, #28]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	461a      	mov	r2, r3
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	441a      	add	r2, r3
 8002266:	8bbb      	ldrh	r3, [r7, #28]
 8002268:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800226c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002270:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002274:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002278:	b29b      	uxth	r3, r3
 800227a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800227c:	8b7b      	ldrh	r3, [r7, #26]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d008      	beq.n	8002294 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6818      	ldr	r0, [r3, #0]
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	6959      	ldr	r1, [r3, #20]
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	895a      	ldrh	r2, [r3, #10]
 800228e:	8b7b      	ldrh	r3, [r7, #26]
 8002290:	f004 fa01 	bl	8006696 <USB_ReadPMA>
    }
  }

  return count;
 8002294:	8b7b      	ldrh	r3, [r7, #26]
}
 8002296:	4618      	mov	r0, r3
 8002298:	3720      	adds	r7, #32
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b0a4      	sub	sp, #144	@ 0x90
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	60f8      	str	r0, [r7, #12]
 80022a6:	60b9      	str	r1, [r7, #8]
 80022a8:	4613      	mov	r3, r2
 80022aa:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022ac:	88fb      	ldrh	r3, [r7, #6]
 80022ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 81dd 	beq.w	8002672 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	461a      	mov	r2, r3
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	4413      	add	r3, r2
 80022cc:	3302      	adds	r3, #2
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	6812      	ldr	r2, [r2, #0]
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022e0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	699a      	ldr	r2, [r3, #24]
 80022e8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d907      	bls.n	8002300 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	699a      	ldr	r2, [r3, #24]
 80022f4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80022f8:	1ad2      	subs	r2, r2, r3
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	619a      	str	r2, [r3, #24]
 80022fe:	e002      	b.n	8002306 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2200      	movs	r2, #0
 8002304:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	2b00      	cmp	r3, #0
 800230c:	f040 80b9 	bne.w	8002482 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	785b      	ldrb	r3, [r3, #1]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d126      	bne.n	8002366 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002326:	b29b      	uxth	r3, r3
 8002328:	461a      	mov	r2, r3
 800232a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800232c:	4413      	add	r3, r2
 800232e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	011a      	lsls	r2, r3, #4
 8002336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002338:	4413      	add	r3, r2
 800233a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800233e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	b29b      	uxth	r3, r3
 8002346:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800234a:	b29a      	uxth	r2, r3
 800234c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800234e:	801a      	strh	r2, [r3, #0]
 8002350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	b29b      	uxth	r3, r3
 8002356:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800235a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800235e:	b29a      	uxth	r2, r3
 8002360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002362:	801a      	strh	r2, [r3, #0]
 8002364:	e01a      	b.n	800239c <HAL_PCD_EP_DB_Transmit+0xfe>
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	785b      	ldrb	r3, [r3, #1]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d116      	bne.n	800239c <HAL_PCD_EP_DB_Transmit+0xfe>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	637b      	str	r3, [r7, #52]	@ 0x34
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800237c:	b29b      	uxth	r3, r3
 800237e:	461a      	mov	r2, r3
 8002380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002382:	4413      	add	r3, r2
 8002384:	637b      	str	r3, [r7, #52]	@ 0x34
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	011a      	lsls	r2, r3, #4
 800238c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800238e:	4413      	add	r3, r2
 8002390:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002394:	633b      	str	r3, [r7, #48]	@ 0x30
 8002396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002398:	2200      	movs	r2, #0
 800239a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	785b      	ldrb	r3, [r3, #1]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d126      	bne.n	80023f8 <HAL_PCD_EP_DB_Transmit+0x15a>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	61fb      	str	r3, [r7, #28]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	461a      	mov	r2, r3
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	4413      	add	r3, r2
 80023c0:	61fb      	str	r3, [r7, #28]
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	011a      	lsls	r2, r3, #4
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	4413      	add	r3, r2
 80023cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80023d0:	61bb      	str	r3, [r7, #24]
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023dc:	b29a      	uxth	r2, r3
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	801a      	strh	r2, [r3, #0]
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	801a      	strh	r2, [r3, #0]
 80023f6:	e017      	b.n	8002428 <HAL_PCD_EP_DB_Transmit+0x18a>
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	785b      	ldrb	r3, [r3, #1]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d113      	bne.n	8002428 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002408:	b29b      	uxth	r3, r3
 800240a:	461a      	mov	r2, r3
 800240c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240e:	4413      	add	r3, r2
 8002410:	627b      	str	r3, [r7, #36]	@ 0x24
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	011a      	lsls	r2, r3, #4
 8002418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241a:	4413      	add	r3, r2
 800241c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002420:	623b      	str	r3, [r7, #32]
 8002422:	6a3b      	ldr	r3, [r7, #32]
 8002424:	2200      	movs	r2, #0
 8002426:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	4619      	mov	r1, r3
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f005 fedb 	bl	80081ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002434:	88fb      	ldrh	r3, [r7, #6]
 8002436:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 82fc 	beq.w	8002a38 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	b29b      	uxth	r3, r3
 8002452:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002456:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800245a:	82fb      	strh	r3, [r7, #22]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	461a      	mov	r2, r3
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	441a      	add	r2, r3
 800246a:	8afb      	ldrh	r3, [r7, #22]
 800246c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002470:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002474:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002478:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800247c:	b29b      	uxth	r3, r3
 800247e:	8013      	strh	r3, [r2, #0]
 8002480:	e2da      	b.n	8002a38 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002482:	88fb      	ldrh	r3, [r7, #6]
 8002484:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d021      	beq.n	80024d0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	b29b      	uxth	r3, r3
 800249e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80024a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024a6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	461a      	mov	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	441a      	add	r2, r3
 80024b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80024bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80024c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80024c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80024c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	f040 82ae 	bne.w	8002a38 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	695a      	ldr	r2, [r3, #20]
 80024e0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80024e4:	441a      	add	r2, r3
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	69da      	ldr	r2, [r3, #28]
 80024ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80024f2:	441a      	add	r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	6a1a      	ldr	r2, [r3, #32]
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	429a      	cmp	r2, r3
 8002502:	d30b      	bcc.n	800251c <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	6a1a      	ldr	r2, [r3, #32]
 8002510:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002514:	1ad2      	subs	r2, r2, r3
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	621a      	str	r2, [r3, #32]
 800251a:	e017      	b.n	800254c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d108      	bne.n	8002536 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002524:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002528:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002534:	e00a      	b.n	800254c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2200      	movs	r2, #0
 800254a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	785b      	ldrb	r3, [r3, #1]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d165      	bne.n	8002620 <HAL_PCD_EP_DB_Transmit+0x382>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002562:	b29b      	uxth	r3, r3
 8002564:	461a      	mov	r2, r3
 8002566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002568:	4413      	add	r3, r2
 800256a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	011a      	lsls	r2, r3, #4
 8002572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002574:	4413      	add	r3, r2
 8002576:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800257a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800257c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	b29b      	uxth	r3, r3
 8002582:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002586:	b29a      	uxth	r2, r3
 8002588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800258a:	801a      	strh	r2, [r3, #0]
 800258c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002590:	2b3e      	cmp	r3, #62	@ 0x3e
 8002592:	d91d      	bls.n	80025d0 <HAL_PCD_EP_DB_Transmit+0x332>
 8002594:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002598:	095b      	lsrs	r3, r3, #5
 800259a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800259c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d102      	bne.n	80025ae <HAL_PCD_EP_DB_Transmit+0x310>
 80025a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025aa:	3b01      	subs	r3, #1
 80025ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	029b      	lsls	r3, r3, #10
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	4313      	orrs	r3, r2
 80025be:	b29b      	uxth	r3, r3
 80025c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025cc:	801a      	strh	r2, [r3, #0]
 80025ce:	e044      	b.n	800265a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80025d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10a      	bne.n	80025ee <HAL_PCD_EP_DB_Transmit+0x350>
 80025d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	b29b      	uxth	r3, r3
 80025de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025ea:	801a      	strh	r2, [r3, #0]
 80025ec:	e035      	b.n	800265a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80025ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025f2:	085b      	lsrs	r3, r3, #1
 80025f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d002      	beq.n	8002608 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002602:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002604:	3301      	adds	r3, #1
 8002606:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	b29a      	uxth	r2, r3
 800260e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002610:	b29b      	uxth	r3, r3
 8002612:	029b      	lsls	r3, r3, #10
 8002614:	b29b      	uxth	r3, r3
 8002616:	4313      	orrs	r3, r2
 8002618:	b29a      	uxth	r2, r3
 800261a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800261c:	801a      	strh	r2, [r3, #0]
 800261e:	e01c      	b.n	800265a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	785b      	ldrb	r3, [r3, #1]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d118      	bne.n	800265a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	647b      	str	r3, [r7, #68]	@ 0x44
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002636:	b29b      	uxth	r3, r3
 8002638:	461a      	mov	r2, r3
 800263a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800263c:	4413      	add	r3, r2
 800263e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	011a      	lsls	r2, r3, #4
 8002646:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002648:	4413      	add	r3, r2
 800264a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800264e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002650:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002654:	b29a      	uxth	r2, r3
 8002656:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002658:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6818      	ldr	r0, [r3, #0]
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	6959      	ldr	r1, [r3, #20]
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	891a      	ldrh	r2, [r3, #8]
 8002666:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800266a:	b29b      	uxth	r3, r3
 800266c:	f003 ffcd 	bl	800660a <USB_WritePMA>
 8002670:	e1e2      	b.n	8002a38 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800267a:	b29b      	uxth	r3, r3
 800267c:	461a      	mov	r2, r3
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	4413      	add	r3, r2
 8002686:	3306      	adds	r3, #6
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	6812      	ldr	r2, [r2, #0]
 800268e:	4413      	add	r3, r2
 8002690:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800269a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	699a      	ldr	r2, [r3, #24]
 80026a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d307      	bcc.n	80026ba <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	699a      	ldr	r2, [r3, #24]
 80026ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80026b2:	1ad2      	subs	r2, r2, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	619a      	str	r2, [r3, #24]
 80026b8:	e002      	b.n	80026c0 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2200      	movs	r2, #0
 80026be:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f040 80c0 	bne.w	800284a <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	785b      	ldrb	r3, [r3, #1]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d126      	bne.n	8002720 <HAL_PCD_EP_DB_Transmit+0x482>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	461a      	mov	r2, r3
 80026e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80026e6:	4413      	add	r3, r2
 80026e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	011a      	lsls	r2, r3, #4
 80026f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80026f2:	4413      	add	r3, r2
 80026f4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80026f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80026fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026fc:	881b      	ldrh	r3, [r3, #0]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002704:	b29a      	uxth	r2, r3
 8002706:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002708:	801a      	strh	r2, [r3, #0]
 800270a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	b29b      	uxth	r3, r3
 8002710:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002714:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002718:	b29a      	uxth	r2, r3
 800271a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800271c:	801a      	strh	r2, [r3, #0]
 800271e:	e01a      	b.n	8002756 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	785b      	ldrb	r3, [r3, #1]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d116      	bne.n	8002756 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	667b      	str	r3, [r7, #100]	@ 0x64
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002736:	b29b      	uxth	r3, r3
 8002738:	461a      	mov	r2, r3
 800273a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800273c:	4413      	add	r3, r2
 800273e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	011a      	lsls	r2, r3, #4
 8002746:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002748:	4413      	add	r3, r2
 800274a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800274e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002750:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002752:	2200      	movs	r2, #0
 8002754:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	677b      	str	r3, [r7, #116]	@ 0x74
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	785b      	ldrb	r3, [r3, #1]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d12b      	bne.n	80027bc <HAL_PCD_EP_DB_Transmit+0x51e>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002772:	b29b      	uxth	r3, r3
 8002774:	461a      	mov	r2, r3
 8002776:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002778:	4413      	add	r3, r2
 800277a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	011a      	lsls	r2, r3, #4
 8002782:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002784:	4413      	add	r3, r2
 8002786:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800278a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800278e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002792:	881b      	ldrh	r3, [r3, #0]
 8002794:	b29b      	uxth	r3, r3
 8002796:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800279a:	b29a      	uxth	r2, r3
 800279c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027a0:	801a      	strh	r2, [r3, #0]
 80027a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027b8:	801a      	strh	r2, [r3, #0]
 80027ba:	e017      	b.n	80027ec <HAL_PCD_EP_DB_Transmit+0x54e>
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	785b      	ldrb	r3, [r3, #1]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d113      	bne.n	80027ec <HAL_PCD_EP_DB_Transmit+0x54e>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	461a      	mov	r2, r3
 80027d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027d2:	4413      	add	r3, r2
 80027d4:	677b      	str	r3, [r7, #116]	@ 0x74
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	011a      	lsls	r2, r3, #4
 80027dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027de:	4413      	add	r3, r2
 80027e0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80027e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80027e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027e8:	2200      	movs	r2, #0
 80027ea:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	4619      	mov	r1, r3
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f005 fcf9 	bl	80081ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80027f8:	88fb      	ldrh	r3, [r7, #6]
 80027fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f040 811a 	bne.w	8002a38 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	b29b      	uxth	r3, r3
 8002816:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800281a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800281e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	441a      	add	r2, r3
 8002830:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002834:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002838:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800283c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002840:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002844:	b29b      	uxth	r3, r3
 8002846:	8013      	strh	r3, [r2, #0]
 8002848:	e0f6      	b.n	8002a38 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800284a:	88fb      	ldrh	r3, [r7, #6]
 800284c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d121      	bne.n	8002898 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	b29b      	uxth	r3, r3
 8002866:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800286a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800286e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	461a      	mov	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	441a      	add	r2, r3
 8002880:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002884:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002888:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800288c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002890:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002894:	b29b      	uxth	r3, r3
 8002896:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800289e:	2b01      	cmp	r3, #1
 80028a0:	f040 80ca 	bne.w	8002a38 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	695a      	ldr	r2, [r3, #20]
 80028a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80028ac:	441a      	add	r2, r3
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	69da      	ldr	r2, [r3, #28]
 80028b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80028ba:	441a      	add	r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	6a1a      	ldr	r2, [r3, #32]
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d30b      	bcc.n	80028e4 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	6a1a      	ldr	r2, [r3, #32]
 80028d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028dc:	1ad2      	subs	r2, r2, r3
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	621a      	str	r2, [r3, #32]
 80028e2:	e017      	b.n	8002914 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d108      	bne.n	80028fe <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80028ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80028f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80028fc:	e00a      	b.n	8002914 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	2200      	movs	r2, #0
 800290a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	657b      	str	r3, [r7, #84]	@ 0x54
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	785b      	ldrb	r3, [r3, #1]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d165      	bne.n	80029ee <HAL_PCD_EP_DB_Transmit+0x750>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002930:	b29b      	uxth	r3, r3
 8002932:	461a      	mov	r2, r3
 8002934:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002936:	4413      	add	r3, r2
 8002938:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	011a      	lsls	r2, r3, #4
 8002940:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002942:	4413      	add	r3, r2
 8002944:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002948:	65bb      	str	r3, [r7, #88]	@ 0x58
 800294a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	b29b      	uxth	r3, r3
 8002950:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002954:	b29a      	uxth	r2, r3
 8002956:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002958:	801a      	strh	r2, [r3, #0]
 800295a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800295e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002960:	d91d      	bls.n	800299e <HAL_PCD_EP_DB_Transmit+0x700>
 8002962:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002966:	095b      	lsrs	r3, r3, #5
 8002968:	66bb      	str	r3, [r7, #104]	@ 0x68
 800296a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800296e:	f003 031f 	and.w	r3, r3, #31
 8002972:	2b00      	cmp	r3, #0
 8002974:	d102      	bne.n	800297c <HAL_PCD_EP_DB_Transmit+0x6de>
 8002976:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002978:	3b01      	subs	r3, #1
 800297a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800297c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800297e:	881b      	ldrh	r3, [r3, #0]
 8002980:	b29a      	uxth	r2, r3
 8002982:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002984:	b29b      	uxth	r3, r3
 8002986:	029b      	lsls	r3, r3, #10
 8002988:	b29b      	uxth	r3, r3
 800298a:	4313      	orrs	r3, r2
 800298c:	b29b      	uxth	r3, r3
 800298e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002992:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002996:	b29a      	uxth	r2, r3
 8002998:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800299a:	801a      	strh	r2, [r3, #0]
 800299c:	e041      	b.n	8002a22 <HAL_PCD_EP_DB_Transmit+0x784>
 800299e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10a      	bne.n	80029bc <HAL_PCD_EP_DB_Transmit+0x71e>
 80029a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029a8:	881b      	ldrh	r3, [r3, #0]
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029b8:	801a      	strh	r2, [r3, #0]
 80029ba:	e032      	b.n	8002a22 <HAL_PCD_EP_DB_Transmit+0x784>
 80029bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029c0:	085b      	lsrs	r3, r3, #1
 80029c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d002      	beq.n	80029d6 <HAL_PCD_EP_DB_Transmit+0x738>
 80029d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029d2:	3301      	adds	r3, #1
 80029d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	b29a      	uxth	r2, r3
 80029dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029de:	b29b      	uxth	r3, r3
 80029e0:	029b      	lsls	r3, r3, #10
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	4313      	orrs	r3, r2
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029ea:	801a      	strh	r2, [r3, #0]
 80029ec:	e019      	b.n	8002a22 <HAL_PCD_EP_DB_Transmit+0x784>
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	785b      	ldrb	r3, [r3, #1]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d115      	bne.n	8002a22 <HAL_PCD_EP_DB_Transmit+0x784>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	461a      	mov	r2, r3
 8002a02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a04:	4413      	add	r3, r2
 8002a06:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	011a      	lsls	r2, r3, #4
 8002a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a10:	4413      	add	r3, r2
 8002a12:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002a16:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a20:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6818      	ldr	r0, [r3, #0]
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	6959      	ldr	r1, [r3, #20]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	895a      	ldrh	r2, [r3, #10]
 8002a2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	f003 fde9 	bl	800660a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a52:	82bb      	strh	r3, [r7, #20]
 8002a54:	8abb      	ldrh	r3, [r7, #20]
 8002a56:	f083 0310 	eor.w	r3, r3, #16
 8002a5a:	82bb      	strh	r3, [r7, #20]
 8002a5c:	8abb      	ldrh	r3, [r7, #20]
 8002a5e:	f083 0320 	eor.w	r3, r3, #32
 8002a62:	82bb      	strh	r3, [r7, #20]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	441a      	add	r2, r3
 8002a72:	8abb      	ldrh	r3, [r7, #20]
 8002a74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3790      	adds	r7, #144	@ 0x90
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b087      	sub	sp, #28
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	607b      	str	r3, [r7, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	817b      	strh	r3, [r7, #10]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002aa4:	897b      	ldrh	r3, [r7, #10]
 8002aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00b      	beq.n	8002ac8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ab0:	897b      	ldrh	r3, [r7, #10]
 8002ab2:	f003 0207 	and.w	r2, r3, #7
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	3310      	adds	r3, #16
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	617b      	str	r3, [r7, #20]
 8002ac6:	e009      	b.n	8002adc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ac8:	897a      	ldrh	r2, [r7, #10]
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	4413      	add	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002adc:	893b      	ldrh	r3, [r7, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d107      	bne.n	8002af2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	80da      	strh	r2, [r3, #6]
 8002af0:	e00b      	b.n	8002b0a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2201      	movs	r2, #1
 8002af6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	0c1b      	lsrs	r3, r3, #16
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	371c      	adds	r7, #28
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr
	...

08002b18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e272      	b.n	8003010 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 8087 	beq.w	8002c46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b38:	4b92      	ldr	r3, [pc, #584]	@ (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 030c 	and.w	r3, r3, #12
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d00c      	beq.n	8002b5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b44:	4b8f      	ldr	r3, [pc, #572]	@ (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 030c 	and.w	r3, r3, #12
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d112      	bne.n	8002b76 <HAL_RCC_OscConfig+0x5e>
 8002b50:	4b8c      	ldr	r3, [pc, #560]	@ (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b5c:	d10b      	bne.n	8002b76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b5e:	4b89      	ldr	r3, [pc, #548]	@ (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d06c      	beq.n	8002c44 <HAL_RCC_OscConfig+0x12c>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d168      	bne.n	8002c44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e24c      	b.n	8003010 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b7e:	d106      	bne.n	8002b8e <HAL_RCC_OscConfig+0x76>
 8002b80:	4b80      	ldr	r3, [pc, #512]	@ (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a7f      	ldr	r2, [pc, #508]	@ (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002b86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b8a:	6013      	str	r3, [r2, #0]
 8002b8c:	e02e      	b.n	8002bec <HAL_RCC_OscConfig+0xd4>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10c      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x98>
 8002b96:	4b7b      	ldr	r3, [pc, #492]	@ (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a7a      	ldr	r2, [pc, #488]	@ (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	4b78      	ldr	r3, [pc, #480]	@ (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a77      	ldr	r2, [pc, #476]	@ (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	e01d      	b.n	8002bec <HAL_RCC_OscConfig+0xd4>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0xbc>
 8002bba:	4b72      	ldr	r3, [pc, #456]	@ (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a71      	ldr	r2, [pc, #452]	@ (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	4b6f      	ldr	r3, [pc, #444]	@ (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a6e      	ldr	r2, [pc, #440]	@ (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	e00b      	b.n	8002bec <HAL_RCC_OscConfig+0xd4>
 8002bd4:	4b6b      	ldr	r3, [pc, #428]	@ (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a6a      	ldr	r2, [pc, #424]	@ (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002bda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	4b68      	ldr	r3, [pc, #416]	@ (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a67      	ldr	r2, [pc, #412]	@ (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002be6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d013      	beq.n	8002c1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf4:	f7fd feca 	bl	800098c <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bfc:	f7fd fec6 	bl	800098c <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b64      	cmp	r3, #100	@ 0x64
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e200      	b.n	8003010 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0e:	4b5d      	ldr	r3, [pc, #372]	@ (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f0      	beq.n	8002bfc <HAL_RCC_OscConfig+0xe4>
 8002c1a:	e014      	b.n	8002c46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1c:	f7fd feb6 	bl	800098c <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c24:	f7fd feb2 	bl	800098c <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b64      	cmp	r3, #100	@ 0x64
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e1ec      	b.n	8003010 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c36:	4b53      	ldr	r3, [pc, #332]	@ (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f0      	bne.n	8002c24 <HAL_RCC_OscConfig+0x10c>
 8002c42:	e000      	b.n	8002c46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d063      	beq.n	8002d1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c52:	4b4c      	ldr	r3, [pc, #304]	@ (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f003 030c 	and.w	r3, r3, #12
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00b      	beq.n	8002c76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c5e:	4b49      	ldr	r3, [pc, #292]	@ (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f003 030c 	and.w	r3, r3, #12
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d11c      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x18c>
 8002c6a:	4b46      	ldr	r3, [pc, #280]	@ (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d116      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c76:	4b43      	ldr	r3, [pc, #268]	@ (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d005      	beq.n	8002c8e <HAL_RCC_OscConfig+0x176>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d001      	beq.n	8002c8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e1c0      	b.n	8003010 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	4939      	ldr	r1, [pc, #228]	@ (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca2:	e03a      	b.n	8002d1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d020      	beq.n	8002cee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cac:	4b36      	ldr	r3, [pc, #216]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002cae:	2201      	movs	r2, #1
 8002cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb2:	f7fd fe6b 	bl	800098c <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cba:	f7fd fe67 	bl	800098c <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e1a1      	b.n	8003010 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ccc:	4b2d      	ldr	r3, [pc, #180]	@ (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0f0      	beq.n	8002cba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd8:	4b2a      	ldr	r3, [pc, #168]	@ (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	4927      	ldr	r1, [pc, #156]	@ (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	600b      	str	r3, [r1, #0]
 8002cec:	e015      	b.n	8002d1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cee:	4b26      	ldr	r3, [pc, #152]	@ (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf4:	f7fd fe4a 	bl	800098c <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cfc:	f7fd fe46 	bl	800098c <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e180      	b.n	8003010 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f0      	bne.n	8002cfc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d03a      	beq.n	8002d9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d019      	beq.n	8002d62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d2e:	4b17      	ldr	r3, [pc, #92]	@ (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002d30:	2201      	movs	r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d34:	f7fd fe2a 	bl	800098c <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d3c:	f7fd fe26 	bl	800098c <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e160      	b.n	8003010 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0f0      	beq.n	8002d3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d5a:	2001      	movs	r0, #1
 8002d5c:	f000 face 	bl	80032fc <RCC_Delay>
 8002d60:	e01c      	b.n	8002d9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d62:	4b0a      	ldr	r3, [pc, #40]	@ (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d68:	f7fd fe10 	bl	800098c <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d6e:	e00f      	b.n	8002d90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d70:	f7fd fe0c 	bl	800098c <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d908      	bls.n	8002d90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e146      	b.n	8003010 <HAL_RCC_OscConfig+0x4f8>
 8002d82:	bf00      	nop
 8002d84:	40021000 	.word	0x40021000
 8002d88:	42420000 	.word	0x42420000
 8002d8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d90:	4b92      	ldr	r3, [pc, #584]	@ (8002fdc <HAL_RCC_OscConfig+0x4c4>)
 8002d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1e9      	bne.n	8002d70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 80a6 	beq.w	8002ef6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002daa:	2300      	movs	r3, #0
 8002dac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dae:	4b8b      	ldr	r3, [pc, #556]	@ (8002fdc <HAL_RCC_OscConfig+0x4c4>)
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10d      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dba:	4b88      	ldr	r3, [pc, #544]	@ (8002fdc <HAL_RCC_OscConfig+0x4c4>)
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	4a87      	ldr	r2, [pc, #540]	@ (8002fdc <HAL_RCC_OscConfig+0x4c4>)
 8002dc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dc4:	61d3      	str	r3, [r2, #28]
 8002dc6:	4b85      	ldr	r3, [pc, #532]	@ (8002fdc <HAL_RCC_OscConfig+0x4c4>)
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dce:	60bb      	str	r3, [r7, #8]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd6:	4b82      	ldr	r3, [pc, #520]	@ (8002fe0 <HAL_RCC_OscConfig+0x4c8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d118      	bne.n	8002e14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002de2:	4b7f      	ldr	r3, [pc, #508]	@ (8002fe0 <HAL_RCC_OscConfig+0x4c8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a7e      	ldr	r2, [pc, #504]	@ (8002fe0 <HAL_RCC_OscConfig+0x4c8>)
 8002de8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dee:	f7fd fdcd 	bl	800098c <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df6:	f7fd fdc9 	bl	800098c <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b64      	cmp	r3, #100	@ 0x64
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e103      	b.n	8003010 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e08:	4b75      	ldr	r3, [pc, #468]	@ (8002fe0 <HAL_RCC_OscConfig+0x4c8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0f0      	beq.n	8002df6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d106      	bne.n	8002e2a <HAL_RCC_OscConfig+0x312>
 8002e1c:	4b6f      	ldr	r3, [pc, #444]	@ (8002fdc <HAL_RCC_OscConfig+0x4c4>)
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	4a6e      	ldr	r2, [pc, #440]	@ (8002fdc <HAL_RCC_OscConfig+0x4c4>)
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	6213      	str	r3, [r2, #32]
 8002e28:	e02d      	b.n	8002e86 <HAL_RCC_OscConfig+0x36e>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10c      	bne.n	8002e4c <HAL_RCC_OscConfig+0x334>
 8002e32:	4b6a      	ldr	r3, [pc, #424]	@ (8002fdc <HAL_RCC_OscConfig+0x4c4>)
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	4a69      	ldr	r2, [pc, #420]	@ (8002fdc <HAL_RCC_OscConfig+0x4c4>)
 8002e38:	f023 0301 	bic.w	r3, r3, #1
 8002e3c:	6213      	str	r3, [r2, #32]
 8002e3e:	4b67      	ldr	r3, [pc, #412]	@ (8002fdc <HAL_RCC_OscConfig+0x4c4>)
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	4a66      	ldr	r2, [pc, #408]	@ (8002fdc <HAL_RCC_OscConfig+0x4c4>)
 8002e44:	f023 0304 	bic.w	r3, r3, #4
 8002e48:	6213      	str	r3, [r2, #32]
 8002e4a:	e01c      	b.n	8002e86 <HAL_RCC_OscConfig+0x36e>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	2b05      	cmp	r3, #5
 8002e52:	d10c      	bne.n	8002e6e <HAL_RCC_OscConfig+0x356>
 8002e54:	4b61      	ldr	r3, [pc, #388]	@ (8002fdc <HAL_RCC_OscConfig+0x4c4>)
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	4a60      	ldr	r2, [pc, #384]	@ (8002fdc <HAL_RCC_OscConfig+0x4c4>)
 8002e5a:	f043 0304 	orr.w	r3, r3, #4
 8002e5e:	6213      	str	r3, [r2, #32]
 8002e60:	4b5e      	ldr	r3, [pc, #376]	@ (8002fdc <HAL_RCC_OscConfig+0x4c4>)
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	4a5d      	ldr	r2, [pc, #372]	@ (8002fdc <HAL_RCC_OscConfig+0x4c4>)
 8002e66:	f043 0301 	orr.w	r3, r3, #1
 8002e6a:	6213      	str	r3, [r2, #32]
 8002e6c:	e00b      	b.n	8002e86 <HAL_RCC_OscConfig+0x36e>
 8002e6e:	4b5b      	ldr	r3, [pc, #364]	@ (8002fdc <HAL_RCC_OscConfig+0x4c4>)
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	4a5a      	ldr	r2, [pc, #360]	@ (8002fdc <HAL_RCC_OscConfig+0x4c4>)
 8002e74:	f023 0301 	bic.w	r3, r3, #1
 8002e78:	6213      	str	r3, [r2, #32]
 8002e7a:	4b58      	ldr	r3, [pc, #352]	@ (8002fdc <HAL_RCC_OscConfig+0x4c4>)
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	4a57      	ldr	r2, [pc, #348]	@ (8002fdc <HAL_RCC_OscConfig+0x4c4>)
 8002e80:	f023 0304 	bic.w	r3, r3, #4
 8002e84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d015      	beq.n	8002eba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e8e:	f7fd fd7d 	bl	800098c <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e94:	e00a      	b.n	8002eac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e96:	f7fd fd79 	bl	800098c <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e0b1      	b.n	8003010 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eac:	4b4b      	ldr	r3, [pc, #300]	@ (8002fdc <HAL_RCC_OscConfig+0x4c4>)
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0ee      	beq.n	8002e96 <HAL_RCC_OscConfig+0x37e>
 8002eb8:	e014      	b.n	8002ee4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eba:	f7fd fd67 	bl	800098c <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec0:	e00a      	b.n	8002ed8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec2:	f7fd fd63 	bl	800098c <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e09b      	b.n	8003010 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed8:	4b40      	ldr	r3, [pc, #256]	@ (8002fdc <HAL_RCC_OscConfig+0x4c4>)
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1ee      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ee4:	7dfb      	ldrb	r3, [r7, #23]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d105      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eea:	4b3c      	ldr	r3, [pc, #240]	@ (8002fdc <HAL_RCC_OscConfig+0x4c4>)
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	4a3b      	ldr	r2, [pc, #236]	@ (8002fdc <HAL_RCC_OscConfig+0x4c4>)
 8002ef0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ef4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 8087 	beq.w	800300e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f00:	4b36      	ldr	r3, [pc, #216]	@ (8002fdc <HAL_RCC_OscConfig+0x4c4>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f003 030c 	and.w	r3, r3, #12
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d061      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d146      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f14:	4b33      	ldr	r3, [pc, #204]	@ (8002fe4 <HAL_RCC_OscConfig+0x4cc>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1a:	f7fd fd37 	bl	800098c <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f20:	e008      	b.n	8002f34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f22:	f7fd fd33 	bl	800098c <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e06d      	b.n	8003010 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f34:	4b29      	ldr	r3, [pc, #164]	@ (8002fdc <HAL_RCC_OscConfig+0x4c4>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1f0      	bne.n	8002f22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f48:	d108      	bne.n	8002f5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f4a:	4b24      	ldr	r3, [pc, #144]	@ (8002fdc <HAL_RCC_OscConfig+0x4c4>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	4921      	ldr	r1, [pc, #132]	@ (8002fdc <HAL_RCC_OscConfig+0x4c4>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8002fdc <HAL_RCC_OscConfig+0x4c4>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a19      	ldr	r1, [r3, #32]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6c:	430b      	orrs	r3, r1
 8002f6e:	491b      	ldr	r1, [pc, #108]	@ (8002fdc <HAL_RCC_OscConfig+0x4c4>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f74:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe4 <HAL_RCC_OscConfig+0x4cc>)
 8002f76:	2201      	movs	r2, #1
 8002f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7a:	f7fd fd07 	bl	800098c <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f82:	f7fd fd03 	bl	800098c <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e03d      	b.n	8003010 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f94:	4b11      	ldr	r3, [pc, #68]	@ (8002fdc <HAL_RCC_OscConfig+0x4c4>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0f0      	beq.n	8002f82 <HAL_RCC_OscConfig+0x46a>
 8002fa0:	e035      	b.n	800300e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa2:	4b10      	ldr	r3, [pc, #64]	@ (8002fe4 <HAL_RCC_OscConfig+0x4cc>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa8:	f7fd fcf0 	bl	800098c <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb0:	f7fd fcec 	bl	800098c <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e026      	b.n	8003010 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc2:	4b06      	ldr	r3, [pc, #24]	@ (8002fdc <HAL_RCC_OscConfig+0x4c4>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f0      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x498>
 8002fce:	e01e      	b.n	800300e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d107      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e019      	b.n	8003010 <HAL_RCC_OscConfig+0x4f8>
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	40007000 	.word	0x40007000
 8002fe4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8003018 <HAL_RCC_OscConfig+0x500>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d106      	bne.n	800300a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003006:	429a      	cmp	r2, r3
 8003008:	d001      	beq.n	800300e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e000      	b.n	8003010 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40021000 	.word	0x40021000

0800301c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e0d0      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003030:	4b6a      	ldr	r3, [pc, #424]	@ (80031dc <HAL_RCC_ClockConfig+0x1c0>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d910      	bls.n	8003060 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303e:	4b67      	ldr	r3, [pc, #412]	@ (80031dc <HAL_RCC_ClockConfig+0x1c0>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f023 0207 	bic.w	r2, r3, #7
 8003046:	4965      	ldr	r1, [pc, #404]	@ (80031dc <HAL_RCC_ClockConfig+0x1c0>)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	4313      	orrs	r3, r2
 800304c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800304e:	4b63      	ldr	r3, [pc, #396]	@ (80031dc <HAL_RCC_ClockConfig+0x1c0>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d001      	beq.n	8003060 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e0b8      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d020      	beq.n	80030ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	d005      	beq.n	8003084 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003078:	4b59      	ldr	r3, [pc, #356]	@ (80031e0 <HAL_RCC_ClockConfig+0x1c4>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	4a58      	ldr	r2, [pc, #352]	@ (80031e0 <HAL_RCC_ClockConfig+0x1c4>)
 800307e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003082:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003090:	4b53      	ldr	r3, [pc, #332]	@ (80031e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	4a52      	ldr	r2, [pc, #328]	@ (80031e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003096:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800309a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800309c:	4b50      	ldr	r3, [pc, #320]	@ (80031e0 <HAL_RCC_ClockConfig+0x1c4>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	494d      	ldr	r1, [pc, #308]	@ (80031e0 <HAL_RCC_ClockConfig+0x1c4>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d040      	beq.n	800313c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d107      	bne.n	80030d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c2:	4b47      	ldr	r3, [pc, #284]	@ (80031e0 <HAL_RCC_ClockConfig+0x1c4>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d115      	bne.n	80030fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e07f      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d107      	bne.n	80030ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030da:	4b41      	ldr	r3, [pc, #260]	@ (80031e0 <HAL_RCC_ClockConfig+0x1c4>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d109      	bne.n	80030fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e073      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ea:	4b3d      	ldr	r3, [pc, #244]	@ (80031e0 <HAL_RCC_ClockConfig+0x1c4>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e06b      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030fa:	4b39      	ldr	r3, [pc, #228]	@ (80031e0 <HAL_RCC_ClockConfig+0x1c4>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f023 0203 	bic.w	r2, r3, #3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	4936      	ldr	r1, [pc, #216]	@ (80031e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003108:	4313      	orrs	r3, r2
 800310a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800310c:	f7fd fc3e 	bl	800098c <HAL_GetTick>
 8003110:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003112:	e00a      	b.n	800312a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003114:	f7fd fc3a 	bl	800098c <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003122:	4293      	cmp	r3, r2
 8003124:	d901      	bls.n	800312a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e053      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312a:	4b2d      	ldr	r3, [pc, #180]	@ (80031e0 <HAL_RCC_ClockConfig+0x1c4>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f003 020c 	and.w	r2, r3, #12
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	429a      	cmp	r2, r3
 800313a:	d1eb      	bne.n	8003114 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800313c:	4b27      	ldr	r3, [pc, #156]	@ (80031dc <HAL_RCC_ClockConfig+0x1c0>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	429a      	cmp	r2, r3
 8003148:	d210      	bcs.n	800316c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314a:	4b24      	ldr	r3, [pc, #144]	@ (80031dc <HAL_RCC_ClockConfig+0x1c0>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f023 0207 	bic.w	r2, r3, #7
 8003152:	4922      	ldr	r1, [pc, #136]	@ (80031dc <HAL_RCC_ClockConfig+0x1c0>)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	4313      	orrs	r3, r2
 8003158:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800315a:	4b20      	ldr	r3, [pc, #128]	@ (80031dc <HAL_RCC_ClockConfig+0x1c0>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	429a      	cmp	r2, r3
 8003166:	d001      	beq.n	800316c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e032      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b00      	cmp	r3, #0
 8003176:	d008      	beq.n	800318a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003178:	4b19      	ldr	r3, [pc, #100]	@ (80031e0 <HAL_RCC_ClockConfig+0x1c4>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	4916      	ldr	r1, [pc, #88]	@ (80031e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003186:	4313      	orrs	r3, r2
 8003188:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0308 	and.w	r3, r3, #8
 8003192:	2b00      	cmp	r3, #0
 8003194:	d009      	beq.n	80031aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003196:	4b12      	ldr	r3, [pc, #72]	@ (80031e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	490e      	ldr	r1, [pc, #56]	@ (80031e0 <HAL_RCC_ClockConfig+0x1c4>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031aa:	f000 f821 	bl	80031f0 <HAL_RCC_GetSysClockFreq>
 80031ae:	4602      	mov	r2, r0
 80031b0:	4b0b      	ldr	r3, [pc, #44]	@ (80031e0 <HAL_RCC_ClockConfig+0x1c4>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	091b      	lsrs	r3, r3, #4
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	490a      	ldr	r1, [pc, #40]	@ (80031e4 <HAL_RCC_ClockConfig+0x1c8>)
 80031bc:	5ccb      	ldrb	r3, [r1, r3]
 80031be:	fa22 f303 	lsr.w	r3, r2, r3
 80031c2:	4a09      	ldr	r2, [pc, #36]	@ (80031e8 <HAL_RCC_ClockConfig+0x1cc>)
 80031c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031c6:	4b09      	ldr	r3, [pc, #36]	@ (80031ec <HAL_RCC_ClockConfig+0x1d0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fd fb9c 	bl	8000908 <HAL_InitTick>

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40022000 	.word	0x40022000
 80031e0:	40021000 	.word	0x40021000
 80031e4:	08008750 	.word	0x08008750
 80031e8:	200008b4 	.word	0x200008b4
 80031ec:	200008b8 	.word	0x200008b8

080031f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b087      	sub	sp, #28
 80031f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	2300      	movs	r3, #0
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	2300      	movs	r3, #0
 8003200:	617b      	str	r3, [r7, #20]
 8003202:	2300      	movs	r3, #0
 8003204:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003206:	2300      	movs	r3, #0
 8003208:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800320a:	4b1e      	ldr	r3, [pc, #120]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x94>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f003 030c 	and.w	r3, r3, #12
 8003216:	2b04      	cmp	r3, #4
 8003218:	d002      	beq.n	8003220 <HAL_RCC_GetSysClockFreq+0x30>
 800321a:	2b08      	cmp	r3, #8
 800321c:	d003      	beq.n	8003226 <HAL_RCC_GetSysClockFreq+0x36>
 800321e:	e027      	b.n	8003270 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003220:	4b19      	ldr	r3, [pc, #100]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x98>)
 8003222:	613b      	str	r3, [r7, #16]
      break;
 8003224:	e027      	b.n	8003276 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	0c9b      	lsrs	r3, r3, #18
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	4a17      	ldr	r2, [pc, #92]	@ (800328c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003230:	5cd3      	ldrb	r3, [r2, r3]
 8003232:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d010      	beq.n	8003260 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800323e:	4b11      	ldr	r3, [pc, #68]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x94>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	0c5b      	lsrs	r3, r3, #17
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	4a11      	ldr	r2, [pc, #68]	@ (8003290 <HAL_RCC_GetSysClockFreq+0xa0>)
 800324a:	5cd3      	ldrb	r3, [r2, r3]
 800324c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a0d      	ldr	r2, [pc, #52]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x98>)
 8003252:	fb03 f202 	mul.w	r2, r3, r2
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	fbb2 f3f3 	udiv	r3, r2, r3
 800325c:	617b      	str	r3, [r7, #20]
 800325e:	e004      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a0c      	ldr	r2, [pc, #48]	@ (8003294 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003264:	fb02 f303 	mul.w	r3, r2, r3
 8003268:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	613b      	str	r3, [r7, #16]
      break;
 800326e:	e002      	b.n	8003276 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003270:	4b05      	ldr	r3, [pc, #20]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x98>)
 8003272:	613b      	str	r3, [r7, #16]
      break;
 8003274:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003276:	693b      	ldr	r3, [r7, #16]
}
 8003278:	4618      	mov	r0, r3
 800327a:	371c      	adds	r7, #28
 800327c:	46bd      	mov	sp, r7
 800327e:	bc80      	pop	{r7}
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	40021000 	.word	0x40021000
 8003288:	007a1200 	.word	0x007a1200
 800328c:	08008768 	.word	0x08008768
 8003290:	08008778 	.word	0x08008778
 8003294:	003d0900 	.word	0x003d0900

08003298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800329c:	4b02      	ldr	r3, [pc, #8]	@ (80032a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800329e:	681b      	ldr	r3, [r3, #0]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr
 80032a8:	200008b4 	.word	0x200008b4

080032ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032b0:	f7ff fff2 	bl	8003298 <HAL_RCC_GetHCLKFreq>
 80032b4:	4602      	mov	r2, r0
 80032b6:	4b05      	ldr	r3, [pc, #20]	@ (80032cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	0a1b      	lsrs	r3, r3, #8
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	4903      	ldr	r1, [pc, #12]	@ (80032d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032c2:	5ccb      	ldrb	r3, [r1, r3]
 80032c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40021000 	.word	0x40021000
 80032d0:	08008760 	.word	0x08008760

080032d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032d8:	f7ff ffde 	bl	8003298 <HAL_RCC_GetHCLKFreq>
 80032dc:	4602      	mov	r2, r0
 80032de:	4b05      	ldr	r3, [pc, #20]	@ (80032f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	0adb      	lsrs	r3, r3, #11
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	4903      	ldr	r1, [pc, #12]	@ (80032f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ea:	5ccb      	ldrb	r3, [r1, r3]
 80032ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40021000 	.word	0x40021000
 80032f8:	08008760 	.word	0x08008760

080032fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003304:	4b0a      	ldr	r3, [pc, #40]	@ (8003330 <RCC_Delay+0x34>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a0a      	ldr	r2, [pc, #40]	@ (8003334 <RCC_Delay+0x38>)
 800330a:	fba2 2303 	umull	r2, r3, r2, r3
 800330e:	0a5b      	lsrs	r3, r3, #9
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	fb02 f303 	mul.w	r3, r2, r3
 8003316:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003318:	bf00      	nop
  }
  while (Delay --);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	1e5a      	subs	r2, r3, #1
 800331e:	60fa      	str	r2, [r7, #12]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1f9      	bne.n	8003318 <RCC_Delay+0x1c>
}
 8003324:	bf00      	nop
 8003326:	bf00      	nop
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr
 8003330:	200008b4 	.word	0x200008b4
 8003334:	10624dd3 	.word	0x10624dd3

08003338 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	613b      	str	r3, [r7, #16]
 8003344:	2300      	movs	r3, #0
 8003346:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	d07d      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003354:	2300      	movs	r3, #0
 8003356:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003358:	4b4f      	ldr	r3, [pc, #316]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10d      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003364:	4b4c      	ldr	r3, [pc, #304]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	4a4b      	ldr	r2, [pc, #300]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800336a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800336e:	61d3      	str	r3, [r2, #28]
 8003370:	4b49      	ldr	r3, [pc, #292]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003378:	60bb      	str	r3, [r7, #8]
 800337a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800337c:	2301      	movs	r3, #1
 800337e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003380:	4b46      	ldr	r3, [pc, #280]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003388:	2b00      	cmp	r3, #0
 800338a:	d118      	bne.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800338c:	4b43      	ldr	r3, [pc, #268]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a42      	ldr	r2, [pc, #264]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003392:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003396:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003398:	f7fd faf8 	bl	800098c <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339e:	e008      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a0:	f7fd faf4 	bl	800098c <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b64      	cmp	r3, #100	@ 0x64
 80033ac:	d901      	bls.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e06d      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b2:	4b3a      	ldr	r3, [pc, #232]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0f0      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033be:	4b36      	ldr	r3, [pc, #216]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d02e      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d027      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033dc:	4b2e      	ldr	r3, [pc, #184]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033e6:	4b2e      	ldr	r3, [pc, #184]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033e8:	2201      	movs	r2, #1
 80033ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033ec:	4b2c      	ldr	r3, [pc, #176]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033f2:	4a29      	ldr	r2, [pc, #164]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d014      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003402:	f7fd fac3 	bl	800098c <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003408:	e00a      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340a:	f7fd fabf 	bl	800098c <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003418:	4293      	cmp	r3, r2
 800341a:	d901      	bls.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e036      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003420:	4b1d      	ldr	r3, [pc, #116]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0ee      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800342c:	4b1a      	ldr	r3, [pc, #104]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	4917      	ldr	r1, [pc, #92]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800343a:	4313      	orrs	r3, r2
 800343c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800343e:	7dfb      	ldrb	r3, [r7, #23]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d105      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003444:	4b14      	ldr	r3, [pc, #80]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	4a13      	ldr	r2, [pc, #76]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800344a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800344e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d008      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800345c:	4b0e      	ldr	r3, [pc, #56]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	490b      	ldr	r1, [pc, #44]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800346a:	4313      	orrs	r3, r2
 800346c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0310 	and.w	r3, r3, #16
 8003476:	2b00      	cmp	r3, #0
 8003478:	d008      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800347a:	4b07      	ldr	r3, [pc, #28]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	4904      	ldr	r1, [pc, #16]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003488:	4313      	orrs	r3, r2
 800348a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40021000 	.word	0x40021000
 800349c:	40007000 	.word	0x40007000
 80034a0:	42420440 	.word	0x42420440

080034a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e042      	b.n	800353c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d106      	bne.n	80034d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fd f946 	bl	800075c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2224      	movs	r2, #36	@ 0x24
 80034d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68da      	ldr	r2, [r3, #12]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 fcff 	bl	8003eec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	691a      	ldr	r2, [r3, #16]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	695a      	ldr	r2, [r3, #20]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800350c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800351c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	4613      	mov	r3, r2
 8003550:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b20      	cmp	r3, #32
 800355c:	d121      	bne.n	80035a2 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d002      	beq.n	800356a <HAL_UART_Transmit_IT+0x26>
 8003564:	88fb      	ldrh	r3, [r7, #6]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e01a      	b.n	80035a4 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	88fa      	ldrh	r2, [r7, #6]
 8003578:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	88fa      	ldrh	r2, [r7, #6]
 800357e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2221      	movs	r2, #33	@ 0x21
 800358a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68da      	ldr	r2, [r3, #12]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800359c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	e000      	b.n	80035a4 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80035a2:	2302      	movs	r3, #2
  }
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bc80      	pop	{r7}
 80035ac:	4770      	bx	lr

080035ae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b084      	sub	sp, #16
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	60f8      	str	r0, [r7, #12]
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	4613      	mov	r3, r2
 80035ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b20      	cmp	r3, #32
 80035c6:	d112      	bne.n	80035ee <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <HAL_UART_Receive_IT+0x26>
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e00b      	b.n	80035f0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80035de:	88fb      	ldrh	r3, [r7, #6]
 80035e0:	461a      	mov	r2, r3
 80035e2:	68b9      	ldr	r1, [r7, #8]
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 faad 	bl	8003b44 <UART_Start_Receive_IT>
 80035ea:	4603      	mov	r3, r0
 80035ec:	e000      	b.n	80035f0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80035ee:	2302      	movs	r3, #2
  }
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b0ba      	sub	sp, #232	@ 0xe8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800361e:	2300      	movs	r3, #0
 8003620:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003624:	2300      	movs	r3, #0
 8003626:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800362a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003636:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10f      	bne.n	800365e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800363e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	2b00      	cmp	r3, #0
 8003648:	d009      	beq.n	800365e <HAL_UART_IRQHandler+0x66>
 800364a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fb8a 	bl	8003d70 <UART_Receive_IT>
      return;
 800365c:	e25b      	b.n	8003b16 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800365e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 80de 	beq.w	8003824 <HAL_UART_IRQHandler+0x22c>
 8003668:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b00      	cmp	r3, #0
 8003672:	d106      	bne.n	8003682 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003678:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 80d1 	beq.w	8003824 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00b      	beq.n	80036a6 <HAL_UART_IRQHandler+0xae>
 800368e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003696:	2b00      	cmp	r3, #0
 8003698:	d005      	beq.n	80036a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369e:	f043 0201 	orr.w	r2, r3, #1
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036aa:	f003 0304 	and.w	r3, r3, #4
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00b      	beq.n	80036ca <HAL_UART_IRQHandler+0xd2>
 80036b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d005      	beq.n	80036ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c2:	f043 0202 	orr.w	r2, r3, #2
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00b      	beq.n	80036ee <HAL_UART_IRQHandler+0xf6>
 80036d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d005      	beq.n	80036ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e6:	f043 0204 	orr.w	r2, r3, #4
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80036ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d011      	beq.n	800371e <HAL_UART_IRQHandler+0x126>
 80036fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036fe:	f003 0320 	and.w	r3, r3, #32
 8003702:	2b00      	cmp	r3, #0
 8003704:	d105      	bne.n	8003712 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d005      	beq.n	800371e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003716:	f043 0208 	orr.w	r2, r3, #8
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 81f2 	beq.w	8003b0c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800372c:	f003 0320 	and.w	r3, r3, #32
 8003730:	2b00      	cmp	r3, #0
 8003732:	d008      	beq.n	8003746 <HAL_UART_IRQHandler+0x14e>
 8003734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003738:	f003 0320 	and.w	r3, r3, #32
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 fb15 	bl	8003d70 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003750:	2b00      	cmp	r3, #0
 8003752:	bf14      	ite	ne
 8003754:	2301      	movne	r3, #1
 8003756:	2300      	moveq	r3, #0
 8003758:	b2db      	uxtb	r3, r3
 800375a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	2b00      	cmp	r3, #0
 8003768:	d103      	bne.n	8003772 <HAL_UART_IRQHandler+0x17a>
 800376a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800376e:	2b00      	cmp	r3, #0
 8003770:	d04f      	beq.n	8003812 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 fa1f 	bl	8003bb6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003782:	2b00      	cmp	r3, #0
 8003784:	d041      	beq.n	800380a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	3314      	adds	r3, #20
 800378c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003790:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003794:	e853 3f00 	ldrex	r3, [r3]
 8003798:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800379c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	3314      	adds	r3, #20
 80037ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80037b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80037b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80037be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80037c2:	e841 2300 	strex	r3, r2, [r1]
 80037c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80037ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1d9      	bne.n	8003786 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d013      	beq.n	8003802 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037de:	4a7e      	ldr	r2, [pc, #504]	@ (80039d8 <HAL_UART_IRQHandler+0x3e0>)
 80037e0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fd fa22 	bl	8000c30 <HAL_DMA_Abort_IT>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d016      	beq.n	8003820 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80037fc:	4610      	mov	r0, r2
 80037fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003800:	e00e      	b.n	8003820 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7fc fd20 	bl	8000248 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003808:	e00a      	b.n	8003820 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7fc fd1c 	bl	8000248 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003810:	e006      	b.n	8003820 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7fc fd18 	bl	8000248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800381e:	e175      	b.n	8003b0c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003820:	bf00      	nop
    return;
 8003822:	e173      	b.n	8003b0c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003828:	2b01      	cmp	r3, #1
 800382a:	f040 814f 	bne.w	8003acc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800382e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 8148 	beq.w	8003acc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800383c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003840:	f003 0310 	and.w	r3, r3, #16
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 8141 	beq.w	8003acc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800384a:	2300      	movs	r3, #0
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	60bb      	str	r3, [r7, #8]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	60bb      	str	r3, [r7, #8]
 800385e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 80b6 	beq.w	80039dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800387c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 8145 	beq.w	8003b10 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800388a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800388e:	429a      	cmp	r2, r3
 8003890:	f080 813e 	bcs.w	8003b10 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800389a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	2b20      	cmp	r3, #32
 80038a4:	f000 8088 	beq.w	80039b8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	330c      	adds	r3, #12
 80038ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038b6:	e853 3f00 	ldrex	r3, [r3]
 80038ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80038be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	330c      	adds	r3, #12
 80038d0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80038d4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80038d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038dc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80038e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80038e4:	e841 2300 	strex	r3, r2, [r1]
 80038e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80038ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1d9      	bne.n	80038a8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	3314      	adds	r3, #20
 80038fa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038fe:	e853 3f00 	ldrex	r3, [r3]
 8003902:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003904:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003906:	f023 0301 	bic.w	r3, r3, #1
 800390a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	3314      	adds	r3, #20
 8003914:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003918:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800391c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003920:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003924:	e841 2300 	strex	r3, r2, [r1]
 8003928:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800392a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1e1      	bne.n	80038f4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3314      	adds	r3, #20
 8003936:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003938:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800393a:	e853 3f00 	ldrex	r3, [r3]
 800393e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003940:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003942:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003946:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3314      	adds	r3, #20
 8003950:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003954:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003956:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003958:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800395a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800395c:	e841 2300 	strex	r3, r2, [r1]
 8003960:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003962:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1e3      	bne.n	8003930 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	330c      	adds	r3, #12
 800397c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003980:	e853 3f00 	ldrex	r3, [r3]
 8003984:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003986:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003988:	f023 0310 	bic.w	r3, r3, #16
 800398c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	330c      	adds	r3, #12
 8003996:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800399a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800399c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039a2:	e841 2300 	strex	r3, r2, [r1]
 80039a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80039a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1e3      	bne.n	8003976 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fd f901 	bl	8000bba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	4619      	mov	r1, r3
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f8ad 	bl	8003b2e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039d4:	e09c      	b.n	8003b10 <HAL_UART_IRQHandler+0x518>
 80039d6:	bf00      	nop
 80039d8:	08003c7b 	.word	0x08003c7b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 808e 	beq.w	8003b14 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80039f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 8089 	beq.w	8003b14 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	330c      	adds	r3, #12
 8003a08:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a0c:	e853 3f00 	ldrex	r3, [r3]
 8003a10:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	330c      	adds	r3, #12
 8003a22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003a26:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a2e:	e841 2300 	strex	r3, r2, [r1]
 8003a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1e3      	bne.n	8003a02 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	3314      	adds	r3, #20
 8003a40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a44:	e853 3f00 	ldrex	r3, [r3]
 8003a48:	623b      	str	r3, [r7, #32]
   return(result);
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	f023 0301 	bic.w	r3, r3, #1
 8003a50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3314      	adds	r3, #20
 8003a5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a5e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a66:	e841 2300 	strex	r3, r2, [r1]
 8003a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1e3      	bne.n	8003a3a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2220      	movs	r2, #32
 8003a76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	330c      	adds	r3, #12
 8003a86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	e853 3f00 	ldrex	r3, [r3]
 8003a8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f023 0310 	bic.w	r3, r3, #16
 8003a96:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	330c      	adds	r3, #12
 8003aa0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003aa4:	61fa      	str	r2, [r7, #28]
 8003aa6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa8:	69b9      	ldr	r1, [r7, #24]
 8003aaa:	69fa      	ldr	r2, [r7, #28]
 8003aac:	e841 2300 	strex	r3, r2, [r1]
 8003ab0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1e3      	bne.n	8003a80 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003abe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f832 	bl	8003b2e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003aca:	e023      	b.n	8003b14 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ad0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d009      	beq.n	8003aec <HAL_UART_IRQHandler+0x4f4>
 8003ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003adc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f8dc 	bl	8003ca2 <UART_Transmit_IT>
    return;
 8003aea:	e014      	b.n	8003b16 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00e      	beq.n	8003b16 <HAL_UART_IRQHandler+0x51e>
 8003af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f91b 	bl	8003d40 <UART_EndTransmit_IT>
    return;
 8003b0a:	e004      	b.n	8003b16 <HAL_UART_IRQHandler+0x51e>
    return;
 8003b0c:	bf00      	nop
 8003b0e:	e002      	b.n	8003b16 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b10:	bf00      	nop
 8003b12:	e000      	b.n	8003b16 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b14:	bf00      	nop
  }
}
 8003b16:	37e8      	adds	r7, #232	@ 0xe8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bc80      	pop	{r7}
 8003b2c:	4770      	bx	lr

08003b2e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
 8003b36:	460b      	mov	r3, r1
 8003b38:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bc80      	pop	{r7}
 8003b42:	4770      	bx	lr

08003b44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	88fa      	ldrh	r2, [r7, #6]
 8003b5c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	88fa      	ldrh	r2, [r7, #6]
 8003b62:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2222      	movs	r2, #34	@ 0x22
 8003b6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d007      	beq.n	8003b8a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68da      	ldr	r2, [r3, #12]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b88:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	695a      	ldr	r2, [r3, #20]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f042 0201 	orr.w	r2, r2, #1
 8003b98:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68da      	ldr	r2, [r3, #12]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f042 0220 	orr.w	r2, r2, #32
 8003ba8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	4770      	bx	lr

08003bb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b095      	sub	sp, #84	@ 0x54
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	330c      	adds	r3, #12
 8003bc4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bc8:	e853 3f00 	ldrex	r3, [r3]
 8003bcc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	330c      	adds	r3, #12
 8003bdc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bde:	643a      	str	r2, [r7, #64]	@ 0x40
 8003be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003be4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003be6:	e841 2300 	strex	r3, r2, [r1]
 8003bea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1e5      	bne.n	8003bbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3314      	adds	r3, #20
 8003bf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	e853 3f00 	ldrex	r3, [r3]
 8003c00:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	f023 0301 	bic.w	r3, r3, #1
 8003c08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	3314      	adds	r3, #20
 8003c10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c1a:	e841 2300 	strex	r3, r2, [r1]
 8003c1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1e5      	bne.n	8003bf2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d119      	bne.n	8003c62 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	330c      	adds	r3, #12
 8003c34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	e853 3f00 	ldrex	r3, [r3]
 8003c3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	f023 0310 	bic.w	r3, r3, #16
 8003c44:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	330c      	adds	r3, #12
 8003c4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c4e:	61ba      	str	r2, [r7, #24]
 8003c50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c52:	6979      	ldr	r1, [r7, #20]
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	e841 2300 	strex	r3, r2, [r1]
 8003c5a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1e5      	bne.n	8003c2e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2220      	movs	r2, #32
 8003c66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c70:	bf00      	nop
 8003c72:	3754      	adds	r7, #84	@ 0x54
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bc80      	pop	{r7}
 8003c78:	4770      	bx	lr

08003c7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b084      	sub	sp, #16
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f7fc fad7 	bl	8000248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c9a:	bf00      	nop
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b085      	sub	sp, #20
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b21      	cmp	r3, #33	@ 0x21
 8003cb4:	d13e      	bne.n	8003d34 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cbe:	d114      	bne.n	8003cea <UART_Transmit_IT+0x48>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d110      	bne.n	8003cea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	881b      	ldrh	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cdc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	1c9a      	adds	r2, r3, #2
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	621a      	str	r2, [r3, #32]
 8003ce8:	e008      	b.n	8003cfc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	1c59      	adds	r1, r3, #1
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6211      	str	r1, [r2, #32]
 8003cf4:	781a      	ldrb	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	4619      	mov	r1, r3
 8003d0a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10f      	bne.n	8003d30 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68da      	ldr	r2, [r3, #12]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d1e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d2e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	e000      	b.n	8003d36 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d34:	2302      	movs	r3, #2
  }
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr

08003d40 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d56:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff fedb 	bl	8003b1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b08c      	sub	sp, #48	@ 0x30
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b22      	cmp	r3, #34	@ 0x22
 8003d82:	f040 80ae 	bne.w	8003ee2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d8e:	d117      	bne.n	8003dc0 <UART_Receive_IT+0x50>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d113      	bne.n	8003dc0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db8:	1c9a      	adds	r2, r3, #2
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	629a      	str	r2, [r3, #40]	@ 0x28
 8003dbe:	e026      	b.n	8003e0e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dd2:	d007      	beq.n	8003de4 <UART_Receive_IT+0x74>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10a      	bne.n	8003df2 <UART_Receive_IT+0x82>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d106      	bne.n	8003df2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dee:	701a      	strb	r2, [r3, #0]
 8003df0:	e008      	b.n	8003e04 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e02:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d15d      	bne.n	8003ede <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68da      	ldr	r2, [r3, #12]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0220 	bic.w	r2, r2, #32
 8003e30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695a      	ldr	r2, [r3, #20]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0201 	bic.w	r2, r2, #1
 8003e50:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2220      	movs	r2, #32
 8003e56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d135      	bne.n	8003ed4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	330c      	adds	r3, #12
 8003e74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	e853 3f00 	ldrex	r3, [r3]
 8003e7c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f023 0310 	bic.w	r3, r3, #16
 8003e84:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	330c      	adds	r3, #12
 8003e8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e8e:	623a      	str	r2, [r7, #32]
 8003e90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e92:	69f9      	ldr	r1, [r7, #28]
 8003e94:	6a3a      	ldr	r2, [r7, #32]
 8003e96:	e841 2300 	strex	r3, r2, [r1]
 8003e9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1e5      	bne.n	8003e6e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b10      	cmp	r3, #16
 8003eae:	d10a      	bne.n	8003ec6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003eca:	4619      	mov	r1, r3
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7ff fe2e 	bl	8003b2e <HAL_UARTEx_RxEventCallback>
 8003ed2:	e002      	b.n	8003eda <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7fc f939 	bl	800014c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	e002      	b.n	8003ee4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	e000      	b.n	8003ee4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003ee2:	2302      	movs	r3, #2
  }
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3730      	adds	r7, #48	@ 0x30
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689a      	ldr	r2, [r3, #8]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003f26:	f023 030c 	bic.w	r3, r3, #12
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6812      	ldr	r2, [r2, #0]
 8003f2e:	68b9      	ldr	r1, [r7, #8]
 8003f30:	430b      	orrs	r3, r1
 8003f32:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699a      	ldr	r2, [r3, #24]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a2c      	ldr	r2, [pc, #176]	@ (8004000 <UART_SetConfig+0x114>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d103      	bne.n	8003f5c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f54:	f7ff f9be 	bl	80032d4 <HAL_RCC_GetPCLK2Freq>
 8003f58:	60f8      	str	r0, [r7, #12]
 8003f5a:	e002      	b.n	8003f62 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f5c:	f7ff f9a6 	bl	80032ac <HAL_RCC_GetPCLK1Freq>
 8003f60:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	4613      	mov	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	009a      	lsls	r2, r3, #2
 8003f6c:	441a      	add	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f78:	4a22      	ldr	r2, [pc, #136]	@ (8004004 <UART_SetConfig+0x118>)
 8003f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7e:	095b      	lsrs	r3, r3, #5
 8003f80:	0119      	lsls	r1, r3, #4
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	4613      	mov	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	009a      	lsls	r2, r3, #2
 8003f8c:	441a      	add	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f98:	4b1a      	ldr	r3, [pc, #104]	@ (8004004 <UART_SetConfig+0x118>)
 8003f9a:	fba3 0302 	umull	r0, r3, r3, r2
 8003f9e:	095b      	lsrs	r3, r3, #5
 8003fa0:	2064      	movs	r0, #100	@ 0x64
 8003fa2:	fb00 f303 	mul.w	r3, r0, r3
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	011b      	lsls	r3, r3, #4
 8003faa:	3332      	adds	r3, #50	@ 0x32
 8003fac:	4a15      	ldr	r2, [pc, #84]	@ (8004004 <UART_SetConfig+0x118>)
 8003fae:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb2:	095b      	lsrs	r3, r3, #5
 8003fb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fb8:	4419      	add	r1, r3
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	009a      	lsls	r2, r3, #2
 8003fc4:	441a      	add	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8004004 <UART_SetConfig+0x118>)
 8003fd2:	fba3 0302 	umull	r0, r3, r3, r2
 8003fd6:	095b      	lsrs	r3, r3, #5
 8003fd8:	2064      	movs	r0, #100	@ 0x64
 8003fda:	fb00 f303 	mul.w	r3, r0, r3
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	3332      	adds	r3, #50	@ 0x32
 8003fe4:	4a07      	ldr	r2, [pc, #28]	@ (8004004 <UART_SetConfig+0x118>)
 8003fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fea:	095b      	lsrs	r3, r3, #5
 8003fec:	f003 020f 	and.w	r2, r3, #15
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	440a      	add	r2, r1
 8003ff6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ff8:	bf00      	nop
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	40013800 	.word	0x40013800
 8004004:	51eb851f 	.word	0x51eb851f

08004008 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	4638      	mov	r0, r7
 8004012:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	bc80      	pop	{r7}
 8004020:	4770      	bx	lr

08004022 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004022:	b480      	push	{r7}
 8004024:	b085      	sub	sp, #20
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004032:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004036:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	b29a      	uxth	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	bc80      	pop	{r7}
 800404c:	4770      	bx	lr

0800404e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800404e:	b480      	push	{r7}
 8004050:	b085      	sub	sp, #20
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004056:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800405a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	b29b      	uxth	r3, r3
 8004068:	43db      	mvns	r3, r3
 800406a:	b29b      	uxth	r3, r3
 800406c:	4013      	ands	r3, r2
 800406e:	b29a      	uxth	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	bc80      	pop	{r7}
 8004080:	4770      	bx	lr

08004082 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004082:	b480      	push	{r7}
 8004084:	b083      	sub	sp, #12
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
 800408a:	460b      	mov	r3, r1
 800408c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	bc80      	pop	{r7}
 8004098:	4770      	bx	lr

0800409a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800409a:	b480      	push	{r7}
 800409c:	b085      	sub	sp, #20
 800409e:	af00      	add	r7, sp, #0
 80040a0:	60f8      	str	r0, [r7, #12]
 80040a2:	4638      	mov	r0, r7
 80040a4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr

080040d4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b09d      	sub	sp, #116	@ 0x74
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4413      	add	r3, r2
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80040f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040fa:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	78db      	ldrb	r3, [r3, #3]
 8004102:	2b03      	cmp	r3, #3
 8004104:	d81f      	bhi.n	8004146 <USB_ActivateEndpoint+0x72>
 8004106:	a201      	add	r2, pc, #4	@ (adr r2, 800410c <USB_ActivateEndpoint+0x38>)
 8004108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410c:	0800411d 	.word	0x0800411d
 8004110:	08004139 	.word	0x08004139
 8004114:	0800414f 	.word	0x0800414f
 8004118:	0800412b 	.word	0x0800412b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800411c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004120:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004124:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004128:	e012      	b.n	8004150 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800412a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800412e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004132:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004136:	e00b      	b.n	8004150 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004138:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800413c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004140:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004144:	e004      	b.n	8004150 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800414c:	e000      	b.n	8004150 <USB_ActivateEndpoint+0x7c>
      break;
 800414e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	441a      	add	r2, r3
 800415a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800415e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004162:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004166:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800416a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800416e:	b29b      	uxth	r3, r3
 8004170:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4413      	add	r3, r2
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	b29b      	uxth	r3, r3
 8004180:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004184:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004188:	b29b      	uxth	r3, r3
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	7812      	ldrb	r2, [r2, #0]
 800418e:	4313      	orrs	r3, r2
 8004190:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	441a      	add	r2, r3
 800419e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80041a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	7b1b      	ldrb	r3, [r3, #12]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f040 8178 	bne.w	80044b0 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	785b      	ldrb	r3, [r3, #1]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 8084 	beq.w	80042d2 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	61bb      	str	r3, [r7, #24]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	461a      	mov	r2, r3
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	4413      	add	r3, r2
 80041dc:	61bb      	str	r3, [r7, #24]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	011a      	lsls	r2, r3, #4
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80041ec:	617b      	str	r3, [r7, #20]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	88db      	ldrh	r3, [r3, #6]
 80041f2:	085b      	lsrs	r3, r3, #1
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4413      	add	r3, r2
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	827b      	strh	r3, [r7, #18]
 800420c:	8a7b      	ldrh	r3, [r7, #18]
 800420e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004212:	2b00      	cmp	r3, #0
 8004214:	d01b      	beq.n	800424e <USB_ActivateEndpoint+0x17a>
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	881b      	ldrh	r3, [r3, #0]
 8004222:	b29b      	uxth	r3, r3
 8004224:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004228:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800422c:	823b      	strh	r3, [r7, #16]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	441a      	add	r2, r3
 8004238:	8a3b      	ldrh	r3, [r7, #16]
 800423a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800423e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004242:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004246:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800424a:	b29b      	uxth	r3, r3
 800424c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	78db      	ldrb	r3, [r3, #3]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d020      	beq.n	8004298 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4413      	add	r3, r2
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	b29b      	uxth	r3, r3
 8004264:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004268:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800426c:	81bb      	strh	r3, [r7, #12]
 800426e:	89bb      	ldrh	r3, [r7, #12]
 8004270:	f083 0320 	eor.w	r3, r3, #32
 8004274:	81bb      	strh	r3, [r7, #12]
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	441a      	add	r2, r3
 8004280:	89bb      	ldrh	r3, [r7, #12]
 8004282:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004286:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800428a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800428e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004292:	b29b      	uxth	r3, r3
 8004294:	8013      	strh	r3, [r2, #0]
 8004296:	e2d5      	b.n	8004844 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4413      	add	r3, r2
 80042a2:	881b      	ldrh	r3, [r3, #0]
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042ae:	81fb      	strh	r3, [r7, #14]
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	441a      	add	r2, r3
 80042ba:	89fb      	ldrh	r3, [r7, #14]
 80042bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	8013      	strh	r3, [r2, #0]
 80042d0:	e2b8      	b.n	8004844 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042dc:	b29b      	uxth	r3, r3
 80042de:	461a      	mov	r2, r3
 80042e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e2:	4413      	add	r3, r2
 80042e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	011a      	lsls	r2, r3, #4
 80042ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80042f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	88db      	ldrh	r3, [r3, #6]
 80042fa:	085b      	lsrs	r3, r3, #1
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004304:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	62bb      	str	r3, [r7, #40]	@ 0x28
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004310:	b29b      	uxth	r3, r3
 8004312:	461a      	mov	r2, r3
 8004314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004316:	4413      	add	r3, r2
 8004318:	62bb      	str	r3, [r7, #40]	@ 0x28
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	011a      	lsls	r2, r3, #4
 8004320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004322:	4413      	add	r3, r2
 8004324:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004328:	627b      	str	r3, [r7, #36]	@ 0x24
 800432a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	b29b      	uxth	r3, r3
 8004330:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004334:	b29a      	uxth	r2, r3
 8004336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004338:	801a      	strh	r2, [r3, #0]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004340:	d91d      	bls.n	800437e <USB_ActivateEndpoint+0x2aa>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	095b      	lsrs	r3, r3, #5
 8004348:	66bb      	str	r3, [r7, #104]	@ 0x68
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	f003 031f 	and.w	r3, r3, #31
 8004352:	2b00      	cmp	r3, #0
 8004354:	d102      	bne.n	800435c <USB_ActivateEndpoint+0x288>
 8004356:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004358:	3b01      	subs	r3, #1
 800435a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800435c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435e:	881b      	ldrh	r3, [r3, #0]
 8004360:	b29a      	uxth	r2, r3
 8004362:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004364:	b29b      	uxth	r3, r3
 8004366:	029b      	lsls	r3, r3, #10
 8004368:	b29b      	uxth	r3, r3
 800436a:	4313      	orrs	r3, r2
 800436c:	b29b      	uxth	r3, r3
 800436e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004372:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004376:	b29a      	uxth	r2, r3
 8004378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437a:	801a      	strh	r2, [r3, #0]
 800437c:	e026      	b.n	80043cc <USB_ActivateEndpoint+0x2f8>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10a      	bne.n	800439c <USB_ActivateEndpoint+0x2c8>
 8004386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	b29b      	uxth	r3, r3
 800438c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004390:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004394:	b29a      	uxth	r2, r3
 8004396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004398:	801a      	strh	r2, [r3, #0]
 800439a:	e017      	b.n	80043cc <USB_ActivateEndpoint+0x2f8>
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	085b      	lsrs	r3, r3, #1
 80043a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <USB_ActivateEndpoint+0x2e2>
 80043b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043b2:	3301      	adds	r3, #1
 80043b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b8:	881b      	ldrh	r3, [r3, #0]
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043be:	b29b      	uxth	r3, r3
 80043c0:	029b      	lsls	r3, r3, #10
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	4313      	orrs	r3, r2
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	847b      	strh	r3, [r7, #34]	@ 0x22
 80043da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80043dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d01b      	beq.n	800441c <USB_ActivateEndpoint+0x348>
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4413      	add	r3, r2
 80043ee:	881b      	ldrh	r3, [r3, #0]
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043fa:	843b      	strh	r3, [r7, #32]
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	441a      	add	r2, r3
 8004406:	8c3b      	ldrh	r3, [r7, #32]
 8004408:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800440c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004410:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004414:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004418:	b29b      	uxth	r3, r3
 800441a:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d124      	bne.n	800446e <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	881b      	ldrh	r3, [r3, #0]
 8004430:	b29b      	uxth	r3, r3
 8004432:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004436:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800443a:	83bb      	strh	r3, [r7, #28]
 800443c:	8bbb      	ldrh	r3, [r7, #28]
 800443e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004442:	83bb      	strh	r3, [r7, #28]
 8004444:	8bbb      	ldrh	r3, [r7, #28]
 8004446:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800444a:	83bb      	strh	r3, [r7, #28]
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	441a      	add	r2, r3
 8004456:	8bbb      	ldrh	r3, [r7, #28]
 8004458:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800445c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004460:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004464:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004468:	b29b      	uxth	r3, r3
 800446a:	8013      	strh	r3, [r2, #0]
 800446c:	e1ea      	b.n	8004844 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	b29b      	uxth	r3, r3
 800447c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004480:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004484:	83fb      	strh	r3, [r7, #30]
 8004486:	8bfb      	ldrh	r3, [r7, #30]
 8004488:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800448c:	83fb      	strh	r3, [r7, #30]
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	441a      	add	r2, r3
 8004498:	8bfb      	ldrh	r3, [r7, #30]
 800449a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800449e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	8013      	strh	r3, [r2, #0]
 80044ae:	e1c9      	b.n	8004844 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	78db      	ldrb	r3, [r3, #3]
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d11e      	bne.n	80044f6 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	881b      	ldrh	r3, [r3, #0]
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ce:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	441a      	add	r2, r3
 80044dc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80044e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044e8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80044ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	8013      	strh	r3, [r2, #0]
 80044f4:	e01d      	b.n	8004532 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4413      	add	r3, r2
 8004500:	881b      	ldrh	r3, [r3, #0]
 8004502:	b29b      	uxth	r3, r3
 8004504:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004508:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800450c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	441a      	add	r2, r3
 800451a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800451e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004522:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004526:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800452a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800452e:	b29b      	uxth	r3, r3
 8004530:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800453c:	b29b      	uxth	r3, r3
 800453e:	461a      	mov	r2, r3
 8004540:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004542:	4413      	add	r3, r2
 8004544:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	011a      	lsls	r2, r3, #4
 800454c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800454e:	4413      	add	r3, r2
 8004550:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004554:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	891b      	ldrh	r3, [r3, #8]
 800455a:	085b      	lsrs	r3, r3, #1
 800455c:	b29b      	uxth	r3, r3
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	b29a      	uxth	r2, r3
 8004562:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004564:	801a      	strh	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	657b      	str	r3, [r7, #84]	@ 0x54
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004570:	b29b      	uxth	r3, r3
 8004572:	461a      	mov	r2, r3
 8004574:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004576:	4413      	add	r3, r2
 8004578:	657b      	str	r3, [r7, #84]	@ 0x54
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	011a      	lsls	r2, r3, #4
 8004580:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004582:	4413      	add	r3, r2
 8004584:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004588:	653b      	str	r3, [r7, #80]	@ 0x50
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	895b      	ldrh	r3, [r3, #10]
 800458e:	085b      	lsrs	r3, r3, #1
 8004590:	b29b      	uxth	r3, r3
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	b29a      	uxth	r2, r3
 8004596:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004598:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	785b      	ldrb	r3, [r3, #1]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f040 8093 	bne.w	80046ca <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4413      	add	r3, r2
 80045ae:	881b      	ldrh	r3, [r3, #0]
 80045b0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80045b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80045b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d01b      	beq.n	80045f8 <USB_ActivateEndpoint+0x524>
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4413      	add	r3, r2
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045d6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	441a      	add	r2, r3
 80045e2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80045e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80045f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	881b      	ldrh	r3, [r3, #0]
 8004604:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004606:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800460c:	2b00      	cmp	r3, #0
 800460e:	d01b      	beq.n	8004648 <USB_ActivateEndpoint+0x574>
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	881b      	ldrh	r3, [r3, #0]
 800461c:	b29b      	uxth	r3, r3
 800461e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004626:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	441a      	add	r2, r3
 8004632:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004634:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004638:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800463c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004640:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004644:	b29b      	uxth	r3, r3
 8004646:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	b29b      	uxth	r3, r3
 8004656:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800465a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800465e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004660:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004662:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004666:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004668:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800466a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800466e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	441a      	add	r2, r3
 800467a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800467c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004680:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004684:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004688:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800468c:	b29b      	uxth	r3, r3
 800468e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	b29b      	uxth	r3, r3
 800469e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	441a      	add	r2, r3
 80046b2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80046b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	8013      	strh	r3, [r2, #0]
 80046c8:	e0bc      	b.n	8004844 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80046da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80046de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d01d      	beq.n	8004722 <USB_ActivateEndpoint+0x64e>
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	881b      	ldrh	r3, [r3, #0]
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046fc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	441a      	add	r2, r3
 800470a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800470e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004712:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004716:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800471a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800471e:	b29b      	uxth	r3, r3
 8004720:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4413      	add	r3, r2
 800472c:	881b      	ldrh	r3, [r3, #0]
 800472e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004732:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800473a:	2b00      	cmp	r3, #0
 800473c:	d01d      	beq.n	800477a <USB_ActivateEndpoint+0x6a6>
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	881b      	ldrh	r3, [r3, #0]
 800474a:	b29b      	uxth	r3, r3
 800474c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004750:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004754:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	441a      	add	r2, r3
 8004762:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004766:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800476a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800476e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004772:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004776:	b29b      	uxth	r3, r3
 8004778:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	78db      	ldrb	r3, [r3, #3]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d024      	beq.n	80047cc <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	b29b      	uxth	r3, r3
 8004790:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004794:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004798:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800479c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80047a0:	f083 0320 	eor.w	r3, r3, #32
 80047a4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	441a      	add	r2, r3
 80047b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80047b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	8013      	strh	r3, [r2, #0]
 80047ca:	e01d      	b.n	8004808 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	881b      	ldrh	r3, [r3, #0]
 80047d8:	b29b      	uxth	r3, r3
 80047da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047e2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	441a      	add	r2, r3
 80047f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80047f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004804:	b29b      	uxth	r3, r3
 8004806:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	881b      	ldrh	r3, [r3, #0]
 8004814:	b29b      	uxth	r3, r3
 8004816:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800481a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800481e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	441a      	add	r2, r3
 800482c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004830:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004834:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004838:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800483c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004840:	b29b      	uxth	r3, r3
 8004842:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004844:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004848:	4618      	mov	r0, r3
 800484a:	3774      	adds	r7, #116	@ 0x74
 800484c:	46bd      	mov	sp, r7
 800484e:	bc80      	pop	{r7}
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop

08004854 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004854:	b480      	push	{r7}
 8004856:	b08d      	sub	sp, #52	@ 0x34
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	7b1b      	ldrb	r3, [r3, #12]
 8004862:	2b00      	cmp	r3, #0
 8004864:	f040 808e 	bne.w	8004984 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	785b      	ldrb	r3, [r3, #1]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d044      	beq.n	80048fa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	81bb      	strh	r3, [r7, #12]
 800487e:	89bb      	ldrh	r3, [r7, #12]
 8004880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004884:	2b00      	cmp	r3, #0
 8004886:	d01b      	beq.n	80048c0 <USB_DeactivateEndpoint+0x6c>
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	881b      	ldrh	r3, [r3, #0]
 8004894:	b29b      	uxth	r3, r3
 8004896:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800489a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800489e:	817b      	strh	r3, [r7, #10]
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	441a      	add	r2, r3
 80048aa:	897b      	ldrh	r3, [r7, #10]
 80048ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048b8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80048bc:	b29b      	uxth	r3, r3
 80048be:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	881b      	ldrh	r3, [r3, #0]
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048d6:	813b      	strh	r3, [r7, #8]
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	441a      	add	r2, r3
 80048e2:	893b      	ldrh	r3, [r7, #8]
 80048e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	8013      	strh	r3, [r2, #0]
 80048f8:	e192      	b.n	8004c20 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4413      	add	r3, r2
 8004904:	881b      	ldrh	r3, [r3, #0]
 8004906:	827b      	strh	r3, [r7, #18]
 8004908:	8a7b      	ldrh	r3, [r7, #18]
 800490a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d01b      	beq.n	800494a <USB_DeactivateEndpoint+0xf6>
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	881b      	ldrh	r3, [r3, #0]
 800491e:	b29b      	uxth	r3, r3
 8004920:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004924:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004928:	823b      	strh	r3, [r7, #16]
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	441a      	add	r2, r3
 8004934:	8a3b      	ldrh	r3, [r7, #16]
 8004936:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800493a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800493e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004942:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004946:	b29b      	uxth	r3, r3
 8004948:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	881b      	ldrh	r3, [r3, #0]
 8004956:	b29b      	uxth	r3, r3
 8004958:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800495c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004960:	81fb      	strh	r3, [r7, #14]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	441a      	add	r2, r3
 800496c:	89fb      	ldrh	r3, [r7, #14]
 800496e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004972:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004976:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800497a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800497e:	b29b      	uxth	r3, r3
 8004980:	8013      	strh	r3, [r2, #0]
 8004982:	e14d      	b.n	8004c20 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	785b      	ldrb	r3, [r3, #1]
 8004988:	2b00      	cmp	r3, #0
 800498a:	f040 80a5 	bne.w	8004ad8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4413      	add	r3, r2
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	843b      	strh	r3, [r7, #32]
 800499c:	8c3b      	ldrh	r3, [r7, #32]
 800499e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d01b      	beq.n	80049de <USB_DeactivateEndpoint+0x18a>
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049bc:	83fb      	strh	r3, [r7, #30]
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	441a      	add	r2, r3
 80049c8:	8bfb      	ldrh	r3, [r7, #30]
 80049ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049da:	b29b      	uxth	r3, r3
 80049dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	881b      	ldrh	r3, [r3, #0]
 80049ea:	83bb      	strh	r3, [r7, #28]
 80049ec:	8bbb      	ldrh	r3, [r7, #28]
 80049ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d01b      	beq.n	8004a2e <USB_DeactivateEndpoint+0x1da>
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a0c:	837b      	strh	r3, [r7, #26]
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	441a      	add	r2, r3
 8004a18:	8b7b      	ldrh	r3, [r7, #26]
 8004a1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a26:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	881b      	ldrh	r3, [r3, #0]
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a44:	833b      	strh	r3, [r7, #24]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	441a      	add	r2, r3
 8004a50:	8b3b      	ldrh	r3, [r7, #24]
 8004a52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a5e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a7c:	82fb      	strh	r3, [r7, #22]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	441a      	add	r2, r3
 8004a88:	8afb      	ldrh	r3, [r7, #22]
 8004a8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	881b      	ldrh	r3, [r3, #0]
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ab0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ab4:	82bb      	strh	r3, [r7, #20]
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	441a      	add	r2, r3
 8004ac0:	8abb      	ldrh	r3, [r7, #20]
 8004ac2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ac6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004aca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ace:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	8013      	strh	r3, [r2, #0]
 8004ad6:	e0a3      	b.n	8004c20 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4413      	add	r3, r2
 8004ae2:	881b      	ldrh	r3, [r3, #0]
 8004ae4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004ae6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004ae8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d01b      	beq.n	8004b28 <USB_DeactivateEndpoint+0x2d4>
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b06:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	441a      	add	r2, r3
 8004b12:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004b14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	881b      	ldrh	r3, [r3, #0]
 8004b34:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004b36:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d01b      	beq.n	8004b78 <USB_DeactivateEndpoint+0x324>
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	881b      	ldrh	r3, [r3, #0]
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b56:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	441a      	add	r2, r3
 8004b62:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004b64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b70:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b8e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	441a      	add	r2, r3
 8004b9a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004b9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ba0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ba4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ba8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4413      	add	r3, r2
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bc6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	441a      	add	r2, r3
 8004bd2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004bd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004be0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	881b      	ldrh	r3, [r3, #0]
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bfe:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	441a      	add	r2, r3
 8004c0a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004c0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3734      	adds	r7, #52	@ 0x34
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bc80      	pop	{r7}
 8004c2a:	4770      	bx	lr

08004c2c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b0c2      	sub	sp, #264	@ 0x108
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c3a:	6018      	str	r0, [r3, #0]
 8004c3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c44:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	785b      	ldrb	r3, [r3, #1]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	f040 86b7 	bne.w	80059c6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004c58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	699a      	ldr	r2, [r3, #24]
 8004c64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d908      	bls.n	8004c86 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004c84:	e007      	b.n	8004c96 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004c86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004c96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	7b1b      	ldrb	r3, [r3, #12]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d13a      	bne.n	8004d1c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004ca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004caa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6959      	ldr	r1, [r3, #20]
 8004cb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	88da      	ldrh	r2, [r3, #6]
 8004cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004cc8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004ccc:	6800      	ldr	r0, [r0, #0]
 8004cce:	f001 fc9c 	bl	800660a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004cd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	613b      	str	r3, [r7, #16]
 8004cde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ce2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	461a      	mov	r2, r3
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]
 8004cf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	011a      	lsls	r2, r3, #4
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	4413      	add	r3, r2
 8004d08:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004d0c:	60fb      	str	r3, [r7, #12]
 8004d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	801a      	strh	r2, [r3, #0]
 8004d18:	f000 be1f 	b.w	800595a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004d1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	78db      	ldrb	r3, [r3, #3]
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	f040 8462 	bne.w	80055f2 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004d2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6a1a      	ldr	r2, [r3, #32]
 8004d3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	f240 83df 	bls.w	800550a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004d4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d72:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004d76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	441a      	add	r2, r3
 8004d90:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004d94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d9c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004da0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004da8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6a1a      	ldr	r2, [r3, #32]
 8004db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004db8:	1ad2      	subs	r2, r2, r3
 8004dba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004dc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 81c7 	beq.w	800517c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004dee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004df2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	785b      	ldrb	r3, [r3, #1]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d177      	bne.n	8004efa <USB_EPStartXfer+0x2ce>
 8004e0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	461a      	mov	r2, r3
 8004e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e2a:	4413      	add	r3, r2
 8004e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	011a      	lsls	r2, r3, #4
 8004e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e3e:	4413      	add	r3, r2
 8004e40:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004e44:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e48:	881b      	ldrh	r3, [r3, #0]
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e54:	801a      	strh	r2, [r3, #0]
 8004e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e5a:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e5c:	d921      	bls.n	8004ea2 <USB_EPStartXfer+0x276>
 8004e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e62:	095b      	lsrs	r3, r3, #5
 8004e64:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e6c:	f003 031f 	and.w	r3, r3, #31
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d104      	bne.n	8004e7e <USB_EPStartXfer+0x252>
 8004e74:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e80:	881b      	ldrh	r3, [r3, #0]
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	029b      	lsls	r3, r3, #10
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9e:	801a      	strh	r2, [r3, #0]
 8004ea0:	e050      	b.n	8004f44 <USB_EPStartXfer+0x318>
 8004ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10a      	bne.n	8004ec0 <USB_EPStartXfer+0x294>
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ebc:	801a      	strh	r2, [r3, #0]
 8004ebe:	e041      	b.n	8004f44 <USB_EPStartXfer+0x318>
 8004ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ec4:	085b      	lsrs	r3, r3, #1
 8004ec6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d004      	beq.n	8004ee0 <USB_EPStartXfer+0x2b4>
 8004ed6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004eda:	3301      	adds	r3, #1
 8004edc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee2:	881b      	ldrh	r3, [r3, #0]
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	029b      	lsls	r3, r3, #10
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef6:	801a      	strh	r2, [r3, #0]
 8004ef8:	e024      	b.n	8004f44 <USB_EPStartXfer+0x318>
 8004efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004efe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	785b      	ldrb	r3, [r3, #1]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d11c      	bne.n	8004f44 <USB_EPStartXfer+0x318>
 8004f0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1e:	4413      	add	r3, r2
 8004f20:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	011a      	lsls	r2, r3, #4
 8004f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f32:	4413      	add	r3, r2
 8004f34:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f42:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	895b      	ldrh	r3, [r3, #10]
 8004f50:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6959      	ldr	r1, [r3, #20]
 8004f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004f6a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004f6e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004f72:	6800      	ldr	r0, [r0, #0]
 8004f74:	f001 fb49 	bl	800660a <USB_WritePMA>
            ep->xfer_buff += len;
 8004f78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	695a      	ldr	r2, [r3, #20]
 8004f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f88:	441a      	add	r2, r3
 8004f8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004f96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6a1a      	ldr	r2, [r3, #32]
 8004fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d90f      	bls.n	8004fd2 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004fb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6a1a      	ldr	r2, [r3, #32]
 8004fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fc2:	1ad2      	subs	r2, r2, r3
 8004fc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	621a      	str	r2, [r3, #32]
 8004fd0:	e00e      	b.n	8004ff0 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004fd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8004fe2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fe6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2200      	movs	r2, #0
 8004fee:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ff4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	785b      	ldrb	r3, [r3, #1]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d177      	bne.n	80050f0 <USB_EPStartXfer+0x4c4>
 8005000:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005004:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	61bb      	str	r3, [r7, #24]
 800500c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005010:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800501a:	b29b      	uxth	r3, r3
 800501c:	461a      	mov	r2, r3
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	4413      	add	r3, r2
 8005022:	61bb      	str	r3, [r7, #24]
 8005024:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005028:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	011a      	lsls	r2, r3, #4
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	4413      	add	r3, r2
 8005036:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800503a:	617b      	str	r3, [r7, #20]
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	881b      	ldrh	r3, [r3, #0]
 8005040:	b29b      	uxth	r3, r3
 8005042:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005046:	b29a      	uxth	r2, r3
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	801a      	strh	r2, [r3, #0]
 800504c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005050:	2b3e      	cmp	r3, #62	@ 0x3e
 8005052:	d921      	bls.n	8005098 <USB_EPStartXfer+0x46c>
 8005054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005058:	095b      	lsrs	r3, r3, #5
 800505a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800505e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005062:	f003 031f 	and.w	r3, r3, #31
 8005066:	2b00      	cmp	r3, #0
 8005068:	d104      	bne.n	8005074 <USB_EPStartXfer+0x448>
 800506a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800506e:	3b01      	subs	r3, #1
 8005070:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	b29a      	uxth	r2, r3
 800507a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800507e:	b29b      	uxth	r3, r3
 8005080:	029b      	lsls	r3, r3, #10
 8005082:	b29b      	uxth	r3, r3
 8005084:	4313      	orrs	r3, r2
 8005086:	b29b      	uxth	r3, r3
 8005088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800508c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005090:	b29a      	uxth	r2, r3
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	801a      	strh	r2, [r3, #0]
 8005096:	e056      	b.n	8005146 <USB_EPStartXfer+0x51a>
 8005098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10a      	bne.n	80050b6 <USB_EPStartXfer+0x48a>
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	881b      	ldrh	r3, [r3, #0]
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	801a      	strh	r2, [r3, #0]
 80050b4:	e047      	b.n	8005146 <USB_EPStartXfer+0x51a>
 80050b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ba:	085b      	lsrs	r3, r3, #1
 80050bc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80050c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d004      	beq.n	80050d6 <USB_EPStartXfer+0x4aa>
 80050cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050d0:	3301      	adds	r3, #1
 80050d2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	881b      	ldrh	r3, [r3, #0]
 80050da:	b29a      	uxth	r2, r3
 80050dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	029b      	lsls	r3, r3, #10
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	4313      	orrs	r3, r2
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	801a      	strh	r2, [r3, #0]
 80050ee:	e02a      	b.n	8005146 <USB_EPStartXfer+0x51a>
 80050f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	785b      	ldrb	r3, [r3, #1]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d122      	bne.n	8005146 <USB_EPStartXfer+0x51a>
 8005100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005104:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	623b      	str	r3, [r7, #32]
 800510c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005110:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800511a:	b29b      	uxth	r3, r3
 800511c:	461a      	mov	r2, r3
 800511e:	6a3b      	ldr	r3, [r7, #32]
 8005120:	4413      	add	r3, r2
 8005122:	623b      	str	r3, [r7, #32]
 8005124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005128:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	011a      	lsls	r2, r3, #4
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	4413      	add	r3, r2
 8005136:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800513a:	61fb      	str	r3, [r7, #28]
 800513c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005140:	b29a      	uxth	r2, r3
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800514a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	891b      	ldrh	r3, [r3, #8]
 8005152:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800515a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6959      	ldr	r1, [r3, #20]
 8005162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005166:	b29b      	uxth	r3, r3
 8005168:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800516c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005170:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005174:	6800      	ldr	r0, [r0, #0]
 8005176:	f001 fa48 	bl	800660a <USB_WritePMA>
 800517a:	e3ee      	b.n	800595a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800517c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005180:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	785b      	ldrb	r3, [r3, #1]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d177      	bne.n	800527c <USB_EPStartXfer+0x650>
 800518c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005190:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800519c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	461a      	mov	r2, r3
 80051aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051ac:	4413      	add	r3, r2
 80051ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	011a      	lsls	r2, r3, #4
 80051be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051c0:	4413      	add	r3, r2
 80051c2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80051c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80051c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051ca:	881b      	ldrh	r3, [r3, #0]
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051d6:	801a      	strh	r2, [r3, #0]
 80051d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80051de:	d921      	bls.n	8005224 <USB_EPStartXfer+0x5f8>
 80051e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051e4:	095b      	lsrs	r3, r3, #5
 80051e6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80051ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051ee:	f003 031f 	and.w	r3, r3, #31
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d104      	bne.n	8005200 <USB_EPStartXfer+0x5d4>
 80051f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80051fa:	3b01      	subs	r3, #1
 80051fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005200:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	b29a      	uxth	r2, r3
 8005206:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800520a:	b29b      	uxth	r3, r3
 800520c:	029b      	lsls	r3, r3, #10
 800520e:	b29b      	uxth	r3, r3
 8005210:	4313      	orrs	r3, r2
 8005212:	b29b      	uxth	r3, r3
 8005214:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005218:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800521c:	b29a      	uxth	r2, r3
 800521e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005220:	801a      	strh	r2, [r3, #0]
 8005222:	e056      	b.n	80052d2 <USB_EPStartXfer+0x6a6>
 8005224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10a      	bne.n	8005242 <USB_EPStartXfer+0x616>
 800522c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800522e:	881b      	ldrh	r3, [r3, #0]
 8005230:	b29b      	uxth	r3, r3
 8005232:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005236:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800523a:	b29a      	uxth	r2, r3
 800523c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800523e:	801a      	strh	r2, [r3, #0]
 8005240:	e047      	b.n	80052d2 <USB_EPStartXfer+0x6a6>
 8005242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005246:	085b      	lsrs	r3, r3, #1
 8005248:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800524c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b00      	cmp	r3, #0
 8005256:	d004      	beq.n	8005262 <USB_EPStartXfer+0x636>
 8005258:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800525c:	3301      	adds	r3, #1
 800525e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005262:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	b29a      	uxth	r2, r3
 8005268:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800526c:	b29b      	uxth	r3, r3
 800526e:	029b      	lsls	r3, r3, #10
 8005270:	b29b      	uxth	r3, r3
 8005272:	4313      	orrs	r3, r2
 8005274:	b29a      	uxth	r2, r3
 8005276:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005278:	801a      	strh	r2, [r3, #0]
 800527a:	e02a      	b.n	80052d2 <USB_EPStartXfer+0x6a6>
 800527c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005280:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	785b      	ldrb	r3, [r3, #1]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d122      	bne.n	80052d2 <USB_EPStartXfer+0x6a6>
 800528c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005290:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	653b      	str	r3, [r7, #80]	@ 0x50
 8005298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800529c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	461a      	mov	r2, r3
 80052aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052ac:	4413      	add	r3, r2
 80052ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80052b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	011a      	lsls	r2, r3, #4
 80052be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052c0:	4413      	add	r3, r2
 80052c2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80052c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80052d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	891b      	ldrh	r3, [r3, #8]
 80052de:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6959      	ldr	r1, [r3, #20]
 80052ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80052f8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80052fc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005300:	6800      	ldr	r0, [r0, #0]
 8005302:	f001 f982 	bl	800660a <USB_WritePMA>
            ep->xfer_buff += len;
 8005306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800530a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	695a      	ldr	r2, [r3, #20]
 8005312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005316:	441a      	add	r2, r3
 8005318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800531c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005324:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005328:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	6a1a      	ldr	r2, [r3, #32]
 8005330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005334:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	429a      	cmp	r2, r3
 800533e:	d90f      	bls.n	8005360 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005340:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005344:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6a1a      	ldr	r2, [r3, #32]
 800534c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005350:	1ad2      	subs	r2, r2, r3
 8005352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005356:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	621a      	str	r2, [r3, #32]
 800535e:	e00e      	b.n	800537e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005364:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005370:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005374:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2200      	movs	r2, #0
 800537c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800537e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005382:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	643b      	str	r3, [r7, #64]	@ 0x40
 800538a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800538e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	785b      	ldrb	r3, [r3, #1]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d177      	bne.n	800548a <USB_EPStartXfer+0x85e>
 800539a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800539e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	461a      	mov	r2, r3
 80053b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ba:	4413      	add	r3, r2
 80053bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	011a      	lsls	r2, r3, #4
 80053cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ce:	4413      	add	r3, r2
 80053d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80053d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80053d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	b29b      	uxth	r3, r3
 80053dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e4:	801a      	strh	r2, [r3, #0]
 80053e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80053ec:	d921      	bls.n	8005432 <USB_EPStartXfer+0x806>
 80053ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053f2:	095b      	lsrs	r3, r3, #5
 80053f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80053f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053fc:	f003 031f 	and.w	r3, r3, #31
 8005400:	2b00      	cmp	r3, #0
 8005402:	d104      	bne.n	800540e <USB_EPStartXfer+0x7e2>
 8005404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005408:	3b01      	subs	r3, #1
 800540a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800540e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005410:	881b      	ldrh	r3, [r3, #0]
 8005412:	b29a      	uxth	r2, r3
 8005414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005418:	b29b      	uxth	r3, r3
 800541a:	029b      	lsls	r3, r3, #10
 800541c:	b29b      	uxth	r3, r3
 800541e:	4313      	orrs	r3, r2
 8005420:	b29b      	uxth	r3, r3
 8005422:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005426:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800542a:	b29a      	uxth	r2, r3
 800542c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800542e:	801a      	strh	r2, [r3, #0]
 8005430:	e050      	b.n	80054d4 <USB_EPStartXfer+0x8a8>
 8005432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10a      	bne.n	8005450 <USB_EPStartXfer+0x824>
 800543a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800543c:	881b      	ldrh	r3, [r3, #0]
 800543e:	b29b      	uxth	r3, r3
 8005440:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005444:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005448:	b29a      	uxth	r2, r3
 800544a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800544c:	801a      	strh	r2, [r3, #0]
 800544e:	e041      	b.n	80054d4 <USB_EPStartXfer+0x8a8>
 8005450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005454:	085b      	lsrs	r3, r3, #1
 8005456:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800545a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d004      	beq.n	8005470 <USB_EPStartXfer+0x844>
 8005466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800546a:	3301      	adds	r3, #1
 800546c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005472:	881b      	ldrh	r3, [r3, #0]
 8005474:	b29a      	uxth	r2, r3
 8005476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800547a:	b29b      	uxth	r3, r3
 800547c:	029b      	lsls	r3, r3, #10
 800547e:	b29b      	uxth	r3, r3
 8005480:	4313      	orrs	r3, r2
 8005482:	b29a      	uxth	r2, r3
 8005484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005486:	801a      	strh	r2, [r3, #0]
 8005488:	e024      	b.n	80054d4 <USB_EPStartXfer+0x8a8>
 800548a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800548e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	785b      	ldrb	r3, [r3, #1]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d11c      	bne.n	80054d4 <USB_EPStartXfer+0x8a8>
 800549a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800549e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	461a      	mov	r2, r3
 80054ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054ae:	4413      	add	r3, r2
 80054b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80054b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	011a      	lsls	r2, r3, #4
 80054c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054c2:	4413      	add	r3, r2
 80054c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80054c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054d2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80054d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	895b      	ldrh	r3, [r3, #10]
 80054e0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	6959      	ldr	r1, [r3, #20]
 80054f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80054fa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80054fe:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005502:	6800      	ldr	r0, [r0, #0]
 8005504:	f001 f881 	bl	800660a <USB_WritePMA>
 8005508:	e227      	b.n	800595a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800550a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800550e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800551a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800551e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005528:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4413      	add	r3, r2
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	b29b      	uxth	r3, r3
 8005538:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800553c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005540:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005544:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005548:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005552:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	441a      	add	r2, r3
 800555e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005562:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005566:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800556a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800556e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005572:	b29b      	uxth	r3, r3
 8005574:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800557a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005582:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005586:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005590:	b29b      	uxth	r3, r3
 8005592:	461a      	mov	r2, r3
 8005594:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005596:	4413      	add	r3, r2
 8005598:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800559a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800559e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	011a      	lsls	r2, r3, #4
 80055a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055aa:	4413      	add	r3, r2
 80055ac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80055b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80055b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80055ba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80055bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	891b      	ldrh	r3, [r3, #8]
 80055c8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6959      	ldr	r1, [r3, #20]
 80055d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055dc:	b29b      	uxth	r3, r3
 80055de:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80055e2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80055e6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80055ea:	6800      	ldr	r0, [r0, #0]
 80055ec:	f001 f80d 	bl	800660a <USB_WritePMA>
 80055f0:	e1b3      	b.n	800595a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80055f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6a1a      	ldr	r2, [r3, #32]
 80055fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005602:	1ad2      	subs	r2, r2, r3
 8005604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005608:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005614:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800561e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	881b      	ldrh	r3, [r3, #0]
 800562c:	b29b      	uxth	r3, r3
 800562e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 80c6 	beq.w	80057c4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005638:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800563c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	673b      	str	r3, [r7, #112]	@ 0x70
 8005644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005648:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	785b      	ldrb	r3, [r3, #1]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d177      	bne.n	8005744 <USB_EPStartXfer+0xb18>
 8005654:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005658:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005660:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005664:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800566e:	b29b      	uxth	r3, r3
 8005670:	461a      	mov	r2, r3
 8005672:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005674:	4413      	add	r3, r2
 8005676:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005678:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800567c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	011a      	lsls	r2, r3, #4
 8005686:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005688:	4413      	add	r3, r2
 800568a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800568e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005690:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005692:	881b      	ldrh	r3, [r3, #0]
 8005694:	b29b      	uxth	r3, r3
 8005696:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800569a:	b29a      	uxth	r2, r3
 800569c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800569e:	801a      	strh	r2, [r3, #0]
 80056a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80056a6:	d921      	bls.n	80056ec <USB_EPStartXfer+0xac0>
 80056a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056ac:	095b      	lsrs	r3, r3, #5
 80056ae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80056b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056b6:	f003 031f 	and.w	r3, r3, #31
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d104      	bne.n	80056c8 <USB_EPStartXfer+0xa9c>
 80056be:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80056c2:	3b01      	subs	r3, #1
 80056c4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80056c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056ca:	881b      	ldrh	r3, [r3, #0]
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	029b      	lsls	r3, r3, #10
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	4313      	orrs	r3, r2
 80056da:	b29b      	uxth	r3, r3
 80056dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056e8:	801a      	strh	r2, [r3, #0]
 80056ea:	e050      	b.n	800578e <USB_EPStartXfer+0xb62>
 80056ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10a      	bne.n	800570a <USB_EPStartXfer+0xade>
 80056f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056f6:	881b      	ldrh	r3, [r3, #0]
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005702:	b29a      	uxth	r2, r3
 8005704:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005706:	801a      	strh	r2, [r3, #0]
 8005708:	e041      	b.n	800578e <USB_EPStartXfer+0xb62>
 800570a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800570e:	085b      	lsrs	r3, r3, #1
 8005710:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	2b00      	cmp	r3, #0
 800571e:	d004      	beq.n	800572a <USB_EPStartXfer+0xafe>
 8005720:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005724:	3301      	adds	r3, #1
 8005726:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800572a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800572c:	881b      	ldrh	r3, [r3, #0]
 800572e:	b29a      	uxth	r2, r3
 8005730:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005734:	b29b      	uxth	r3, r3
 8005736:	029b      	lsls	r3, r3, #10
 8005738:	b29b      	uxth	r3, r3
 800573a:	4313      	orrs	r3, r2
 800573c:	b29a      	uxth	r2, r3
 800573e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005740:	801a      	strh	r2, [r3, #0]
 8005742:	e024      	b.n	800578e <USB_EPStartXfer+0xb62>
 8005744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005748:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	785b      	ldrb	r3, [r3, #1]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d11c      	bne.n	800578e <USB_EPStartXfer+0xb62>
 8005754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005758:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005762:	b29b      	uxth	r3, r3
 8005764:	461a      	mov	r2, r3
 8005766:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005768:	4413      	add	r3, r2
 800576a:	673b      	str	r3, [r7, #112]	@ 0x70
 800576c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005770:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	011a      	lsls	r2, r3, #4
 800577a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800577c:	4413      	add	r3, r2
 800577e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005782:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005788:	b29a      	uxth	r2, r3
 800578a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800578c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800578e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005792:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	895b      	ldrh	r3, [r3, #10]
 800579a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800579e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6959      	ldr	r1, [r3, #20]
 80057aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80057b4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80057b8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80057bc:	6800      	ldr	r0, [r0, #0]
 80057be:	f000 ff24 	bl	800660a <USB_WritePMA>
 80057c2:	e0ca      	b.n	800595a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80057c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	785b      	ldrb	r3, [r3, #1]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d177      	bne.n	80058c4 <USB_EPStartXfer+0xc98>
 80057d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80057e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	461a      	mov	r2, r3
 80057f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80057f4:	4413      	add	r3, r2
 80057f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80057f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	011a      	lsls	r2, r3, #4
 8005806:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005808:	4413      	add	r3, r2
 800580a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800580e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005810:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005812:	881b      	ldrh	r3, [r3, #0]
 8005814:	b29b      	uxth	r3, r3
 8005816:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800581a:	b29a      	uxth	r2, r3
 800581c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800581e:	801a      	strh	r2, [r3, #0]
 8005820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005824:	2b3e      	cmp	r3, #62	@ 0x3e
 8005826:	d921      	bls.n	800586c <USB_EPStartXfer+0xc40>
 8005828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800582c:	095b      	lsrs	r3, r3, #5
 800582e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005836:	f003 031f 	and.w	r3, r3, #31
 800583a:	2b00      	cmp	r3, #0
 800583c:	d104      	bne.n	8005848 <USB_EPStartXfer+0xc1c>
 800583e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005842:	3b01      	subs	r3, #1
 8005844:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005848:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	b29a      	uxth	r2, r3
 800584e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005852:	b29b      	uxth	r3, r3
 8005854:	029b      	lsls	r3, r3, #10
 8005856:	b29b      	uxth	r3, r3
 8005858:	4313      	orrs	r3, r2
 800585a:	b29b      	uxth	r3, r3
 800585c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005860:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005864:	b29a      	uxth	r2, r3
 8005866:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005868:	801a      	strh	r2, [r3, #0]
 800586a:	e05c      	b.n	8005926 <USB_EPStartXfer+0xcfa>
 800586c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10a      	bne.n	800588a <USB_EPStartXfer+0xc5e>
 8005874:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005876:	881b      	ldrh	r3, [r3, #0]
 8005878:	b29b      	uxth	r3, r3
 800587a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800587e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005882:	b29a      	uxth	r2, r3
 8005884:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005886:	801a      	strh	r2, [r3, #0]
 8005888:	e04d      	b.n	8005926 <USB_EPStartXfer+0xcfa>
 800588a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800588e:	085b      	lsrs	r3, r3, #1
 8005890:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	d004      	beq.n	80058aa <USB_EPStartXfer+0xc7e>
 80058a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80058a4:	3301      	adds	r3, #1
 80058a6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80058aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058ac:	881b      	ldrh	r3, [r3, #0]
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	029b      	lsls	r3, r3, #10
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	4313      	orrs	r3, r2
 80058bc:	b29a      	uxth	r2, r3
 80058be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058c0:	801a      	strh	r2, [r3, #0]
 80058c2:	e030      	b.n	8005926 <USB_EPStartXfer+0xcfa>
 80058c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	785b      	ldrb	r3, [r3, #1]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d128      	bne.n	8005926 <USB_EPStartXfer+0xcfa>
 80058d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80058e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	461a      	mov	r2, r3
 80058f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058f8:	4413      	add	r3, r2
 80058fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80058fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005902:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	011a      	lsls	r2, r3, #4
 800590c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005910:	4413      	add	r3, r2
 8005912:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005916:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800591a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800591e:	b29a      	uxth	r2, r3
 8005920:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005924:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005926:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800592a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	891b      	ldrh	r3, [r3, #8]
 8005932:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800593a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6959      	ldr	r1, [r3, #20]
 8005942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005946:	b29b      	uxth	r3, r3
 8005948:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800594c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005950:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005954:	6800      	ldr	r0, [r0, #0]
 8005956:	f000 fe58 	bl	800660a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800595a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800595e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005968:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	b29b      	uxth	r3, r3
 8005978:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800597c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005980:	817b      	strh	r3, [r7, #10]
 8005982:	897b      	ldrh	r3, [r7, #10]
 8005984:	f083 0310 	eor.w	r3, r3, #16
 8005988:	817b      	strh	r3, [r7, #10]
 800598a:	897b      	ldrh	r3, [r7, #10]
 800598c:	f083 0320 	eor.w	r3, r3, #32
 8005990:	817b      	strh	r3, [r7, #10]
 8005992:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005996:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	441a      	add	r2, r3
 80059ac:	897b      	ldrh	r3, [r7, #10]
 80059ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059be:	b29b      	uxth	r3, r3
 80059c0:	8013      	strh	r3, [r2, #0]
 80059c2:	f000 bcde 	b.w	8006382 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80059c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	7b1b      	ldrb	r3, [r3, #12]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f040 80bb 	bne.w	8005b4e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80059d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	699a      	ldr	r2, [r3, #24]
 80059e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d917      	bls.n	8005a24 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80059f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005a04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	699a      	ldr	r2, [r3, #24]
 8005a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a14:	1ad2      	subs	r2, r2, r3
 8005a16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	619a      	str	r2, [r3, #24]
 8005a22:	e00e      	b.n	8005a42 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005a24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005a34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005a42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	461a      	mov	r2, r3
 8005a62:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005a66:	4413      	add	r3, r2
 8005a68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	011a      	lsls	r2, r3, #4
 8005a7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005a7e:	4413      	add	r3, r2
 8005a80:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005a88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a8c:	881b      	ldrh	r3, [r3, #0]
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a9a:	801a      	strh	r2, [r3, #0]
 8005a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aa0:	2b3e      	cmp	r3, #62	@ 0x3e
 8005aa2:	d924      	bls.n	8005aee <USB_EPStartXfer+0xec2>
 8005aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aa8:	095b      	lsrs	r3, r3, #5
 8005aaa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ab2:	f003 031f 	and.w	r3, r3, #31
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d104      	bne.n	8005ac4 <USB_EPStartXfer+0xe98>
 8005aba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ac4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ac8:	881b      	ldrh	r3, [r3, #0]
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	029b      	lsls	r3, r3, #10
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ade:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ae8:	801a      	strh	r2, [r3, #0]
 8005aea:	f000 bc10 	b.w	800630e <USB_EPStartXfer+0x16e2>
 8005aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10c      	bne.n	8005b10 <USB_EPStartXfer+0xee4>
 8005af6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b0c:	801a      	strh	r2, [r3, #0]
 8005b0e:	e3fe      	b.n	800630e <USB_EPStartXfer+0x16e2>
 8005b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b14:	085b      	lsrs	r3, r3, #1
 8005b16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d004      	beq.n	8005b30 <USB_EPStartXfer+0xf04>
 8005b26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b34:	881b      	ldrh	r3, [r3, #0]
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	029b      	lsls	r3, r3, #10
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	4313      	orrs	r3, r2
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b4a:	801a      	strh	r2, [r3, #0]
 8005b4c:	e3df      	b.n	800630e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005b4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	78db      	ldrb	r3, [r3, #3]
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	f040 8218 	bne.w	8005f90 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005b60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	785b      	ldrb	r3, [r3, #1]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f040 809d 	bne.w	8005cac <USB_EPStartXfer+0x1080>
 8005b72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	461a      	mov	r2, r3
 8005b92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b96:	4413      	add	r3, r2
 8005b98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ba0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	011a      	lsls	r2, r3, #4
 8005baa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005bae:	4413      	add	r3, r2
 8005bb0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005bb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005bb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005bbc:	881b      	ldrh	r3, [r3, #0]
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005bca:	801a      	strh	r2, [r3, #0]
 8005bcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	2b3e      	cmp	r3, #62	@ 0x3e
 8005bda:	d92b      	bls.n	8005c34 <USB_EPStartXfer+0x1008>
 8005bdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	095b      	lsrs	r3, r3, #5
 8005bea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005bee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	f003 031f 	and.w	r3, r3, #31
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d104      	bne.n	8005c0c <USB_EPStartXfer+0xfe0>
 8005c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c06:	3b01      	subs	r3, #1
 8005c08:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	029b      	lsls	r3, r3, #10
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c30:	801a      	strh	r2, [r3, #0]
 8005c32:	e070      	b.n	8005d16 <USB_EPStartXfer+0x10ea>
 8005c34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d10c      	bne.n	8005c5e <USB_EPStartXfer+0x1032>
 8005c44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c5a:	801a      	strh	r2, [r3, #0]
 8005c5c:	e05b      	b.n	8005d16 <USB_EPStartXfer+0x10ea>
 8005c5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	085b      	lsrs	r3, r3, #1
 8005c6c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d004      	beq.n	8005c8e <USB_EPStartXfer+0x1062>
 8005c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c88:	3301      	adds	r3, #1
 8005c8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c92:	881b      	ldrh	r3, [r3, #0]
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	029b      	lsls	r3, r3, #10
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005ca8:	801a      	strh	r2, [r3, #0]
 8005caa:	e034      	b.n	8005d16 <USB_EPStartXfer+0x10ea>
 8005cac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	785b      	ldrb	r3, [r3, #1]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d12c      	bne.n	8005d16 <USB_EPStartXfer+0x10ea>
 8005cbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005cca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	461a      	mov	r2, r3
 8005cdc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	011a      	lsls	r2, r3, #4
 8005cf4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005cfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005d14:	801a      	strh	r2, [r3, #0]
 8005d16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005d24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	785b      	ldrb	r3, [r3, #1]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f040 809d 	bne.w	8005e70 <USB_EPStartXfer+0x1244>
 8005d36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	461a      	mov	r2, r3
 8005d56:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	011a      	lsls	r2, r3, #4
 8005d6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d72:	4413      	add	r3, r2
 8005d74:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d80:	881b      	ldrh	r3, [r3, #0]
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d8e:	801a      	strh	r2, [r3, #0]
 8005d90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d9e:	d92b      	bls.n	8005df8 <USB_EPStartXfer+0x11cc>
 8005da0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005da4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	095b      	lsrs	r3, r3, #5
 8005dae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005db2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005db6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	f003 031f 	and.w	r3, r3, #31
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d104      	bne.n	8005dd0 <USB_EPStartXfer+0x11a4>
 8005dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005dd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005dd4:	881b      	ldrh	r3, [r3, #0]
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	029b      	lsls	r3, r3, #10
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	4313      	orrs	r3, r2
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005df4:	801a      	strh	r2, [r3, #0]
 8005df6:	e069      	b.n	8005ecc <USB_EPStartXfer+0x12a0>
 8005df8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10c      	bne.n	8005e22 <USB_EPStartXfer+0x11f6>
 8005e08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e0c:	881b      	ldrh	r3, [r3, #0]
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e1e:	801a      	strh	r2, [r3, #0]
 8005e20:	e054      	b.n	8005ecc <USB_EPStartXfer+0x12a0>
 8005e22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	085b      	lsrs	r3, r3, #1
 8005e30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	f003 0301 	and.w	r3, r3, #1
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d004      	beq.n	8005e52 <USB_EPStartXfer+0x1226>
 8005e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e52:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e56:	881b      	ldrh	r3, [r3, #0]
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	029b      	lsls	r3, r3, #10
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	4313      	orrs	r3, r2
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e6c:	801a      	strh	r2, [r3, #0]
 8005e6e:	e02d      	b.n	8005ecc <USB_EPStartXfer+0x12a0>
 8005e70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	785b      	ldrb	r3, [r3, #1]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d125      	bne.n	8005ecc <USB_EPStartXfer+0x12a0>
 8005e80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	461a      	mov	r2, r3
 8005e92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005e96:	4413      	add	r3, r2
 8005e98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005e9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ea0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	011a      	lsls	r2, r3, #4
 8005eaa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005eae:	4413      	add	r3, r2
 8005eb0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005eb4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005eb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ebc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005eca:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005ecc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ed0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	69db      	ldr	r3, [r3, #28]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 8218 	beq.w	800630e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005ede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ee2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	4413      	add	r3, r2
 8005ef8:	881b      	ldrh	r3, [r3, #0]
 8005efa:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005efe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005f02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d005      	beq.n	8005f16 <USB_EPStartXfer+0x12ea>
 8005f0a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10d      	bne.n	8005f32 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005f16:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005f1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f040 81f5 	bne.w	800630e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005f24:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f040 81ee 	bne.w	800630e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	881b      	ldrh	r3, [r3, #0]
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f58:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005f5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	441a      	add	r2, r3
 8005f76:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005f7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f86:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	8013      	strh	r3, [r2, #0]
 8005f8e:	e1be      	b.n	800630e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005f90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	78db      	ldrb	r3, [r3, #3]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	f040 81b4 	bne.w	800630a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	699a      	ldr	r2, [r3, #24]
 8005fae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d917      	bls.n	8005fee <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005fbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8005fce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	699a      	ldr	r2, [r3, #24]
 8005fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fde:	1ad2      	subs	r2, r2, r3
 8005fe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fe4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	619a      	str	r2, [r3, #24]
 8005fec:	e00e      	b.n	800600c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005fee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8005ffe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006002:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2200      	movs	r2, #0
 800600a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800600c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006010:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	785b      	ldrb	r3, [r3, #1]
 8006018:	2b00      	cmp	r3, #0
 800601a:	f040 8085 	bne.w	8006128 <USB_EPStartXfer+0x14fc>
 800601e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006022:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800602c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006030:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800603a:	b29b      	uxth	r3, r3
 800603c:	461a      	mov	r2, r3
 800603e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006042:	4413      	add	r3, r2
 8006044:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006048:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800604c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	011a      	lsls	r2, r3, #4
 8006056:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800605a:	4413      	add	r3, r2
 800605c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006060:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006064:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	b29b      	uxth	r3, r3
 800606c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006070:	b29a      	uxth	r2, r3
 8006072:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006076:	801a      	strh	r2, [r3, #0]
 8006078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800607c:	2b3e      	cmp	r3, #62	@ 0x3e
 800607e:	d923      	bls.n	80060c8 <USB_EPStartXfer+0x149c>
 8006080:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006084:	095b      	lsrs	r3, r3, #5
 8006086:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800608a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800608e:	f003 031f 	and.w	r3, r3, #31
 8006092:	2b00      	cmp	r3, #0
 8006094:	d104      	bne.n	80060a0 <USB_EPStartXfer+0x1474>
 8006096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800609a:	3b01      	subs	r3, #1
 800609c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80060a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	029b      	lsls	r3, r3, #10
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	4313      	orrs	r3, r2
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060be:	b29a      	uxth	r2, r3
 80060c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80060c4:	801a      	strh	r2, [r3, #0]
 80060c6:	e060      	b.n	800618a <USB_EPStartXfer+0x155e>
 80060c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10c      	bne.n	80060ea <USB_EPStartXfer+0x14be>
 80060d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80060d4:	881b      	ldrh	r3, [r3, #0]
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80060e6:	801a      	strh	r2, [r3, #0]
 80060e8:	e04f      	b.n	800618a <USB_EPStartXfer+0x155e>
 80060ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ee:	085b      	lsrs	r3, r3, #1
 80060f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80060f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d004      	beq.n	800610a <USB_EPStartXfer+0x14de>
 8006100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006104:	3301      	adds	r3, #1
 8006106:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800610a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800610e:	881b      	ldrh	r3, [r3, #0]
 8006110:	b29a      	uxth	r2, r3
 8006112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006116:	b29b      	uxth	r3, r3
 8006118:	029b      	lsls	r3, r3, #10
 800611a:	b29b      	uxth	r3, r3
 800611c:	4313      	orrs	r3, r2
 800611e:	b29a      	uxth	r2, r3
 8006120:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006124:	801a      	strh	r2, [r3, #0]
 8006126:	e030      	b.n	800618a <USB_EPStartXfer+0x155e>
 8006128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800612c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	785b      	ldrb	r3, [r3, #1]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d128      	bne.n	800618a <USB_EPStartXfer+0x155e>
 8006138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800613c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800614a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006154:	b29b      	uxth	r3, r3
 8006156:	461a      	mov	r2, r3
 8006158:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800615c:	4413      	add	r3, r2
 800615e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006166:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	011a      	lsls	r2, r3, #4
 8006170:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006174:	4413      	add	r3, r2
 8006176:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800617a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800617e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006182:	b29a      	uxth	r2, r3
 8006184:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006188:	801a      	strh	r2, [r3, #0]
 800618a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800618e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800619c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	785b      	ldrb	r3, [r3, #1]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f040 8085 	bne.w	80062b4 <USB_EPStartXfer+0x1688>
 80061aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80061b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	461a      	mov	r2, r3
 80061ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80061ce:	4413      	add	r3, r2
 80061d0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80061d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	011a      	lsls	r2, r3, #4
 80061e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80061e6:	4413      	add	r3, r2
 80061e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80061ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80061f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061f4:	881b      	ldrh	r3, [r3, #0]
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006202:	801a      	strh	r2, [r3, #0]
 8006204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006208:	2b3e      	cmp	r3, #62	@ 0x3e
 800620a:	d923      	bls.n	8006254 <USB_EPStartXfer+0x1628>
 800620c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006210:	095b      	lsrs	r3, r3, #5
 8006212:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800621a:	f003 031f 	and.w	r3, r3, #31
 800621e:	2b00      	cmp	r3, #0
 8006220:	d104      	bne.n	800622c <USB_EPStartXfer+0x1600>
 8006222:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006226:	3b01      	subs	r3, #1
 8006228:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800622c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	b29a      	uxth	r2, r3
 8006234:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006238:	b29b      	uxth	r3, r3
 800623a:	029b      	lsls	r3, r3, #10
 800623c:	b29b      	uxth	r3, r3
 800623e:	4313      	orrs	r3, r2
 8006240:	b29b      	uxth	r3, r3
 8006242:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006246:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800624a:	b29a      	uxth	r2, r3
 800624c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006250:	801a      	strh	r2, [r3, #0]
 8006252:	e05c      	b.n	800630e <USB_EPStartXfer+0x16e2>
 8006254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10c      	bne.n	8006276 <USB_EPStartXfer+0x164a>
 800625c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006260:	881b      	ldrh	r3, [r3, #0]
 8006262:	b29b      	uxth	r3, r3
 8006264:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006268:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800626c:	b29a      	uxth	r2, r3
 800626e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006272:	801a      	strh	r2, [r3, #0]
 8006274:	e04b      	b.n	800630e <USB_EPStartXfer+0x16e2>
 8006276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800627a:	085b      	lsrs	r3, r3, #1
 800627c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	2b00      	cmp	r3, #0
 800628a:	d004      	beq.n	8006296 <USB_EPStartXfer+0x166a>
 800628c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006290:	3301      	adds	r3, #1
 8006292:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006296:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800629a:	881b      	ldrh	r3, [r3, #0]
 800629c:	b29a      	uxth	r2, r3
 800629e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	029b      	lsls	r3, r3, #10
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	4313      	orrs	r3, r2
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80062b0:	801a      	strh	r2, [r3, #0]
 80062b2:	e02c      	b.n	800630e <USB_EPStartXfer+0x16e2>
 80062b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	785b      	ldrb	r3, [r3, #1]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d124      	bne.n	800630e <USB_EPStartXfer+0x16e2>
 80062c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	461a      	mov	r2, r3
 80062d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80062da:	4413      	add	r3, r2
 80062dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	011a      	lsls	r2, r3, #4
 80062ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80062f2:	4413      	add	r3, r2
 80062f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80062f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006300:	b29a      	uxth	r2, r3
 8006302:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006306:	801a      	strh	r2, [r3, #0]
 8006308:	e001      	b.n	800630e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e03a      	b.n	8006384 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800630e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006312:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800631c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	881b      	ldrh	r3, [r3, #0]
 800632a:	b29b      	uxth	r3, r3
 800632c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006330:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006334:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006338:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800633c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006340:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006344:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006348:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800634c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006354:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800635e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	441a      	add	r2, r3
 800636a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800636e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006372:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006376:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800637a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800637e:	b29b      	uxth	r3, r3
 8006380:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800638e:	b480      	push	{r7}
 8006390:	b085      	sub	sp, #20
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
 8006396:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	785b      	ldrb	r3, [r3, #1]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d020      	beq.n	80063e2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4413      	add	r3, r2
 80063aa:	881b      	ldrh	r3, [r3, #0]
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063b6:	81bb      	strh	r3, [r7, #12]
 80063b8:	89bb      	ldrh	r3, [r7, #12]
 80063ba:	f083 0310 	eor.w	r3, r3, #16
 80063be:	81bb      	strh	r3, [r7, #12]
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	441a      	add	r2, r3
 80063ca:	89bb      	ldrh	r3, [r7, #12]
 80063cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063dc:	b29b      	uxth	r3, r3
 80063de:	8013      	strh	r3, [r2, #0]
 80063e0:	e01f      	b.n	8006422 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063f8:	81fb      	strh	r3, [r7, #14]
 80063fa:	89fb      	ldrh	r3, [r7, #14]
 80063fc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006400:	81fb      	strh	r3, [r7, #14]
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	441a      	add	r2, r3
 800640c:	89fb      	ldrh	r3, [r7, #14]
 800640e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006412:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006416:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800641a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800641e:	b29b      	uxth	r3, r3
 8006420:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3714      	adds	r7, #20
 8006428:	46bd      	mov	sp, r7
 800642a:	bc80      	pop	{r7}
 800642c:	4770      	bx	lr

0800642e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800642e:	b480      	push	{r7}
 8006430:	b087      	sub	sp, #28
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
 8006436:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	7b1b      	ldrb	r3, [r3, #12]
 800643c:	2b00      	cmp	r3, #0
 800643e:	f040 809d 	bne.w	800657c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	785b      	ldrb	r3, [r3, #1]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d04c      	beq.n	80064e4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	4413      	add	r3, r2
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	823b      	strh	r3, [r7, #16]
 8006458:	8a3b      	ldrh	r3, [r7, #16]
 800645a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800645e:	2b00      	cmp	r3, #0
 8006460:	d01b      	beq.n	800649a <USB_EPClearStall+0x6c>
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4413      	add	r3, r2
 800646c:	881b      	ldrh	r3, [r3, #0]
 800646e:	b29b      	uxth	r3, r3
 8006470:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006474:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006478:	81fb      	strh	r3, [r7, #14]
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	441a      	add	r2, r3
 8006484:	89fb      	ldrh	r3, [r7, #14]
 8006486:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800648a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800648e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006492:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006496:	b29b      	uxth	r3, r3
 8006498:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	78db      	ldrb	r3, [r3, #3]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d06c      	beq.n	800657c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064b8:	81bb      	strh	r3, [r7, #12]
 80064ba:	89bb      	ldrh	r3, [r7, #12]
 80064bc:	f083 0320 	eor.w	r3, r3, #32
 80064c0:	81bb      	strh	r3, [r7, #12]
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	441a      	add	r2, r3
 80064cc:	89bb      	ldrh	r3, [r7, #12]
 80064ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064de:	b29b      	uxth	r3, r3
 80064e0:	8013      	strh	r3, [r2, #0]
 80064e2:	e04b      	b.n	800657c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	881b      	ldrh	r3, [r3, #0]
 80064f0:	82fb      	strh	r3, [r7, #22]
 80064f2:	8afb      	ldrh	r3, [r7, #22]
 80064f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d01b      	beq.n	8006534 <USB_EPClearStall+0x106>
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4413      	add	r3, r2
 8006506:	881b      	ldrh	r3, [r3, #0]
 8006508:	b29b      	uxth	r3, r3
 800650a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800650e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006512:	82bb      	strh	r3, [r7, #20]
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	441a      	add	r2, r3
 800651e:	8abb      	ldrh	r3, [r7, #20]
 8006520:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006524:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006528:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800652c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006530:	b29b      	uxth	r3, r3
 8006532:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	4413      	add	r3, r2
 800653e:	881b      	ldrh	r3, [r3, #0]
 8006540:	b29b      	uxth	r3, r3
 8006542:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006546:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800654a:	827b      	strh	r3, [r7, #18]
 800654c:	8a7b      	ldrh	r3, [r7, #18]
 800654e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006552:	827b      	strh	r3, [r7, #18]
 8006554:	8a7b      	ldrh	r3, [r7, #18]
 8006556:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800655a:	827b      	strh	r3, [r7, #18]
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	441a      	add	r2, r3
 8006566:	8a7b      	ldrh	r3, [r7, #18]
 8006568:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800656c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006570:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006574:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006578:	b29b      	uxth	r3, r3
 800657a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	371c      	adds	r7, #28
 8006582:	46bd      	mov	sp, r7
 8006584:	bc80      	pop	{r7}
 8006586:	4770      	bx	lr

08006588 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	460b      	mov	r3, r1
 8006592:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006594:	78fb      	ldrb	r3, [r7, #3]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d103      	bne.n	80065a2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2280      	movs	r2, #128	@ 0x80
 800659e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bc80      	pop	{r7}
 80065ac:	4770      	bx	lr

080065ae <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b083      	sub	sp, #12
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	bc80      	pop	{r7}
 80065c0:	4770      	bx	lr

080065c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80065c2:	b480      	push	{r7}
 80065c4:	b083      	sub	sp, #12
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bc80      	pop	{r7}
 80065d4:	4770      	bx	lr

080065d6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80065d6:	b480      	push	{r7}
 80065d8:	b085      	sub	sp, #20
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80065e8:	68fb      	ldr	r3, [r7, #12]
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3714      	adds	r7, #20
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bc80      	pop	{r7}
 80065f2:	4770      	bx	lr

080065f4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	bc80      	pop	{r7}
 8006608:	4770      	bx	lr

0800660a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800660a:	b480      	push	{r7}
 800660c:	b08b      	sub	sp, #44	@ 0x2c
 800660e:	af00      	add	r7, sp, #0
 8006610:	60f8      	str	r0, [r7, #12]
 8006612:	60b9      	str	r1, [r7, #8]
 8006614:	4611      	mov	r1, r2
 8006616:	461a      	mov	r2, r3
 8006618:	460b      	mov	r3, r1
 800661a:	80fb      	strh	r3, [r7, #6]
 800661c:	4613      	mov	r3, r2
 800661e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006620:	88bb      	ldrh	r3, [r7, #4]
 8006622:	3301      	adds	r3, #1
 8006624:	085b      	lsrs	r3, r3, #1
 8006626:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006630:	88fb      	ldrh	r3, [r7, #6]
 8006632:	005a      	lsls	r2, r3, #1
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	4413      	add	r3, r2
 8006638:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800663c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	627b      	str	r3, [r7, #36]	@ 0x24
 8006642:	e01f      	b.n	8006684 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	3301      	adds	r3, #1
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	b21b      	sxth	r3, r3
 8006652:	021b      	lsls	r3, r3, #8
 8006654:	b21a      	sxth	r2, r3
 8006656:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800665a:	4313      	orrs	r3, r2
 800665c:	b21b      	sxth	r3, r3
 800665e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006660:	6a3b      	ldr	r3, [r7, #32]
 8006662:	8a7a      	ldrh	r2, [r7, #18]
 8006664:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	3302      	adds	r3, #2
 800666a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800666c:	6a3b      	ldr	r3, [r7, #32]
 800666e:	3302      	adds	r3, #2
 8006670:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	3301      	adds	r3, #1
 8006676:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	3301      	adds	r3, #1
 800667c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800667e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006680:	3b01      	subs	r3, #1
 8006682:	627b      	str	r3, [r7, #36]	@ 0x24
 8006684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1dc      	bne.n	8006644 <USB_WritePMA+0x3a>
  }
}
 800668a:	bf00      	nop
 800668c:	bf00      	nop
 800668e:	372c      	adds	r7, #44	@ 0x2c
 8006690:	46bd      	mov	sp, r7
 8006692:	bc80      	pop	{r7}
 8006694:	4770      	bx	lr

08006696 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006696:	b480      	push	{r7}
 8006698:	b08b      	sub	sp, #44	@ 0x2c
 800669a:	af00      	add	r7, sp, #0
 800669c:	60f8      	str	r0, [r7, #12]
 800669e:	60b9      	str	r1, [r7, #8]
 80066a0:	4611      	mov	r1, r2
 80066a2:	461a      	mov	r2, r3
 80066a4:	460b      	mov	r3, r1
 80066a6:	80fb      	strh	r3, [r7, #6]
 80066a8:	4613      	mov	r3, r2
 80066aa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80066ac:	88bb      	ldrh	r3, [r7, #4]
 80066ae:	085b      	lsrs	r3, r3, #1
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80066bc:	88fb      	ldrh	r3, [r7, #6]
 80066be:	005a      	lsls	r2, r3, #1
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	4413      	add	r3, r2
 80066c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80066c8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80066ce:	e01b      	b.n	8006708 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80066d0:	6a3b      	ldr	r3, [r7, #32]
 80066d2:	881b      	ldrh	r3, [r3, #0]
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	3302      	adds	r3, #2
 80066dc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	b2da      	uxtb	r2, r3
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	3301      	adds	r3, #1
 80066ea:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	0a1b      	lsrs	r3, r3, #8
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	3301      	adds	r3, #1
 80066fa:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	3302      	adds	r3, #2
 8006700:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006704:	3b01      	subs	r3, #1
 8006706:	627b      	str	r3, [r7, #36]	@ 0x24
 8006708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1e0      	bne.n	80066d0 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800670e:	88bb      	ldrh	r3, [r7, #4]
 8006710:	f003 0301 	and.w	r3, r3, #1
 8006714:	b29b      	uxth	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d007      	beq.n	800672a <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800671a:	6a3b      	ldr	r3, [r7, #32]
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	b29b      	uxth	r3, r3
 8006720:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	b2da      	uxtb	r2, r3
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	701a      	strb	r2, [r3, #0]
  }
}
 800672a:	bf00      	nop
 800672c:	372c      	adds	r7, #44	@ 0x2c
 800672e:	46bd      	mov	sp, r7
 8006730:	bc80      	pop	{r7}
 8006732:	4770      	bx	lr

08006734 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	460b      	mov	r3, r1
 800673e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006740:	2300      	movs	r3, #0
 8006742:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	7c1b      	ldrb	r3, [r3, #16]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d115      	bne.n	8006778 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800674c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006750:	2202      	movs	r2, #2
 8006752:	2181      	movs	r1, #129	@ 0x81
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f001 fe2c 	bl	80083b2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006760:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006764:	2202      	movs	r2, #2
 8006766:	2101      	movs	r1, #1
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f001 fe22 	bl	80083b2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8006776:	e012      	b.n	800679e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006778:	2340      	movs	r3, #64	@ 0x40
 800677a:	2202      	movs	r2, #2
 800677c:	2181      	movs	r1, #129	@ 0x81
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f001 fe17 	bl	80083b2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800678a:	2340      	movs	r3, #64	@ 0x40
 800678c:	2202      	movs	r2, #2
 800678e:	2101      	movs	r1, #1
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f001 fe0e 	bl	80083b2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800679e:	2308      	movs	r3, #8
 80067a0:	2203      	movs	r2, #3
 80067a2:	2182      	movs	r1, #130	@ 0x82
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f001 fe04 	bl	80083b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2201      	movs	r2, #1
 80067ae:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80067b0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80067b4:	f001 ff24 	bl	8008600 <USBD_static_malloc>
 80067b8:	4602      	mov	r2, r0
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d102      	bne.n	80067d0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80067ca:	2301      	movs	r3, #1
 80067cc:	73fb      	strb	r3, [r7, #15]
 80067ce:	e026      	b.n	800681e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067d6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	7c1b      	ldrb	r3, [r3, #16]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d109      	bne.n	800680e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006800:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006804:	2101      	movs	r1, #1
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f001 fec3 	bl	8008592 <USBD_LL_PrepareReceive>
 800680c:	e007      	b.n	800681e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006814:	2340      	movs	r3, #64	@ 0x40
 8006816:	2101      	movs	r1, #1
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f001 feba 	bl	8008592 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800681e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	460b      	mov	r3, r1
 8006832:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006834:	2300      	movs	r3, #0
 8006836:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006838:	2181      	movs	r1, #129	@ 0x81
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f001 fddf 	bl	80083fe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006846:	2101      	movs	r1, #1
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f001 fdd8 	bl	80083fe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006856:	2182      	movs	r1, #130	@ 0x82
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f001 fdd0 	bl	80083fe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00e      	beq.n	800688c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800687e:	4618      	mov	r0, r3
 8006880:	f001 feca 	bl	8008618 <USBD_static_free>
    pdev->pClassData = NULL;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800688c:	7bfb      	ldrb	r3, [r7, #15]
}
 800688e:	4618      	mov	r0, r3
 8006890:	3710      	adds	r7, #16
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b086      	sub	sp, #24
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068a6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80068a8:	2300      	movs	r3, #0
 80068aa:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80068ac:	2300      	movs	r3, #0
 80068ae:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80068b0:	2300      	movs	r3, #0
 80068b2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d039      	beq.n	8006934 <USBD_CDC_Setup+0x9e>
 80068c0:	2b20      	cmp	r3, #32
 80068c2:	d17f      	bne.n	80069c4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	88db      	ldrh	r3, [r3, #6]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d029      	beq.n	8006920 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	b25b      	sxtb	r3, r3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	da11      	bge.n	80068fa <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	683a      	ldr	r2, [r7, #0]
 80068e0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80068e2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068e4:	683a      	ldr	r2, [r7, #0]
 80068e6:	88d2      	ldrh	r2, [r2, #6]
 80068e8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80068ea:	6939      	ldr	r1, [r7, #16]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	88db      	ldrh	r3, [r3, #6]
 80068f0:	461a      	mov	r2, r3
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f001 f9d6 	bl	8007ca4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80068f8:	e06b      	b.n	80069d2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	785a      	ldrb	r2, [r3, #1]
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	88db      	ldrh	r3, [r3, #6]
 8006908:	b2da      	uxtb	r2, r3
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006910:	6939      	ldr	r1, [r7, #16]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	88db      	ldrh	r3, [r3, #6]
 8006916:	461a      	mov	r2, r3
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f001 f9f1 	bl	8007d00 <USBD_CtlPrepareRx>
      break;
 800691e:	e058      	b.n	80069d2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	683a      	ldr	r2, [r7, #0]
 800692a:	7850      	ldrb	r0, [r2, #1]
 800692c:	2200      	movs	r2, #0
 800692e:	6839      	ldr	r1, [r7, #0]
 8006930:	4798      	blx	r3
      break;
 8006932:	e04e      	b.n	80069d2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	785b      	ldrb	r3, [r3, #1]
 8006938:	2b0b      	cmp	r3, #11
 800693a:	d02e      	beq.n	800699a <USBD_CDC_Setup+0x104>
 800693c:	2b0b      	cmp	r3, #11
 800693e:	dc38      	bgt.n	80069b2 <USBD_CDC_Setup+0x11c>
 8006940:	2b00      	cmp	r3, #0
 8006942:	d002      	beq.n	800694a <USBD_CDC_Setup+0xb4>
 8006944:	2b0a      	cmp	r3, #10
 8006946:	d014      	beq.n	8006972 <USBD_CDC_Setup+0xdc>
 8006948:	e033      	b.n	80069b2 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006950:	2b03      	cmp	r3, #3
 8006952:	d107      	bne.n	8006964 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006954:	f107 030c 	add.w	r3, r7, #12
 8006958:	2202      	movs	r2, #2
 800695a:	4619      	mov	r1, r3
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f001 f9a1 	bl	8007ca4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006962:	e02e      	b.n	80069c2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006964:	6839      	ldr	r1, [r7, #0]
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f001 f932 	bl	8007bd0 <USBD_CtlError>
            ret = USBD_FAIL;
 800696c:	2302      	movs	r3, #2
 800696e:	75fb      	strb	r3, [r7, #23]
          break;
 8006970:	e027      	b.n	80069c2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006978:	2b03      	cmp	r3, #3
 800697a:	d107      	bne.n	800698c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800697c:	f107 030f 	add.w	r3, r7, #15
 8006980:	2201      	movs	r2, #1
 8006982:	4619      	mov	r1, r3
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f001 f98d 	bl	8007ca4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800698a:	e01a      	b.n	80069c2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800698c:	6839      	ldr	r1, [r7, #0]
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f001 f91e 	bl	8007bd0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006994:	2302      	movs	r3, #2
 8006996:	75fb      	strb	r3, [r7, #23]
          break;
 8006998:	e013      	b.n	80069c2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069a0:	2b03      	cmp	r3, #3
 80069a2:	d00d      	beq.n	80069c0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80069a4:	6839      	ldr	r1, [r7, #0]
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f001 f912 	bl	8007bd0 <USBD_CtlError>
            ret = USBD_FAIL;
 80069ac:	2302      	movs	r3, #2
 80069ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80069b0:	e006      	b.n	80069c0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80069b2:	6839      	ldr	r1, [r7, #0]
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f001 f90b 	bl	8007bd0 <USBD_CtlError>
          ret = USBD_FAIL;
 80069ba:	2302      	movs	r3, #2
 80069bc:	75fb      	strb	r3, [r7, #23]
          break;
 80069be:	e000      	b.n	80069c2 <USBD_CDC_Setup+0x12c>
          break;
 80069c0:	bf00      	nop
      }
      break;
 80069c2:	e006      	b.n	80069d2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80069c4:	6839      	ldr	r1, [r7, #0]
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f001 f902 	bl	8007bd0 <USBD_CtlError>
      ret = USBD_FAIL;
 80069cc:	2302      	movs	r3, #2
 80069ce:	75fb      	strb	r3, [r7, #23]
      break;
 80069d0:	bf00      	nop
  }

  return ret;
 80069d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3718      	adds	r7, #24
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	460b      	mov	r3, r1
 80069e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069ee:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80069f6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d03a      	beq.n	8006a78 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006a02:	78fa      	ldrb	r2, [r7, #3]
 8006a04:	6879      	ldr	r1, [r7, #4]
 8006a06:	4613      	mov	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	440b      	add	r3, r1
 8006a10:	331c      	adds	r3, #28
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d029      	beq.n	8006a6c <USBD_CDC_DataIn+0x90>
 8006a18:	78fa      	ldrb	r2, [r7, #3]
 8006a1a:	6879      	ldr	r1, [r7, #4]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	4413      	add	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	440b      	add	r3, r1
 8006a26:	331c      	adds	r3, #28
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	78f9      	ldrb	r1, [r7, #3]
 8006a2c:	68b8      	ldr	r0, [r7, #8]
 8006a2e:	460b      	mov	r3, r1
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	440b      	add	r3, r1
 8006a34:	00db      	lsls	r3, r3, #3
 8006a36:	4403      	add	r3, r0
 8006a38:	3320      	adds	r3, #32
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006a40:	fb01 f303 	mul.w	r3, r1, r3
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d110      	bne.n	8006a6c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006a4a:	78fa      	ldrb	r2, [r7, #3]
 8006a4c:	6879      	ldr	r1, [r7, #4]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	440b      	add	r3, r1
 8006a58:	331c      	adds	r3, #28
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006a5e:	78f9      	ldrb	r1, [r7, #3]
 8006a60:	2300      	movs	r3, #0
 8006a62:	2200      	movs	r2, #0
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f001 fd71 	bl	800854c <USBD_LL_Transmit>
 8006a6a:	e003      	b.n	8006a74 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8006a74:	2300      	movs	r3, #0
 8006a76:	e000      	b.n	8006a7a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006a78:	2302      	movs	r3, #2
  }
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b084      	sub	sp, #16
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a94:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006a96:	78fb      	ldrb	r3, [r7, #3]
 8006a98:	4619      	mov	r1, r3
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f001 fd9c 	bl	80085d8 <USBD_LL_GetRxDataSize>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00d      	beq.n	8006ace <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006ac6:	4611      	mov	r1, r2
 8006ac8:	4798      	blx	r3

    return USBD_OK;
 8006aca:	2300      	movs	r3, #0
 8006acc:	e000      	b.n	8006ad0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006ace:	2302      	movs	r3, #2
  }
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ae6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d014      	beq.n	8006b1c <USBD_CDC_EP0_RxReady+0x44>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006af8:	2bff      	cmp	r3, #255	@ 0xff
 8006afa:	d00f      	beq.n	8006b1c <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006b0a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b12:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	22ff      	movs	r2, #255	@ 0xff
 8006b18:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
	...

08006b28 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2243      	movs	r2, #67	@ 0x43
 8006b34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006b36:	4b03      	ldr	r3, [pc, #12]	@ (8006b44 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bc80      	pop	{r7}
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	20000948 	.word	0x20000948

08006b48 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2243      	movs	r2, #67	@ 0x43
 8006b54:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006b56:	4b03      	ldr	r3, [pc, #12]	@ (8006b64 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bc80      	pop	{r7}
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	20000904 	.word	0x20000904

08006b68 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2243      	movs	r2, #67	@ 0x43
 8006b74:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006b76:	4b03      	ldr	r3, [pc, #12]	@ (8006b84 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bc80      	pop	{r7}
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	2000098c 	.word	0x2000098c

08006b88 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	220a      	movs	r2, #10
 8006b94:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006b96:	4b03      	ldr	r3, [pc, #12]	@ (8006ba4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bc80      	pop	{r7}
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	200008c0 	.word	0x200008c0

08006ba8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006bb2:	2302      	movs	r3, #2
 8006bb4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d005      	beq.n	8006bc8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	683a      	ldr	r2, [r7, #0]
 8006bc0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3714      	adds	r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bc80      	pop	{r7}
 8006bd2:	4770      	bx	lr

08006bd4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b087      	sub	sp, #28
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	4613      	mov	r3, r2
 8006be0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006be8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006bf2:	88fa      	ldrh	r2, [r7, #6]
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	371c      	adds	r7, #28
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bc80      	pop	{r7}
 8006c04:	4770      	bx	lr

08006c06 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b085      	sub	sp, #20
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
 8006c0e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c16:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	683a      	ldr	r2, [r7, #0]
 8006c1c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bc80      	pop	{r7}
 8006c2a:	4770      	bx	lr

08006c2c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c3a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d017      	beq.n	8006c76 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	7c1b      	ldrb	r3, [r3, #16]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d109      	bne.n	8006c62 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006c54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006c58:	2101      	movs	r1, #1
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f001 fc99 	bl	8008592 <USBD_LL_PrepareReceive>
 8006c60:	e007      	b.n	8006c72 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006c68:	2340      	movs	r3, #64	@ 0x40
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f001 fc90 	bl	8008592 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006c72:	2300      	movs	r3, #0
 8006c74:	e000      	b.n	8006c78 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006c76:	2302      	movs	r3, #2
  }
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d101      	bne.n	8006c98 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006c94:	2302      	movs	r3, #2
 8006c96:	e01a      	b.n	8006cce <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d003      	beq.n	8006caa <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d003      	beq.n	8006cb8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	79fa      	ldrb	r2, [r7, #7]
 8006cc4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f001 fafe 	bl	80082c8 <USBD_LL_Init>

  return USBD_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b085      	sub	sp, #20
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d006      	beq.n	8006cf8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	683a      	ldr	r2, [r7, #0]
 8006cee:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	73fb      	strb	r3, [r7, #15]
 8006cf6:	e001      	b.n	8006cfc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bc80      	pop	{r7}
 8006d06:	4770      	bx	lr

08006d08 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f001 fb33 	bl	800837c <USBD_LL_Start>

  return USBD_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3708      	adds	r7, #8
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	370c      	adds	r7, #12
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bc80      	pop	{r7}
 8006d32:	4770      	bx	lr

08006d34 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006d40:	2302      	movs	r3, #2
 8006d42:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00c      	beq.n	8006d68 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	78fa      	ldrb	r2, [r7, #3]
 8006d58:	4611      	mov	r1, r2
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	4798      	blx	r3
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d101      	bne.n	8006d68 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006d64:	2300      	movs	r3, #0
 8006d66:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b082      	sub	sp, #8
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	78fa      	ldrb	r2, [r7, #3]
 8006d88:	4611      	mov	r1, r2
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	4798      	blx	r3

  return USBD_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3708      	adds	r7, #8
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006da8:	6839      	ldr	r1, [r7, #0]
 8006daa:	4618      	mov	r0, r3
 8006dac:	f000 fed7 	bl	8007b5e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006dcc:	f003 031f 	and.w	r3, r3, #31
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d016      	beq.n	8006e02 <USBD_LL_SetupStage+0x6a>
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d81c      	bhi.n	8006e12 <USBD_LL_SetupStage+0x7a>
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d002      	beq.n	8006de2 <USBD_LL_SetupStage+0x4a>
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d008      	beq.n	8006df2 <USBD_LL_SetupStage+0x5a>
 8006de0:	e017      	b.n	8006e12 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006de8:	4619      	mov	r1, r3
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 f9ca 	bl	8007184 <USBD_StdDevReq>
      break;
 8006df0:	e01a      	b.n	8006e28 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006df8:	4619      	mov	r1, r3
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fa2c 	bl	8007258 <USBD_StdItfReq>
      break;
 8006e00:	e012      	b.n	8006e28 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006e08:	4619      	mov	r1, r3
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 fa6c 	bl	80072e8 <USBD_StdEPReq>
      break;
 8006e10:	e00a      	b.n	8006e28 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006e18:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f001 fb0b 	bl	800843c <USBD_LL_StallEP>
      break;
 8006e26:	bf00      	nop
  }

  return USBD_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b086      	sub	sp, #24
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	60f8      	str	r0, [r7, #12]
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	607a      	str	r2, [r7, #4]
 8006e3e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006e40:	7afb      	ldrb	r3, [r7, #11]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d14b      	bne.n	8006ede <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006e4c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006e54:	2b03      	cmp	r3, #3
 8006e56:	d134      	bne.n	8006ec2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	68da      	ldr	r2, [r3, #12]
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d919      	bls.n	8006e98 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	68da      	ldr	r2, [r3, #12]
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	1ad2      	subs	r2, r2, r3
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	68da      	ldr	r2, [r3, #12]
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d203      	bcs.n	8006e86 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	e002      	b.n	8006e8c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	6879      	ldr	r1, [r7, #4]
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f000 ff53 	bl	8007d3c <USBD_CtlContinueRx>
 8006e96:	e038      	b.n	8006f0a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00a      	beq.n	8006eba <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006eaa:	2b03      	cmp	r3, #3
 8006eac:	d105      	bne.n	8006eba <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f000 ff50 	bl	8007d60 <USBD_CtlSendStatus>
 8006ec0:	e023      	b.n	8006f0a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006ec8:	2b05      	cmp	r3, #5
 8006eca:	d11e      	bne.n	8006f0a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f001 fab0 	bl	800843c <USBD_LL_StallEP>
 8006edc:	e015      	b.n	8006f0a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00d      	beq.n	8006f06 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006ef0:	2b03      	cmp	r3, #3
 8006ef2:	d108      	bne.n	8006f06 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	7afa      	ldrb	r2, [r7, #11]
 8006efe:	4611      	mov	r1, r2
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	4798      	blx	r3
 8006f04:	e001      	b.n	8006f0a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006f06:	2302      	movs	r3, #2
 8006f08:	e000      	b.n	8006f0c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3718      	adds	r7, #24
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b086      	sub	sp, #24
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	607a      	str	r2, [r7, #4]
 8006f20:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006f22:	7afb      	ldrb	r3, [r7, #11]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d17f      	bne.n	8007028 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	3314      	adds	r3, #20
 8006f2c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d15c      	bne.n	8006ff2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	68da      	ldr	r2, [r3, #12]
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d915      	bls.n	8006f70 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	68da      	ldr	r2, [r3, #12]
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	1ad2      	subs	r2, r2, r3
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	461a      	mov	r2, r3
 8006f5a:	6879      	ldr	r1, [r7, #4]
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	f000 febd 	bl	8007cdc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f62:	2300      	movs	r3, #0
 8006f64:	2200      	movs	r2, #0
 8006f66:	2100      	movs	r1, #0
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f001 fb12 	bl	8008592 <USBD_LL_PrepareReceive>
 8006f6e:	e04e      	b.n	800700e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	697a      	ldr	r2, [r7, #20]
 8006f76:	6912      	ldr	r2, [r2, #16]
 8006f78:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f7c:	fb01 f202 	mul.w	r2, r1, r2
 8006f80:	1a9b      	subs	r3, r3, r2
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d11c      	bne.n	8006fc0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	689a      	ldr	r2, [r3, #8]
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d316      	bcc.n	8006fc0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	689a      	ldr	r2, [r3, #8]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d20f      	bcs.n	8006fc0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f000 fe99 	bl	8007cdc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f001 faea 	bl	8008592 <USBD_LL_PrepareReceive>
 8006fbe:	e026      	b.n	800700e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00a      	beq.n	8006fe2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006fd2:	2b03      	cmp	r3, #3
 8006fd4:	d105      	bne.n	8006fe2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006fe2:	2180      	movs	r1, #128	@ 0x80
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f001 fa29 	bl	800843c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f000 fecb 	bl	8007d86 <USBD_CtlReceiveStatus>
 8006ff0:	e00d      	b.n	800700e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006ff8:	2b04      	cmp	r3, #4
 8006ffa:	d004      	beq.n	8007006 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007002:	2b00      	cmp	r3, #0
 8007004:	d103      	bne.n	800700e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007006:	2180      	movs	r1, #128	@ 0x80
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f001 fa17 	bl	800843c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007014:	2b01      	cmp	r3, #1
 8007016:	d11d      	bne.n	8007054 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f7ff fe81 	bl	8006d20 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007026:	e015      	b.n	8007054 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800702e:	695b      	ldr	r3, [r3, #20]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00d      	beq.n	8007050 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800703a:	2b03      	cmp	r3, #3
 800703c:	d108      	bne.n	8007050 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	7afa      	ldrb	r2, [r7, #11]
 8007048:	4611      	mov	r1, r2
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	4798      	blx	r3
 800704e:	e001      	b.n	8007054 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007050:	2302      	movs	r3, #2
 8007052:	e000      	b.n	8007056 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3718      	adds	r7, #24
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b082      	sub	sp, #8
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007066:	2340      	movs	r3, #64	@ 0x40
 8007068:	2200      	movs	r2, #0
 800706a:	2100      	movs	r1, #0
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f001 f9a0 	bl	80083b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2240      	movs	r2, #64	@ 0x40
 800707e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007082:	2340      	movs	r3, #64	@ 0x40
 8007084:	2200      	movs	r2, #0
 8007086:	2180      	movs	r1, #128	@ 0x80
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f001 f992 	bl	80083b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2240      	movs	r2, #64	@ 0x40
 8007098:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d009      	beq.n	80070d6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	6852      	ldr	r2, [r2, #4]
 80070ce:	b2d2      	uxtb	r2, r2
 80070d0:	4611      	mov	r1, r2
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	4798      	blx	r3
  }

  return USBD_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	460b      	mov	r3, r1
 80070ea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	78fa      	ldrb	r2, [r7, #3]
 80070f0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bc80      	pop	{r7}
 80070fc:	4770      	bx	lr

080070fe <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80070fe:	b480      	push	{r7}
 8007100:	b083      	sub	sp, #12
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2204      	movs	r2, #4
 8007116:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	bc80      	pop	{r7}
 8007124:	4770      	bx	lr

08007126 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007126:	b480      	push	{r7}
 8007128:	b083      	sub	sp, #12
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007134:	2b04      	cmp	r3, #4
 8007136:	d105      	bne.n	8007144 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	370c      	adds	r7, #12
 800714a:	46bd      	mov	sp, r7
 800714c:	bc80      	pop	{r7}
 800714e:	4770      	bx	lr

08007150 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800715e:	2b03      	cmp	r3, #3
 8007160:	d10b      	bne.n	800717a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007168:	69db      	ldr	r3, [r3, #28]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d005      	beq.n	800717a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007174:	69db      	ldr	r3, [r3, #28]
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3708      	adds	r7, #8
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800718e:	2300      	movs	r3, #0
 8007190:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800719a:	2b40      	cmp	r3, #64	@ 0x40
 800719c:	d005      	beq.n	80071aa <USBD_StdDevReq+0x26>
 800719e:	2b40      	cmp	r3, #64	@ 0x40
 80071a0:	d84f      	bhi.n	8007242 <USBD_StdDevReq+0xbe>
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d009      	beq.n	80071ba <USBD_StdDevReq+0x36>
 80071a6:	2b20      	cmp	r3, #32
 80071a8:	d14b      	bne.n	8007242 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	6839      	ldr	r1, [r7, #0]
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	4798      	blx	r3
      break;
 80071b8:	e048      	b.n	800724c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	785b      	ldrb	r3, [r3, #1]
 80071be:	2b09      	cmp	r3, #9
 80071c0:	d839      	bhi.n	8007236 <USBD_StdDevReq+0xb2>
 80071c2:	a201      	add	r2, pc, #4	@ (adr r2, 80071c8 <USBD_StdDevReq+0x44>)
 80071c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c8:	08007219 	.word	0x08007219
 80071cc:	0800722d 	.word	0x0800722d
 80071d0:	08007237 	.word	0x08007237
 80071d4:	08007223 	.word	0x08007223
 80071d8:	08007237 	.word	0x08007237
 80071dc:	080071fb 	.word	0x080071fb
 80071e0:	080071f1 	.word	0x080071f1
 80071e4:	08007237 	.word	0x08007237
 80071e8:	0800720f 	.word	0x0800720f
 80071ec:	08007205 	.word	0x08007205
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80071f0:	6839      	ldr	r1, [r7, #0]
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f9dc 	bl	80075b0 <USBD_GetDescriptor>
          break;
 80071f8:	e022      	b.n	8007240 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80071fa:	6839      	ldr	r1, [r7, #0]
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 fb3f 	bl	8007880 <USBD_SetAddress>
          break;
 8007202:	e01d      	b.n	8007240 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007204:	6839      	ldr	r1, [r7, #0]
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fb7e 	bl	8007908 <USBD_SetConfig>
          break;
 800720c:	e018      	b.n	8007240 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800720e:	6839      	ldr	r1, [r7, #0]
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 fc07 	bl	8007a24 <USBD_GetConfig>
          break;
 8007216:	e013      	b.n	8007240 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007218:	6839      	ldr	r1, [r7, #0]
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 fc37 	bl	8007a8e <USBD_GetStatus>
          break;
 8007220:	e00e      	b.n	8007240 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007222:	6839      	ldr	r1, [r7, #0]
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 fc65 	bl	8007af4 <USBD_SetFeature>
          break;
 800722a:	e009      	b.n	8007240 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 fc74 	bl	8007b1c <USBD_ClrFeature>
          break;
 8007234:	e004      	b.n	8007240 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007236:	6839      	ldr	r1, [r7, #0]
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 fcc9 	bl	8007bd0 <USBD_CtlError>
          break;
 800723e:	bf00      	nop
      }
      break;
 8007240:	e004      	b.n	800724c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007242:	6839      	ldr	r1, [r7, #0]
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 fcc3 	bl	8007bd0 <USBD_CtlError>
      break;
 800724a:	bf00      	nop
  }

  return ret;
 800724c:	7bfb      	ldrb	r3, [r7, #15]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop

08007258 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007262:	2300      	movs	r3, #0
 8007264:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800726e:	2b40      	cmp	r3, #64	@ 0x40
 8007270:	d005      	beq.n	800727e <USBD_StdItfReq+0x26>
 8007272:	2b40      	cmp	r3, #64	@ 0x40
 8007274:	d82e      	bhi.n	80072d4 <USBD_StdItfReq+0x7c>
 8007276:	2b00      	cmp	r3, #0
 8007278:	d001      	beq.n	800727e <USBD_StdItfReq+0x26>
 800727a:	2b20      	cmp	r3, #32
 800727c:	d12a      	bne.n	80072d4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007284:	3b01      	subs	r3, #1
 8007286:	2b02      	cmp	r3, #2
 8007288:	d81d      	bhi.n	80072c6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	889b      	ldrh	r3, [r3, #4]
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b01      	cmp	r3, #1
 8007292:	d813      	bhi.n	80072bc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	6839      	ldr	r1, [r7, #0]
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	4798      	blx	r3
 80072a2:	4603      	mov	r3, r0
 80072a4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	88db      	ldrh	r3, [r3, #6]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d110      	bne.n	80072d0 <USBD_StdItfReq+0x78>
 80072ae:	7bfb      	ldrb	r3, [r7, #15]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10d      	bne.n	80072d0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 fd53 	bl	8007d60 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80072ba:	e009      	b.n	80072d0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80072bc:	6839      	ldr	r1, [r7, #0]
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 fc86 	bl	8007bd0 <USBD_CtlError>
          break;
 80072c4:	e004      	b.n	80072d0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80072c6:	6839      	ldr	r1, [r7, #0]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fc81 	bl	8007bd0 <USBD_CtlError>
          break;
 80072ce:	e000      	b.n	80072d2 <USBD_StdItfReq+0x7a>
          break;
 80072d0:	bf00      	nop
      }
      break;
 80072d2:	e004      	b.n	80072de <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80072d4:	6839      	ldr	r1, [r7, #0]
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 fc7a 	bl	8007bd0 <USBD_CtlError>
      break;
 80072dc:	bf00      	nop
  }

  return USBD_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80072f2:	2300      	movs	r3, #0
 80072f4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	889b      	ldrh	r3, [r3, #4]
 80072fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007304:	2b40      	cmp	r3, #64	@ 0x40
 8007306:	d007      	beq.n	8007318 <USBD_StdEPReq+0x30>
 8007308:	2b40      	cmp	r3, #64	@ 0x40
 800730a:	f200 8146 	bhi.w	800759a <USBD_StdEPReq+0x2b2>
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00a      	beq.n	8007328 <USBD_StdEPReq+0x40>
 8007312:	2b20      	cmp	r3, #32
 8007314:	f040 8141 	bne.w	800759a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	6839      	ldr	r1, [r7, #0]
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	4798      	blx	r3
      break;
 8007326:	e13d      	b.n	80075a4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007330:	2b20      	cmp	r3, #32
 8007332:	d10a      	bne.n	800734a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	6839      	ldr	r1, [r7, #0]
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	4798      	blx	r3
 8007342:	4603      	mov	r3, r0
 8007344:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007346:	7bfb      	ldrb	r3, [r7, #15]
 8007348:	e12d      	b.n	80075a6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	785b      	ldrb	r3, [r3, #1]
 800734e:	2b03      	cmp	r3, #3
 8007350:	d007      	beq.n	8007362 <USBD_StdEPReq+0x7a>
 8007352:	2b03      	cmp	r3, #3
 8007354:	f300 811b 	bgt.w	800758e <USBD_StdEPReq+0x2a6>
 8007358:	2b00      	cmp	r3, #0
 800735a:	d072      	beq.n	8007442 <USBD_StdEPReq+0x15a>
 800735c:	2b01      	cmp	r3, #1
 800735e:	d03a      	beq.n	80073d6 <USBD_StdEPReq+0xee>
 8007360:	e115      	b.n	800758e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007368:	2b02      	cmp	r3, #2
 800736a:	d002      	beq.n	8007372 <USBD_StdEPReq+0x8a>
 800736c:	2b03      	cmp	r3, #3
 800736e:	d015      	beq.n	800739c <USBD_StdEPReq+0xb4>
 8007370:	e02b      	b.n	80073ca <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007372:	7bbb      	ldrb	r3, [r7, #14]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00c      	beq.n	8007392 <USBD_StdEPReq+0xaa>
 8007378:	7bbb      	ldrb	r3, [r7, #14]
 800737a:	2b80      	cmp	r3, #128	@ 0x80
 800737c:	d009      	beq.n	8007392 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800737e:	7bbb      	ldrb	r3, [r7, #14]
 8007380:	4619      	mov	r1, r3
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f001 f85a 	bl	800843c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007388:	2180      	movs	r1, #128	@ 0x80
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f001 f856 	bl	800843c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007390:	e020      	b.n	80073d4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007392:	6839      	ldr	r1, [r7, #0]
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 fc1b 	bl	8007bd0 <USBD_CtlError>
              break;
 800739a:	e01b      	b.n	80073d4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	885b      	ldrh	r3, [r3, #2]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10e      	bne.n	80073c2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80073a4:	7bbb      	ldrb	r3, [r7, #14]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00b      	beq.n	80073c2 <USBD_StdEPReq+0xda>
 80073aa:	7bbb      	ldrb	r3, [r7, #14]
 80073ac:	2b80      	cmp	r3, #128	@ 0x80
 80073ae:	d008      	beq.n	80073c2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	88db      	ldrh	r3, [r3, #6]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d104      	bne.n	80073c2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80073b8:	7bbb      	ldrb	r3, [r7, #14]
 80073ba:	4619      	mov	r1, r3
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f001 f83d 	bl	800843c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fccc 	bl	8007d60 <USBD_CtlSendStatus>

              break;
 80073c8:	e004      	b.n	80073d4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80073ca:	6839      	ldr	r1, [r7, #0]
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fbff 	bl	8007bd0 <USBD_CtlError>
              break;
 80073d2:	bf00      	nop
          }
          break;
 80073d4:	e0e0      	b.n	8007598 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d002      	beq.n	80073e6 <USBD_StdEPReq+0xfe>
 80073e0:	2b03      	cmp	r3, #3
 80073e2:	d015      	beq.n	8007410 <USBD_StdEPReq+0x128>
 80073e4:	e026      	b.n	8007434 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073e6:	7bbb      	ldrb	r3, [r7, #14]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00c      	beq.n	8007406 <USBD_StdEPReq+0x11e>
 80073ec:	7bbb      	ldrb	r3, [r7, #14]
 80073ee:	2b80      	cmp	r3, #128	@ 0x80
 80073f0:	d009      	beq.n	8007406 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80073f2:	7bbb      	ldrb	r3, [r7, #14]
 80073f4:	4619      	mov	r1, r3
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f001 f820 	bl	800843c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80073fc:	2180      	movs	r1, #128	@ 0x80
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f001 f81c 	bl	800843c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007404:	e01c      	b.n	8007440 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007406:	6839      	ldr	r1, [r7, #0]
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 fbe1 	bl	8007bd0 <USBD_CtlError>
              break;
 800740e:	e017      	b.n	8007440 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	885b      	ldrh	r3, [r3, #2]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d112      	bne.n	800743e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007418:	7bbb      	ldrb	r3, [r7, #14]
 800741a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800741e:	2b00      	cmp	r3, #0
 8007420:	d004      	beq.n	800742c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007422:	7bbb      	ldrb	r3, [r7, #14]
 8007424:	4619      	mov	r1, r3
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f001 f827 	bl	800847a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 fc97 	bl	8007d60 <USBD_CtlSendStatus>
              }
              break;
 8007432:	e004      	b.n	800743e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007434:	6839      	ldr	r1, [r7, #0]
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fbca 	bl	8007bd0 <USBD_CtlError>
              break;
 800743c:	e000      	b.n	8007440 <USBD_StdEPReq+0x158>
              break;
 800743e:	bf00      	nop
          }
          break;
 8007440:	e0aa      	b.n	8007598 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007448:	2b02      	cmp	r3, #2
 800744a:	d002      	beq.n	8007452 <USBD_StdEPReq+0x16a>
 800744c:	2b03      	cmp	r3, #3
 800744e:	d032      	beq.n	80074b6 <USBD_StdEPReq+0x1ce>
 8007450:	e097      	b.n	8007582 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007452:	7bbb      	ldrb	r3, [r7, #14]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d007      	beq.n	8007468 <USBD_StdEPReq+0x180>
 8007458:	7bbb      	ldrb	r3, [r7, #14]
 800745a:	2b80      	cmp	r3, #128	@ 0x80
 800745c:	d004      	beq.n	8007468 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800745e:	6839      	ldr	r1, [r7, #0]
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fbb5 	bl	8007bd0 <USBD_CtlError>
                break;
 8007466:	e091      	b.n	800758c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007468:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800746c:	2b00      	cmp	r3, #0
 800746e:	da0b      	bge.n	8007488 <USBD_StdEPReq+0x1a0>
 8007470:	7bbb      	ldrb	r3, [r7, #14]
 8007472:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007476:	4613      	mov	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	3310      	adds	r3, #16
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	4413      	add	r3, r2
 8007484:	3304      	adds	r3, #4
 8007486:	e00b      	b.n	80074a0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007488:	7bbb      	ldrb	r3, [r7, #14]
 800748a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800748e:	4613      	mov	r3, r2
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	4413      	add	r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	4413      	add	r3, r2
 800749e:	3304      	adds	r3, #4
 80074a0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	2200      	movs	r2, #0
 80074a6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	2202      	movs	r2, #2
 80074ac:	4619      	mov	r1, r3
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fbf8 	bl	8007ca4 <USBD_CtlSendData>
              break;
 80074b4:	e06a      	b.n	800758c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80074b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	da11      	bge.n	80074e2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80074be:	7bbb      	ldrb	r3, [r7, #14]
 80074c0:	f003 020f 	and.w	r2, r3, #15
 80074c4:	6879      	ldr	r1, [r7, #4]
 80074c6:	4613      	mov	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4413      	add	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	440b      	add	r3, r1
 80074d0:	3318      	adds	r3, #24
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d117      	bne.n	8007508 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80074d8:	6839      	ldr	r1, [r7, #0]
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 fb78 	bl	8007bd0 <USBD_CtlError>
                  break;
 80074e0:	e054      	b.n	800758c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80074e2:	7bbb      	ldrb	r3, [r7, #14]
 80074e4:	f003 020f 	and.w	r2, r3, #15
 80074e8:	6879      	ldr	r1, [r7, #4]
 80074ea:	4613      	mov	r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4413      	add	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	440b      	add	r3, r1
 80074f4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d104      	bne.n	8007508 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80074fe:	6839      	ldr	r1, [r7, #0]
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fb65 	bl	8007bd0 <USBD_CtlError>
                  break;
 8007506:	e041      	b.n	800758c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007508:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800750c:	2b00      	cmp	r3, #0
 800750e:	da0b      	bge.n	8007528 <USBD_StdEPReq+0x240>
 8007510:	7bbb      	ldrb	r3, [r7, #14]
 8007512:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007516:	4613      	mov	r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	4413      	add	r3, r2
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	3310      	adds	r3, #16
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	4413      	add	r3, r2
 8007524:	3304      	adds	r3, #4
 8007526:	e00b      	b.n	8007540 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007528:	7bbb      	ldrb	r3, [r7, #14]
 800752a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800752e:	4613      	mov	r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	4413      	add	r3, r2
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	4413      	add	r3, r2
 800753e:	3304      	adds	r3, #4
 8007540:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007542:	7bbb      	ldrb	r3, [r7, #14]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d002      	beq.n	800754e <USBD_StdEPReq+0x266>
 8007548:	7bbb      	ldrb	r3, [r7, #14]
 800754a:	2b80      	cmp	r3, #128	@ 0x80
 800754c:	d103      	bne.n	8007556 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	2200      	movs	r2, #0
 8007552:	601a      	str	r2, [r3, #0]
 8007554:	e00e      	b.n	8007574 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007556:	7bbb      	ldrb	r3, [r7, #14]
 8007558:	4619      	mov	r1, r3
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 ffac 	bl	80084b8 <USBD_LL_IsStallEP>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d003      	beq.n	800756e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	2201      	movs	r2, #1
 800756a:	601a      	str	r2, [r3, #0]
 800756c:	e002      	b.n	8007574 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2200      	movs	r2, #0
 8007572:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	2202      	movs	r2, #2
 8007578:	4619      	mov	r1, r3
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 fb92 	bl	8007ca4 <USBD_CtlSendData>
              break;
 8007580:	e004      	b.n	800758c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007582:	6839      	ldr	r1, [r7, #0]
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 fb23 	bl	8007bd0 <USBD_CtlError>
              break;
 800758a:	bf00      	nop
          }
          break;
 800758c:	e004      	b.n	8007598 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800758e:	6839      	ldr	r1, [r7, #0]
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fb1d 	bl	8007bd0 <USBD_CtlError>
          break;
 8007596:	bf00      	nop
      }
      break;
 8007598:	e004      	b.n	80075a4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800759a:	6839      	ldr	r1, [r7, #0]
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 fb17 	bl	8007bd0 <USBD_CtlError>
      break;
 80075a2:	bf00      	nop
  }

  return ret;
 80075a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
	...

080075b0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075ba:	2300      	movs	r3, #0
 80075bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80075be:	2300      	movs	r3, #0
 80075c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80075c2:	2300      	movs	r3, #0
 80075c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	885b      	ldrh	r3, [r3, #2]
 80075ca:	0a1b      	lsrs	r3, r3, #8
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	3b01      	subs	r3, #1
 80075d0:	2b06      	cmp	r3, #6
 80075d2:	f200 8128 	bhi.w	8007826 <USBD_GetDescriptor+0x276>
 80075d6:	a201      	add	r2, pc, #4	@ (adr r2, 80075dc <USBD_GetDescriptor+0x2c>)
 80075d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075dc:	080075f9 	.word	0x080075f9
 80075e0:	08007611 	.word	0x08007611
 80075e4:	08007651 	.word	0x08007651
 80075e8:	08007827 	.word	0x08007827
 80075ec:	08007827 	.word	0x08007827
 80075f0:	080077c7 	.word	0x080077c7
 80075f4:	080077f3 	.word	0x080077f3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	7c12      	ldrb	r2, [r2, #16]
 8007604:	f107 0108 	add.w	r1, r7, #8
 8007608:	4610      	mov	r0, r2
 800760a:	4798      	blx	r3
 800760c:	60f8      	str	r0, [r7, #12]
      break;
 800760e:	e112      	b.n	8007836 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	7c1b      	ldrb	r3, [r3, #16]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d10d      	bne.n	8007634 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800761e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007620:	f107 0208 	add.w	r2, r7, #8
 8007624:	4610      	mov	r0, r2
 8007626:	4798      	blx	r3
 8007628:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	3301      	adds	r3, #1
 800762e:	2202      	movs	r2, #2
 8007630:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007632:	e100      	b.n	8007836 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800763a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800763c:	f107 0208 	add.w	r2, r7, #8
 8007640:	4610      	mov	r0, r2
 8007642:	4798      	blx	r3
 8007644:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	3301      	adds	r3, #1
 800764a:	2202      	movs	r2, #2
 800764c:	701a      	strb	r2, [r3, #0]
      break;
 800764e:	e0f2      	b.n	8007836 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	885b      	ldrh	r3, [r3, #2]
 8007654:	b2db      	uxtb	r3, r3
 8007656:	2b05      	cmp	r3, #5
 8007658:	f200 80ac 	bhi.w	80077b4 <USBD_GetDescriptor+0x204>
 800765c:	a201      	add	r2, pc, #4	@ (adr r2, 8007664 <USBD_GetDescriptor+0xb4>)
 800765e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007662:	bf00      	nop
 8007664:	0800767d 	.word	0x0800767d
 8007668:	080076b1 	.word	0x080076b1
 800766c:	080076e5 	.word	0x080076e5
 8007670:	08007719 	.word	0x08007719
 8007674:	0800774d 	.word	0x0800774d
 8007678:	08007781 	.word	0x08007781
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00b      	beq.n	80076a0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	7c12      	ldrb	r2, [r2, #16]
 8007694:	f107 0108 	add.w	r1, r7, #8
 8007698:	4610      	mov	r0, r2
 800769a:	4798      	blx	r3
 800769c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800769e:	e091      	b.n	80077c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076a0:	6839      	ldr	r1, [r7, #0]
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fa94 	bl	8007bd0 <USBD_CtlError>
            err++;
 80076a8:	7afb      	ldrb	r3, [r7, #11]
 80076aa:	3301      	adds	r3, #1
 80076ac:	72fb      	strb	r3, [r7, #11]
          break;
 80076ae:	e089      	b.n	80077c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00b      	beq.n	80076d4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	7c12      	ldrb	r2, [r2, #16]
 80076c8:	f107 0108 	add.w	r1, r7, #8
 80076cc:	4610      	mov	r0, r2
 80076ce:	4798      	blx	r3
 80076d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076d2:	e077      	b.n	80077c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076d4:	6839      	ldr	r1, [r7, #0]
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fa7a 	bl	8007bd0 <USBD_CtlError>
            err++;
 80076dc:	7afb      	ldrb	r3, [r7, #11]
 80076de:	3301      	adds	r3, #1
 80076e0:	72fb      	strb	r3, [r7, #11]
          break;
 80076e2:	e06f      	b.n	80077c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00b      	beq.n	8007708 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	7c12      	ldrb	r2, [r2, #16]
 80076fc:	f107 0108 	add.w	r1, r7, #8
 8007700:	4610      	mov	r0, r2
 8007702:	4798      	blx	r3
 8007704:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007706:	e05d      	b.n	80077c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007708:	6839      	ldr	r1, [r7, #0]
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fa60 	bl	8007bd0 <USBD_CtlError>
            err++;
 8007710:	7afb      	ldrb	r3, [r7, #11]
 8007712:	3301      	adds	r3, #1
 8007714:	72fb      	strb	r3, [r7, #11]
          break;
 8007716:	e055      	b.n	80077c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800771e:	691b      	ldr	r3, [r3, #16]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00b      	beq.n	800773c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	7c12      	ldrb	r2, [r2, #16]
 8007730:	f107 0108 	add.w	r1, r7, #8
 8007734:	4610      	mov	r0, r2
 8007736:	4798      	blx	r3
 8007738:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800773a:	e043      	b.n	80077c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800773c:	6839      	ldr	r1, [r7, #0]
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 fa46 	bl	8007bd0 <USBD_CtlError>
            err++;
 8007744:	7afb      	ldrb	r3, [r7, #11]
 8007746:	3301      	adds	r3, #1
 8007748:	72fb      	strb	r3, [r7, #11]
          break;
 800774a:	e03b      	b.n	80077c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007752:	695b      	ldr	r3, [r3, #20]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00b      	beq.n	8007770 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800775e:	695b      	ldr	r3, [r3, #20]
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	7c12      	ldrb	r2, [r2, #16]
 8007764:	f107 0108 	add.w	r1, r7, #8
 8007768:	4610      	mov	r0, r2
 800776a:	4798      	blx	r3
 800776c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800776e:	e029      	b.n	80077c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007770:	6839      	ldr	r1, [r7, #0]
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 fa2c 	bl	8007bd0 <USBD_CtlError>
            err++;
 8007778:	7afb      	ldrb	r3, [r7, #11]
 800777a:	3301      	adds	r3, #1
 800777c:	72fb      	strb	r3, [r7, #11]
          break;
 800777e:	e021      	b.n	80077c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00b      	beq.n	80077a4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007792:	699b      	ldr	r3, [r3, #24]
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	7c12      	ldrb	r2, [r2, #16]
 8007798:	f107 0108 	add.w	r1, r7, #8
 800779c:	4610      	mov	r0, r2
 800779e:	4798      	blx	r3
 80077a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077a2:	e00f      	b.n	80077c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077a4:	6839      	ldr	r1, [r7, #0]
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fa12 	bl	8007bd0 <USBD_CtlError>
            err++;
 80077ac:	7afb      	ldrb	r3, [r7, #11]
 80077ae:	3301      	adds	r3, #1
 80077b0:	72fb      	strb	r3, [r7, #11]
          break;
 80077b2:	e007      	b.n	80077c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80077b4:	6839      	ldr	r1, [r7, #0]
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 fa0a 	bl	8007bd0 <USBD_CtlError>
          err++;
 80077bc:	7afb      	ldrb	r3, [r7, #11]
 80077be:	3301      	adds	r3, #1
 80077c0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80077c2:	e038      	b.n	8007836 <USBD_GetDescriptor+0x286>
 80077c4:	e037      	b.n	8007836 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	7c1b      	ldrb	r3, [r3, #16]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d109      	bne.n	80077e2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077d6:	f107 0208 	add.w	r2, r7, #8
 80077da:	4610      	mov	r0, r2
 80077dc:	4798      	blx	r3
 80077de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077e0:	e029      	b.n	8007836 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80077e2:	6839      	ldr	r1, [r7, #0]
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 f9f3 	bl	8007bd0 <USBD_CtlError>
        err++;
 80077ea:	7afb      	ldrb	r3, [r7, #11]
 80077ec:	3301      	adds	r3, #1
 80077ee:	72fb      	strb	r3, [r7, #11]
      break;
 80077f0:	e021      	b.n	8007836 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	7c1b      	ldrb	r3, [r3, #16]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10d      	bne.n	8007816 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007802:	f107 0208 	add.w	r2, r7, #8
 8007806:	4610      	mov	r0, r2
 8007808:	4798      	blx	r3
 800780a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	3301      	adds	r3, #1
 8007810:	2207      	movs	r2, #7
 8007812:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007814:	e00f      	b.n	8007836 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007816:	6839      	ldr	r1, [r7, #0]
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f9d9 	bl	8007bd0 <USBD_CtlError>
        err++;
 800781e:	7afb      	ldrb	r3, [r7, #11]
 8007820:	3301      	adds	r3, #1
 8007822:	72fb      	strb	r3, [r7, #11]
      break;
 8007824:	e007      	b.n	8007836 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007826:	6839      	ldr	r1, [r7, #0]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 f9d1 	bl	8007bd0 <USBD_CtlError>
      err++;
 800782e:	7afb      	ldrb	r3, [r7, #11]
 8007830:	3301      	adds	r3, #1
 8007832:	72fb      	strb	r3, [r7, #11]
      break;
 8007834:	bf00      	nop
  }

  if (err != 0U)
 8007836:	7afb      	ldrb	r3, [r7, #11]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d11c      	bne.n	8007876 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800783c:	893b      	ldrh	r3, [r7, #8]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d011      	beq.n	8007866 <USBD_GetDescriptor+0x2b6>
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	88db      	ldrh	r3, [r3, #6]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00d      	beq.n	8007866 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	88da      	ldrh	r2, [r3, #6]
 800784e:	893b      	ldrh	r3, [r7, #8]
 8007850:	4293      	cmp	r3, r2
 8007852:	bf28      	it	cs
 8007854:	4613      	movcs	r3, r2
 8007856:	b29b      	uxth	r3, r3
 8007858:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800785a:	893b      	ldrh	r3, [r7, #8]
 800785c:	461a      	mov	r2, r3
 800785e:	68f9      	ldr	r1, [r7, #12]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fa1f 	bl	8007ca4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	88db      	ldrh	r3, [r3, #6]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d104      	bne.n	8007878 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fa76 	bl	8007d60 <USBD_CtlSendStatus>
 8007874:	e000      	b.n	8007878 <USBD_GetDescriptor+0x2c8>
    return;
 8007876:	bf00      	nop
    }
  }
}
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop

08007880 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	889b      	ldrh	r3, [r3, #4]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d130      	bne.n	80078f4 <USBD_SetAddress+0x74>
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	88db      	ldrh	r3, [r3, #6]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d12c      	bne.n	80078f4 <USBD_SetAddress+0x74>
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	885b      	ldrh	r3, [r3, #2]
 800789e:	2b7f      	cmp	r3, #127	@ 0x7f
 80078a0:	d828      	bhi.n	80078f4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	885b      	ldrh	r3, [r3, #2]
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078b4:	2b03      	cmp	r3, #3
 80078b6:	d104      	bne.n	80078c2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80078b8:	6839      	ldr	r1, [r7, #0]
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f988 	bl	8007bd0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078c0:	e01d      	b.n	80078fe <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	7bfa      	ldrb	r2, [r7, #15]
 80078c6:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80078ca:	7bfb      	ldrb	r3, [r7, #15]
 80078cc:	4619      	mov	r1, r3
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fe1d 	bl	800850e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 fa43 	bl	8007d60 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80078da:	7bfb      	ldrb	r3, [r7, #15]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d004      	beq.n	80078ea <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2202      	movs	r2, #2
 80078e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078e8:	e009      	b.n	80078fe <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2201      	movs	r2, #1
 80078ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078f2:	e004      	b.n	80078fe <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80078f4:	6839      	ldr	r1, [r7, #0]
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f96a 	bl	8007bd0 <USBD_CtlError>
  }
}
 80078fc:	bf00      	nop
 80078fe:	bf00      	nop
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
	...

08007908 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	885b      	ldrh	r3, [r3, #2]
 8007916:	b2da      	uxtb	r2, r3
 8007918:	4b41      	ldr	r3, [pc, #260]	@ (8007a20 <USBD_SetConfig+0x118>)
 800791a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800791c:	4b40      	ldr	r3, [pc, #256]	@ (8007a20 <USBD_SetConfig+0x118>)
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d904      	bls.n	800792e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007924:	6839      	ldr	r1, [r7, #0]
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f952 	bl	8007bd0 <USBD_CtlError>
 800792c:	e075      	b.n	8007a1a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007934:	2b02      	cmp	r3, #2
 8007936:	d002      	beq.n	800793e <USBD_SetConfig+0x36>
 8007938:	2b03      	cmp	r3, #3
 800793a:	d023      	beq.n	8007984 <USBD_SetConfig+0x7c>
 800793c:	e062      	b.n	8007a04 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800793e:	4b38      	ldr	r3, [pc, #224]	@ (8007a20 <USBD_SetConfig+0x118>)
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d01a      	beq.n	800797c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007946:	4b36      	ldr	r3, [pc, #216]	@ (8007a20 <USBD_SetConfig+0x118>)
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	461a      	mov	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2203      	movs	r2, #3
 8007954:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007958:	4b31      	ldr	r3, [pc, #196]	@ (8007a20 <USBD_SetConfig+0x118>)
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	4619      	mov	r1, r3
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f7ff f9e8 	bl	8006d34 <USBD_SetClassConfig>
 8007964:	4603      	mov	r3, r0
 8007966:	2b02      	cmp	r3, #2
 8007968:	d104      	bne.n	8007974 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 f92f 	bl	8007bd0 <USBD_CtlError>
            return;
 8007972:	e052      	b.n	8007a1a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 f9f3 	bl	8007d60 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800797a:	e04e      	b.n	8007a1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 f9ef 	bl	8007d60 <USBD_CtlSendStatus>
        break;
 8007982:	e04a      	b.n	8007a1a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007984:	4b26      	ldr	r3, [pc, #152]	@ (8007a20 <USBD_SetConfig+0x118>)
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d112      	bne.n	80079b2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2202      	movs	r2, #2
 8007990:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007994:	4b22      	ldr	r3, [pc, #136]	@ (8007a20 <USBD_SetConfig+0x118>)
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	461a      	mov	r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800799e:	4b20      	ldr	r3, [pc, #128]	@ (8007a20 <USBD_SetConfig+0x118>)
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	4619      	mov	r1, r3
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f7ff f9e4 	bl	8006d72 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 f9d8 	bl	8007d60 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80079b0:	e033      	b.n	8007a1a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80079b2:	4b1b      	ldr	r3, [pc, #108]	@ (8007a20 <USBD_SetConfig+0x118>)
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	461a      	mov	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d01d      	beq.n	80079fc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	4619      	mov	r1, r3
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f7ff f9d2 	bl	8006d72 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80079ce:	4b14      	ldr	r3, [pc, #80]	@ (8007a20 <USBD_SetConfig+0x118>)
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	461a      	mov	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80079d8:	4b11      	ldr	r3, [pc, #68]	@ (8007a20 <USBD_SetConfig+0x118>)
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	4619      	mov	r1, r3
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f7ff f9a8 	bl	8006d34 <USBD_SetClassConfig>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	d104      	bne.n	80079f4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80079ea:	6839      	ldr	r1, [r7, #0]
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 f8ef 	bl	8007bd0 <USBD_CtlError>
            return;
 80079f2:	e012      	b.n	8007a1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 f9b3 	bl	8007d60 <USBD_CtlSendStatus>
        break;
 80079fa:	e00e      	b.n	8007a1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f9af 	bl	8007d60 <USBD_CtlSendStatus>
        break;
 8007a02:	e00a      	b.n	8007a1a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007a04:	6839      	ldr	r1, [r7, #0]
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 f8e2 	bl	8007bd0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007a0c:	4b04      	ldr	r3, [pc, #16]	@ (8007a20 <USBD_SetConfig+0x118>)
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	4619      	mov	r1, r3
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f7ff f9ad 	bl	8006d72 <USBD_ClrClassConfig>
        break;
 8007a18:	bf00      	nop
    }
  }
}
 8007a1a:	3708      	adds	r7, #8
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	20000aa0 	.word	0x20000aa0

08007a24 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	88db      	ldrh	r3, [r3, #6]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d004      	beq.n	8007a40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a36:	6839      	ldr	r1, [r7, #0]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 f8c9 	bl	8007bd0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a3e:	e022      	b.n	8007a86 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	dc02      	bgt.n	8007a50 <USBD_GetConfig+0x2c>
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	dc03      	bgt.n	8007a56 <USBD_GetConfig+0x32>
 8007a4e:	e015      	b.n	8007a7c <USBD_GetConfig+0x58>
 8007a50:	2b03      	cmp	r3, #3
 8007a52:	d00b      	beq.n	8007a6c <USBD_GetConfig+0x48>
 8007a54:	e012      	b.n	8007a7c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	3308      	adds	r3, #8
 8007a60:	2201      	movs	r2, #1
 8007a62:	4619      	mov	r1, r3
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 f91d 	bl	8007ca4 <USBD_CtlSendData>
        break;
 8007a6a:	e00c      	b.n	8007a86 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	3304      	adds	r3, #4
 8007a70:	2201      	movs	r2, #1
 8007a72:	4619      	mov	r1, r3
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f915 	bl	8007ca4 <USBD_CtlSendData>
        break;
 8007a7a:	e004      	b.n	8007a86 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007a7c:	6839      	ldr	r1, [r7, #0]
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f8a6 	bl	8007bd0 <USBD_CtlError>
        break;
 8007a84:	bf00      	nop
}
 8007a86:	bf00      	nop
 8007a88:	3708      	adds	r7, #8
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b082      	sub	sp, #8
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
 8007a96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	d81e      	bhi.n	8007ae2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	88db      	ldrh	r3, [r3, #6]
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d004      	beq.n	8007ab6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007aac:	6839      	ldr	r1, [r7, #0]
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 f88e 	bl	8007bd0 <USBD_CtlError>
        break;
 8007ab4:	e01a      	b.n	8007aec <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d005      	beq.n	8007ad2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	f043 0202 	orr.w	r2, r3, #2
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	330c      	adds	r3, #12
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	4619      	mov	r1, r3
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f8e2 	bl	8007ca4 <USBD_CtlSendData>
      break;
 8007ae0:	e004      	b.n	8007aec <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007ae2:	6839      	ldr	r1, [r7, #0]
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f873 	bl	8007bd0 <USBD_CtlError>
      break;
 8007aea:	bf00      	nop
  }
}
 8007aec:	bf00      	nop
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	885b      	ldrh	r3, [r3, #2]
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d106      	bne.n	8007b14 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f926 	bl	8007d60 <USBD_CtlSendStatus>
  }
}
 8007b14:	bf00      	nop
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d80b      	bhi.n	8007b4a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	885b      	ldrh	r3, [r3, #2]
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d10c      	bne.n	8007b54 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f90c 	bl	8007d60 <USBD_CtlSendStatus>
      }
      break;
 8007b48:	e004      	b.n	8007b54 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007b4a:	6839      	ldr	r1, [r7, #0]
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f83f 	bl	8007bd0 <USBD_CtlError>
      break;
 8007b52:	e000      	b.n	8007b56 <USBD_ClrFeature+0x3a>
      break;
 8007b54:	bf00      	nop
  }
}
 8007b56:	bf00      	nop
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b5e:	b480      	push	{r7}
 8007b60:	b083      	sub	sp, #12
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
 8007b66:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	781a      	ldrb	r2, [r3, #0]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	785a      	ldrb	r2, [r3, #1]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	3302      	adds	r3, #2
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	461a      	mov	r2, r3
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	3303      	adds	r3, #3
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	021b      	lsls	r3, r3, #8
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	4413      	add	r3, r2
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	3304      	adds	r3, #4
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	461a      	mov	r2, r3
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	3305      	adds	r3, #5
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	021b      	lsls	r3, r3, #8
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	4413      	add	r3, r2
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	3306      	adds	r3, #6
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	3307      	adds	r3, #7
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	021b      	lsls	r3, r3, #8
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	4413      	add	r3, r2
 8007bc0:	b29a      	uxth	r2, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	80da      	strh	r2, [r3, #6]

}
 8007bc6:	bf00      	nop
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bc80      	pop	{r7}
 8007bce:	4770      	bx	lr

08007bd0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007bda:	2180      	movs	r1, #128	@ 0x80
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 fc2d 	bl	800843c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007be2:	2100      	movs	r1, #0
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 fc29 	bl	800843c <USBD_LL_StallEP>
}
 8007bea:	bf00      	nop
 8007bec:	3708      	adds	r7, #8
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b086      	sub	sp, #24
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	60f8      	str	r0, [r7, #12]
 8007bfa:	60b9      	str	r1, [r7, #8]
 8007bfc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d032      	beq.n	8007c6e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f000 f834 	bl	8007c76 <USBD_GetLen>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	3301      	adds	r3, #1
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	005b      	lsls	r3, r3, #1
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007c1c:	7dfb      	ldrb	r3, [r7, #23]
 8007c1e:	1c5a      	adds	r2, r3, #1
 8007c20:	75fa      	strb	r2, [r7, #23]
 8007c22:	461a      	mov	r2, r3
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	4413      	add	r3, r2
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	7812      	ldrb	r2, [r2, #0]
 8007c2c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007c2e:	7dfb      	ldrb	r3, [r7, #23]
 8007c30:	1c5a      	adds	r2, r3, #1
 8007c32:	75fa      	strb	r2, [r7, #23]
 8007c34:	461a      	mov	r2, r3
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	4413      	add	r3, r2
 8007c3a:	2203      	movs	r2, #3
 8007c3c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007c3e:	e012      	b.n	8007c66 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	1c5a      	adds	r2, r3, #1
 8007c44:	60fa      	str	r2, [r7, #12]
 8007c46:	7dfa      	ldrb	r2, [r7, #23]
 8007c48:	1c51      	adds	r1, r2, #1
 8007c4a:	75f9      	strb	r1, [r7, #23]
 8007c4c:	4611      	mov	r1, r2
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	440a      	add	r2, r1
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007c56:	7dfb      	ldrb	r3, [r7, #23]
 8007c58:	1c5a      	adds	r2, r3, #1
 8007c5a:	75fa      	strb	r2, [r7, #23]
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	4413      	add	r3, r2
 8007c62:	2200      	movs	r2, #0
 8007c64:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1e8      	bne.n	8007c40 <USBD_GetString+0x4e>
    }
  }
}
 8007c6e:	bf00      	nop
 8007c70:	3718      	adds	r7, #24
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c76:	b480      	push	{r7}
 8007c78:	b085      	sub	sp, #20
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007c82:	e005      	b.n	8007c90 <USBD_GetLen+0x1a>
  {
    len++;
 8007c84:	7bfb      	ldrb	r3, [r7, #15]
 8007c86:	3301      	adds	r3, #1
 8007c88:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1f5      	bne.n	8007c84 <USBD_GetLen+0xe>
  }

  return len;
 8007c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bc80      	pop	{r7}
 8007ca2:	4770      	bx	lr

08007ca4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2202      	movs	r2, #2
 8007cb6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007cba:	88fa      	ldrh	r2, [r7, #6]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007cc0:	88fa      	ldrh	r2, [r7, #6]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007cc6:	88fb      	ldrh	r3, [r7, #6]
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	2100      	movs	r1, #0
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f000 fc3d 	bl	800854c <USBD_LL_Transmit>

  return USBD_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3710      	adds	r7, #16
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007cea:	88fb      	ldrh	r3, [r7, #6]
 8007cec:	68ba      	ldr	r2, [r7, #8]
 8007cee:	2100      	movs	r1, #0
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f000 fc2b 	bl	800854c <USBD_LL_Transmit>

  return USBD_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3710      	adds	r7, #16
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2203      	movs	r2, #3
 8007d12:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007d16:	88fa      	ldrh	r2, [r7, #6]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007d1e:	88fa      	ldrh	r2, [r7, #6]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d26:	88fb      	ldrh	r3, [r7, #6]
 8007d28:	68ba      	ldr	r2, [r7, #8]
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	68f8      	ldr	r0, [r7, #12]
 8007d2e:	f000 fc30 	bl	8008592 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	4613      	mov	r3, r2
 8007d48:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d4a:	88fb      	ldrh	r3, [r7, #6]
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	2100      	movs	r1, #0
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f000 fc1e 	bl	8008592 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2204      	movs	r2, #4
 8007d6c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d70:	2300      	movs	r3, #0
 8007d72:	2200      	movs	r2, #0
 8007d74:	2100      	movs	r1, #0
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 fbe8 	bl	800854c <USBD_LL_Transmit>

  return USBD_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3708      	adds	r7, #8
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b082      	sub	sp, #8
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2205      	movs	r2, #5
 8007d92:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d96:	2300      	movs	r3, #0
 8007d98:	2200      	movs	r2, #0
 8007d9a:	2100      	movs	r1, #0
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fbf8 	bl	8008592 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007db0:	2200      	movs	r2, #0
 8007db2:	4912      	ldr	r1, [pc, #72]	@ (8007dfc <MX_USB_DEVICE_Init+0x50>)
 8007db4:	4812      	ldr	r0, [pc, #72]	@ (8007e00 <MX_USB_DEVICE_Init+0x54>)
 8007db6:	f7fe ff63 	bl	8006c80 <USBD_Init>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d001      	beq.n	8007dc4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007dc0:	f7f8 fc94 	bl	80006ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007dc4:	490f      	ldr	r1, [pc, #60]	@ (8007e04 <MX_USB_DEVICE_Init+0x58>)
 8007dc6:	480e      	ldr	r0, [pc, #56]	@ (8007e00 <MX_USB_DEVICE_Init+0x54>)
 8007dc8:	f7fe ff85 	bl	8006cd6 <USBD_RegisterClass>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d001      	beq.n	8007dd6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007dd2:	f7f8 fc8b 	bl	80006ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007dd6:	490c      	ldr	r1, [pc, #48]	@ (8007e08 <MX_USB_DEVICE_Init+0x5c>)
 8007dd8:	4809      	ldr	r0, [pc, #36]	@ (8007e00 <MX_USB_DEVICE_Init+0x54>)
 8007dda:	f7fe fee5 	bl	8006ba8 <USBD_CDC_RegisterInterface>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d001      	beq.n	8007de8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007de4:	f7f8 fc82 	bl	80006ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007de8:	4805      	ldr	r0, [pc, #20]	@ (8007e00 <MX_USB_DEVICE_Init+0x54>)
 8007dea:	f7fe ff8d 	bl	8006d08 <USBD_Start>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d001      	beq.n	8007df8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007df4:	f7f8 fc7a 	bl	80006ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007df8:	bf00      	nop
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	200009e0 	.word	0x200009e0
 8007e00:	20000aa4 	.word	0x20000aa4
 8007e04:	200008cc 	.word	0x200008cc
 8007e08:	200009d0 	.word	0x200009d0

08007e0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007e10:	2200      	movs	r2, #0
 8007e12:	4905      	ldr	r1, [pc, #20]	@ (8007e28 <CDC_Init_FS+0x1c>)
 8007e14:	4805      	ldr	r0, [pc, #20]	@ (8007e2c <CDC_Init_FS+0x20>)
 8007e16:	f7fe fedd 	bl	8006bd4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007e1a:	4905      	ldr	r1, [pc, #20]	@ (8007e30 <CDC_Init_FS+0x24>)
 8007e1c:	4803      	ldr	r0, [pc, #12]	@ (8007e2c <CDC_Init_FS+0x20>)
 8007e1e:	f7fe fef2 	bl	8006c06 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007e22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	20001168 	.word	0x20001168
 8007e2c:	20000aa4 	.word	0x20000aa4
 8007e30:	20000d68 	.word	0x20000d68

08007e34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007e34:	b480      	push	{r7}
 8007e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007e38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bc80      	pop	{r7}
 8007e40:	4770      	bx	lr
	...

08007e44 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	6039      	str	r1, [r7, #0]
 8007e4e:	71fb      	strb	r3, [r7, #7]
 8007e50:	4613      	mov	r3, r2
 8007e52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007e54:	79fb      	ldrb	r3, [r7, #7]
 8007e56:	2b23      	cmp	r3, #35	@ 0x23
 8007e58:	d84a      	bhi.n	8007ef0 <CDC_Control_FS+0xac>
 8007e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e60 <CDC_Control_FS+0x1c>)
 8007e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e60:	08007ef1 	.word	0x08007ef1
 8007e64:	08007ef1 	.word	0x08007ef1
 8007e68:	08007ef1 	.word	0x08007ef1
 8007e6c:	08007ef1 	.word	0x08007ef1
 8007e70:	08007ef1 	.word	0x08007ef1
 8007e74:	08007ef1 	.word	0x08007ef1
 8007e78:	08007ef1 	.word	0x08007ef1
 8007e7c:	08007ef1 	.word	0x08007ef1
 8007e80:	08007ef1 	.word	0x08007ef1
 8007e84:	08007ef1 	.word	0x08007ef1
 8007e88:	08007ef1 	.word	0x08007ef1
 8007e8c:	08007ef1 	.word	0x08007ef1
 8007e90:	08007ef1 	.word	0x08007ef1
 8007e94:	08007ef1 	.word	0x08007ef1
 8007e98:	08007ef1 	.word	0x08007ef1
 8007e9c:	08007ef1 	.word	0x08007ef1
 8007ea0:	08007ef1 	.word	0x08007ef1
 8007ea4:	08007ef1 	.word	0x08007ef1
 8007ea8:	08007ef1 	.word	0x08007ef1
 8007eac:	08007ef1 	.word	0x08007ef1
 8007eb0:	08007ef1 	.word	0x08007ef1
 8007eb4:	08007ef1 	.word	0x08007ef1
 8007eb8:	08007ef1 	.word	0x08007ef1
 8007ebc:	08007ef1 	.word	0x08007ef1
 8007ec0:	08007ef1 	.word	0x08007ef1
 8007ec4:	08007ef1 	.word	0x08007ef1
 8007ec8:	08007ef1 	.word	0x08007ef1
 8007ecc:	08007ef1 	.word	0x08007ef1
 8007ed0:	08007ef1 	.word	0x08007ef1
 8007ed4:	08007ef1 	.word	0x08007ef1
 8007ed8:	08007ef1 	.word	0x08007ef1
 8007edc:	08007ef1 	.word	0x08007ef1
 8007ee0:	08007ef1 	.word	0x08007ef1
 8007ee4:	08007ef1 	.word	0x08007ef1
 8007ee8:	08007ef1 	.word	0x08007ef1
 8007eec:	08007ef1 	.word	0x08007ef1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007ef0:	bf00      	nop
  }

  return (USBD_OK);
 8007ef2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bc80      	pop	{r7}
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop

08007f00 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007f0a:	6879      	ldr	r1, [r7, #4]
 8007f0c:	4805      	ldr	r0, [pc, #20]	@ (8007f24 <CDC_Receive_FS+0x24>)
 8007f0e:	f7fe fe7a 	bl	8006c06 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007f12:	4804      	ldr	r0, [pc, #16]	@ (8007f24 <CDC_Receive_FS+0x24>)
 8007f14:	f7fe fe8a 	bl	8006c2c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007f18:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3708      	adds	r7, #8
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	20000aa4 	.word	0x20000aa4

08007f28 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	4603      	mov	r3, r0
 8007f30:	6039      	str	r1, [r7, #0]
 8007f32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	2212      	movs	r2, #18
 8007f38:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007f3a:	4b03      	ldr	r3, [pc, #12]	@ (8007f48 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bc80      	pop	{r7}
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	200009fc 	.word	0x200009fc

08007f4c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	4603      	mov	r3, r0
 8007f54:	6039      	str	r1, [r7, #0]
 8007f56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	2204      	movs	r2, #4
 8007f5c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007f5e:	4b03      	ldr	r3, [pc, #12]	@ (8007f6c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bc80      	pop	{r7}
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	20000a10 	.word	0x20000a10

08007f70 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	4603      	mov	r3, r0
 8007f78:	6039      	str	r1, [r7, #0]
 8007f7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f7c:	79fb      	ldrb	r3, [r7, #7]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d105      	bne.n	8007f8e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f82:	683a      	ldr	r2, [r7, #0]
 8007f84:	4907      	ldr	r1, [pc, #28]	@ (8007fa4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007f86:	4808      	ldr	r0, [pc, #32]	@ (8007fa8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007f88:	f7ff fe33 	bl	8007bf2 <USBD_GetString>
 8007f8c:	e004      	b.n	8007f98 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f8e:	683a      	ldr	r2, [r7, #0]
 8007f90:	4904      	ldr	r1, [pc, #16]	@ (8007fa4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007f92:	4805      	ldr	r0, [pc, #20]	@ (8007fa8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007f94:	f7ff fe2d 	bl	8007bf2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f98:	4b02      	ldr	r3, [pc, #8]	@ (8007fa4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	20001568 	.word	0x20001568
 8007fa8:	08008708 	.word	0x08008708

08007fac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	6039      	str	r1, [r7, #0]
 8007fb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007fb8:	683a      	ldr	r2, [r7, #0]
 8007fba:	4904      	ldr	r1, [pc, #16]	@ (8007fcc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007fbc:	4804      	ldr	r0, [pc, #16]	@ (8007fd0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007fbe:	f7ff fe18 	bl	8007bf2 <USBD_GetString>
  return USBD_StrDesc;
 8007fc2:	4b02      	ldr	r3, [pc, #8]	@ (8007fcc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3708      	adds	r7, #8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	20001568 	.word	0x20001568
 8007fd0:	08008720 	.word	0x08008720

08007fd4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	4603      	mov	r3, r0
 8007fdc:	6039      	str	r1, [r7, #0]
 8007fde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	221a      	movs	r2, #26
 8007fe4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007fe6:	f000 f843 	bl	8008070 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007fea:	4b02      	ldr	r3, [pc, #8]	@ (8007ff4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	20000a14 	.word	0x20000a14

08007ff8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	4603      	mov	r3, r0
 8008000:	6039      	str	r1, [r7, #0]
 8008002:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008004:	79fb      	ldrb	r3, [r7, #7]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d105      	bne.n	8008016 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800800a:	683a      	ldr	r2, [r7, #0]
 800800c:	4907      	ldr	r1, [pc, #28]	@ (800802c <USBD_FS_ConfigStrDescriptor+0x34>)
 800800e:	4808      	ldr	r0, [pc, #32]	@ (8008030 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008010:	f7ff fdef 	bl	8007bf2 <USBD_GetString>
 8008014:	e004      	b.n	8008020 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008016:	683a      	ldr	r2, [r7, #0]
 8008018:	4904      	ldr	r1, [pc, #16]	@ (800802c <USBD_FS_ConfigStrDescriptor+0x34>)
 800801a:	4805      	ldr	r0, [pc, #20]	@ (8008030 <USBD_FS_ConfigStrDescriptor+0x38>)
 800801c:	f7ff fde9 	bl	8007bf2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008020:	4b02      	ldr	r3, [pc, #8]	@ (800802c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008022:	4618      	mov	r0, r3
 8008024:	3708      	adds	r7, #8
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	20001568 	.word	0x20001568
 8008030:	08008734 	.word	0x08008734

08008034 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	4603      	mov	r3, r0
 800803c:	6039      	str	r1, [r7, #0]
 800803e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008040:	79fb      	ldrb	r3, [r7, #7]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d105      	bne.n	8008052 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008046:	683a      	ldr	r2, [r7, #0]
 8008048:	4907      	ldr	r1, [pc, #28]	@ (8008068 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800804a:	4808      	ldr	r0, [pc, #32]	@ (800806c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800804c:	f7ff fdd1 	bl	8007bf2 <USBD_GetString>
 8008050:	e004      	b.n	800805c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008052:	683a      	ldr	r2, [r7, #0]
 8008054:	4904      	ldr	r1, [pc, #16]	@ (8008068 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008056:	4805      	ldr	r0, [pc, #20]	@ (800806c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008058:	f7ff fdcb 	bl	8007bf2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800805c:	4b02      	ldr	r3, [pc, #8]	@ (8008068 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800805e:	4618      	mov	r0, r3
 8008060:	3708      	adds	r7, #8
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	20001568 	.word	0x20001568
 800806c:	08008740 	.word	0x08008740

08008070 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008076:	4b0f      	ldr	r3, [pc, #60]	@ (80080b4 <Get_SerialNum+0x44>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800807c:	4b0e      	ldr	r3, [pc, #56]	@ (80080b8 <Get_SerialNum+0x48>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008082:	4b0e      	ldr	r3, [pc, #56]	@ (80080bc <Get_SerialNum+0x4c>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4413      	add	r3, r2
 800808e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d009      	beq.n	80080aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008096:	2208      	movs	r2, #8
 8008098:	4909      	ldr	r1, [pc, #36]	@ (80080c0 <Get_SerialNum+0x50>)
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f000 f814 	bl	80080c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80080a0:	2204      	movs	r2, #4
 80080a2:	4908      	ldr	r1, [pc, #32]	@ (80080c4 <Get_SerialNum+0x54>)
 80080a4:	68b8      	ldr	r0, [r7, #8]
 80080a6:	f000 f80f 	bl	80080c8 <IntToUnicode>
  }
}
 80080aa:	bf00      	nop
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	1ffff7e8 	.word	0x1ffff7e8
 80080b8:	1ffff7ec 	.word	0x1ffff7ec
 80080bc:	1ffff7f0 	.word	0x1ffff7f0
 80080c0:	20000a16 	.word	0x20000a16
 80080c4:	20000a26 	.word	0x20000a26

080080c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b087      	sub	sp, #28
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	4613      	mov	r3, r2
 80080d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80080d6:	2300      	movs	r3, #0
 80080d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80080da:	2300      	movs	r3, #0
 80080dc:	75fb      	strb	r3, [r7, #23]
 80080de:	e027      	b.n	8008130 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	0f1b      	lsrs	r3, r3, #28
 80080e4:	2b09      	cmp	r3, #9
 80080e6:	d80b      	bhi.n	8008100 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	0f1b      	lsrs	r3, r3, #28
 80080ec:	b2da      	uxtb	r2, r3
 80080ee:	7dfb      	ldrb	r3, [r7, #23]
 80080f0:	005b      	lsls	r3, r3, #1
 80080f2:	4619      	mov	r1, r3
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	440b      	add	r3, r1
 80080f8:	3230      	adds	r2, #48	@ 0x30
 80080fa:	b2d2      	uxtb	r2, r2
 80080fc:	701a      	strb	r2, [r3, #0]
 80080fe:	e00a      	b.n	8008116 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	0f1b      	lsrs	r3, r3, #28
 8008104:	b2da      	uxtb	r2, r3
 8008106:	7dfb      	ldrb	r3, [r7, #23]
 8008108:	005b      	lsls	r3, r3, #1
 800810a:	4619      	mov	r1, r3
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	440b      	add	r3, r1
 8008110:	3237      	adds	r2, #55	@ 0x37
 8008112:	b2d2      	uxtb	r2, r2
 8008114:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	011b      	lsls	r3, r3, #4
 800811a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800811c:	7dfb      	ldrb	r3, [r7, #23]
 800811e:	005b      	lsls	r3, r3, #1
 8008120:	3301      	adds	r3, #1
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	4413      	add	r3, r2
 8008126:	2200      	movs	r2, #0
 8008128:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800812a:	7dfb      	ldrb	r3, [r7, #23]
 800812c:	3301      	adds	r3, #1
 800812e:	75fb      	strb	r3, [r7, #23]
 8008130:	7dfa      	ldrb	r2, [r7, #23]
 8008132:	79fb      	ldrb	r3, [r7, #7]
 8008134:	429a      	cmp	r2, r3
 8008136:	d3d3      	bcc.n	80080e0 <IntToUnicode+0x18>
  }
}
 8008138:	bf00      	nop
 800813a:	bf00      	nop
 800813c:	371c      	adds	r7, #28
 800813e:	46bd      	mov	sp, r7
 8008140:	bc80      	pop	{r7}
 8008142:	4770      	bx	lr

08008144 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a0d      	ldr	r2, [pc, #52]	@ (8008188 <HAL_PCD_MspInit+0x44>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d113      	bne.n	800817e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008156:	4b0d      	ldr	r3, [pc, #52]	@ (800818c <HAL_PCD_MspInit+0x48>)
 8008158:	69db      	ldr	r3, [r3, #28]
 800815a:	4a0c      	ldr	r2, [pc, #48]	@ (800818c <HAL_PCD_MspInit+0x48>)
 800815c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008160:	61d3      	str	r3, [r2, #28]
 8008162:	4b0a      	ldr	r3, [pc, #40]	@ (800818c <HAL_PCD_MspInit+0x48>)
 8008164:	69db      	ldr	r3, [r3, #28]
 8008166:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800816a:	60fb      	str	r3, [r7, #12]
 800816c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800816e:	2200      	movs	r2, #0
 8008170:	2100      	movs	r1, #0
 8008172:	2014      	movs	r0, #20
 8008174:	f7f8 fceb 	bl	8000b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008178:	2014      	movs	r0, #20
 800817a:	f7f8 fd04 	bl	8000b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800817e:	bf00      	nop
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	40005c00 	.word	0x40005c00
 800818c:	40021000 	.word	0x40021000

08008190 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80081a4:	4619      	mov	r1, r3
 80081a6:	4610      	mov	r0, r2
 80081a8:	f7fe fdf6 	bl	8006d98 <USBD_LL_SetupStage>
}
 80081ac:	bf00      	nop
 80081ae:	3708      	adds	r7, #8
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	460b      	mov	r3, r1
 80081be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80081c6:	78fa      	ldrb	r2, [r7, #3]
 80081c8:	6879      	ldr	r1, [r7, #4]
 80081ca:	4613      	mov	r3, r2
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	4413      	add	r3, r2
 80081d0:	00db      	lsls	r3, r3, #3
 80081d2:	440b      	add	r3, r1
 80081d4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	78fb      	ldrb	r3, [r7, #3]
 80081dc:	4619      	mov	r1, r3
 80081de:	f7fe fe28 	bl	8006e32 <USBD_LL_DataOutStage>
}
 80081e2:	bf00      	nop
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b082      	sub	sp, #8
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	460b      	mov	r3, r1
 80081f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80081fc:	78fa      	ldrb	r2, [r7, #3]
 80081fe:	6879      	ldr	r1, [r7, #4]
 8008200:	4613      	mov	r3, r2
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	4413      	add	r3, r2
 8008206:	00db      	lsls	r3, r3, #3
 8008208:	440b      	add	r3, r1
 800820a:	3324      	adds	r3, #36	@ 0x24
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	78fb      	ldrb	r3, [r7, #3]
 8008210:	4619      	mov	r1, r3
 8008212:	f7fe fe7f 	bl	8006f14 <USBD_LL_DataInStage>
}
 8008216:	bf00      	nop
 8008218:	3708      	adds	r7, #8
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b082      	sub	sp, #8
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800822c:	4618      	mov	r0, r3
 800822e:	f7fe ff8f 	bl	8007150 <USBD_LL_SOF>
}
 8008232:	bf00      	nop
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800823a:	b580      	push	{r7, lr}
 800823c:	b084      	sub	sp, #16
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008242:	2301      	movs	r3, #1
 8008244:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	799b      	ldrb	r3, [r3, #6]
 800824a:	2b02      	cmp	r3, #2
 800824c:	d001      	beq.n	8008252 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800824e:	f7f8 fa4d 	bl	80006ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008258:	7bfa      	ldrb	r2, [r7, #15]
 800825a:	4611      	mov	r1, r2
 800825c:	4618      	mov	r0, r3
 800825e:	f7fe ff3f 	bl	80070e0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008268:	4618      	mov	r0, r3
 800826a:	f7fe fef8 	bl	800705e <USBD_LL_Reset>
}
 800826e:	bf00      	nop
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
	...

08008278 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008286:	4618      	mov	r0, r3
 8008288:	f7fe ff39 	bl	80070fe <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	7a9b      	ldrb	r3, [r3, #10]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d005      	beq.n	80082a0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008294:	4b04      	ldr	r3, [pc, #16]	@ (80082a8 <HAL_PCD_SuspendCallback+0x30>)
 8008296:	691b      	ldr	r3, [r3, #16]
 8008298:	4a03      	ldr	r2, [pc, #12]	@ (80082a8 <HAL_PCD_SuspendCallback+0x30>)
 800829a:	f043 0306 	orr.w	r3, r3, #6
 800829e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80082a0:	bf00      	nop
 80082a2:	3708      	adds	r7, #8
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	e000ed00 	.word	0xe000ed00

080082ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7fe ff33 	bl	8007126 <USBD_LL_Resume>
}
 80082c0:	bf00      	nop
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80082d0:	4a28      	ldr	r2, [pc, #160]	@ (8008374 <USBD_LL_Init+0xac>)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a26      	ldr	r2, [pc, #152]	@ (8008374 <USBD_LL_Init+0xac>)
 80082dc:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80082e0:	4b24      	ldr	r3, [pc, #144]	@ (8008374 <USBD_LL_Init+0xac>)
 80082e2:	4a25      	ldr	r2, [pc, #148]	@ (8008378 <USBD_LL_Init+0xb0>)
 80082e4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80082e6:	4b23      	ldr	r3, [pc, #140]	@ (8008374 <USBD_LL_Init+0xac>)
 80082e8:	2208      	movs	r2, #8
 80082ea:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80082ec:	4b21      	ldr	r3, [pc, #132]	@ (8008374 <USBD_LL_Init+0xac>)
 80082ee:	2202      	movs	r2, #2
 80082f0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80082f2:	4b20      	ldr	r3, [pc, #128]	@ (8008374 <USBD_LL_Init+0xac>)
 80082f4:	2200      	movs	r2, #0
 80082f6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80082f8:	4b1e      	ldr	r3, [pc, #120]	@ (8008374 <USBD_LL_Init+0xac>)
 80082fa:	2200      	movs	r2, #0
 80082fc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80082fe:	4b1d      	ldr	r3, [pc, #116]	@ (8008374 <USBD_LL_Init+0xac>)
 8008300:	2200      	movs	r2, #0
 8008302:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008304:	481b      	ldr	r0, [pc, #108]	@ (8008374 <USBD_LL_Init+0xac>)
 8008306:	f7f8 fea6 	bl	8001056 <HAL_PCD_Init>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d001      	beq.n	8008314 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008310:	f7f8 f9ec 	bl	80006ec <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800831a:	2318      	movs	r3, #24
 800831c:	2200      	movs	r2, #0
 800831e:	2100      	movs	r1, #0
 8008320:	f7fa fbb7 	bl	8002a92 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800832a:	2358      	movs	r3, #88	@ 0x58
 800832c:	2200      	movs	r2, #0
 800832e:	2180      	movs	r1, #128	@ 0x80
 8008330:	f7fa fbaf 	bl	8002a92 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800833a:	23c0      	movs	r3, #192	@ 0xc0
 800833c:	2200      	movs	r2, #0
 800833e:	2181      	movs	r1, #129	@ 0x81
 8008340:	f7fa fba7 	bl	8002a92 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800834a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800834e:	2200      	movs	r2, #0
 8008350:	2101      	movs	r1, #1
 8008352:	f7fa fb9e 	bl	8002a92 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800835c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008360:	2200      	movs	r2, #0
 8008362:	2182      	movs	r1, #130	@ 0x82
 8008364:	f7fa fb95 	bl	8002a92 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	20001768 	.word	0x20001768
 8008378:	40005c00 	.word	0x40005c00

0800837c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008384:	2300      	movs	r3, #0
 8008386:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008388:	2300      	movs	r3, #0
 800838a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008392:	4618      	mov	r0, r3
 8008394:	f7f8 ff55 	bl	8001242 <HAL_PCD_Start>
 8008398:	4603      	mov	r3, r0
 800839a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800839c:	7bfb      	ldrb	r3, [r7, #15]
 800839e:	4618      	mov	r0, r3
 80083a0:	f000 f94e 	bl	8008640 <USBD_Get_USB_Status>
 80083a4:	4603      	mov	r3, r0
 80083a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3710      	adds	r7, #16
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b084      	sub	sp, #16
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
 80083ba:	4608      	mov	r0, r1
 80083bc:	4611      	mov	r1, r2
 80083be:	461a      	mov	r2, r3
 80083c0:	4603      	mov	r3, r0
 80083c2:	70fb      	strb	r3, [r7, #3]
 80083c4:	460b      	mov	r3, r1
 80083c6:	70bb      	strb	r3, [r7, #2]
 80083c8:	4613      	mov	r3, r2
 80083ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083cc:	2300      	movs	r3, #0
 80083ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083d0:	2300      	movs	r3, #0
 80083d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80083da:	78bb      	ldrb	r3, [r7, #2]
 80083dc:	883a      	ldrh	r2, [r7, #0]
 80083de:	78f9      	ldrb	r1, [r7, #3]
 80083e0:	f7f9 f8a9 	bl	8001536 <HAL_PCD_EP_Open>
 80083e4:	4603      	mov	r3, r0
 80083e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083e8:	7bfb      	ldrb	r3, [r7, #15]
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 f928 	bl	8008640 <USBD_Get_USB_Status>
 80083f0:	4603      	mov	r3, r0
 80083f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083fe:	b580      	push	{r7, lr}
 8008400:	b084      	sub	sp, #16
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
 8008406:	460b      	mov	r3, r1
 8008408:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800840a:	2300      	movs	r3, #0
 800840c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800840e:	2300      	movs	r3, #0
 8008410:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008418:	78fa      	ldrb	r2, [r7, #3]
 800841a:	4611      	mov	r1, r2
 800841c:	4618      	mov	r0, r3
 800841e:	f7f9 f8e7 	bl	80015f0 <HAL_PCD_EP_Close>
 8008422:	4603      	mov	r3, r0
 8008424:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008426:	7bfb      	ldrb	r3, [r7, #15]
 8008428:	4618      	mov	r0, r3
 800842a:	f000 f909 	bl	8008640 <USBD_Get_USB_Status>
 800842e:	4603      	mov	r3, r0
 8008430:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008432:	7bbb      	ldrb	r3, [r7, #14]
}
 8008434:	4618      	mov	r0, r3
 8008436:	3710      	adds	r7, #16
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	460b      	mov	r3, r1
 8008446:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008448:	2300      	movs	r3, #0
 800844a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800844c:	2300      	movs	r3, #0
 800844e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008456:	78fa      	ldrb	r2, [r7, #3]
 8008458:	4611      	mov	r1, r2
 800845a:	4618      	mov	r0, r3
 800845c:	f7f9 f98f 	bl	800177e <HAL_PCD_EP_SetStall>
 8008460:	4603      	mov	r3, r0
 8008462:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008464:	7bfb      	ldrb	r3, [r7, #15]
 8008466:	4618      	mov	r0, r3
 8008468:	f000 f8ea 	bl	8008640 <USBD_Get_USB_Status>
 800846c:	4603      	mov	r3, r0
 800846e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008470:	7bbb      	ldrb	r3, [r7, #14]
}
 8008472:	4618      	mov	r0, r3
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b084      	sub	sp, #16
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
 8008482:	460b      	mov	r3, r1
 8008484:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008486:	2300      	movs	r3, #0
 8008488:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800848a:	2300      	movs	r3, #0
 800848c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008494:	78fa      	ldrb	r2, [r7, #3]
 8008496:	4611      	mov	r1, r2
 8008498:	4618      	mov	r0, r3
 800849a:	f7f9 f9d0 	bl	800183e <HAL_PCD_EP_ClrStall>
 800849e:	4603      	mov	r3, r0
 80084a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
 80084a4:	4618      	mov	r0, r3
 80084a6:	f000 f8cb 	bl	8008640 <USBD_Get_USB_Status>
 80084aa:	4603      	mov	r3, r0
 80084ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3710      	adds	r7, #16
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b085      	sub	sp, #20
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	460b      	mov	r3, r1
 80084c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80084ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80084cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	da0b      	bge.n	80084ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80084d4:	78fb      	ldrb	r3, [r7, #3]
 80084d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084da:	68f9      	ldr	r1, [r7, #12]
 80084dc:	4613      	mov	r3, r2
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	4413      	add	r3, r2
 80084e2:	00db      	lsls	r3, r3, #3
 80084e4:	440b      	add	r3, r1
 80084e6:	3312      	adds	r3, #18
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	e00b      	b.n	8008504 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80084ec:	78fb      	ldrb	r3, [r7, #3]
 80084ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084f2:	68f9      	ldr	r1, [r7, #12]
 80084f4:	4613      	mov	r3, r2
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	4413      	add	r3, r2
 80084fa:	00db      	lsls	r3, r3, #3
 80084fc:	440b      	add	r3, r1
 80084fe:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008502:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008504:	4618      	mov	r0, r3
 8008506:	3714      	adds	r7, #20
 8008508:	46bd      	mov	sp, r7
 800850a:	bc80      	pop	{r7}
 800850c:	4770      	bx	lr

0800850e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b084      	sub	sp, #16
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
 8008516:	460b      	mov	r3, r1
 8008518:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800851a:	2300      	movs	r3, #0
 800851c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800851e:	2300      	movs	r3, #0
 8008520:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008528:	78fa      	ldrb	r2, [r7, #3]
 800852a:	4611      	mov	r1, r2
 800852c:	4618      	mov	r0, r3
 800852e:	f7f8 ffde 	bl	80014ee <HAL_PCD_SetAddress>
 8008532:	4603      	mov	r3, r0
 8008534:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008536:	7bfb      	ldrb	r3, [r7, #15]
 8008538:	4618      	mov	r0, r3
 800853a:	f000 f881 	bl	8008640 <USBD_Get_USB_Status>
 800853e:	4603      	mov	r3, r0
 8008540:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008542:	7bbb      	ldrb	r3, [r7, #14]
}
 8008544:	4618      	mov	r0, r3
 8008546:	3710      	adds	r7, #16
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b086      	sub	sp, #24
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	607a      	str	r2, [r7, #4]
 8008556:	461a      	mov	r2, r3
 8008558:	460b      	mov	r3, r1
 800855a:	72fb      	strb	r3, [r7, #11]
 800855c:	4613      	mov	r3, r2
 800855e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008560:	2300      	movs	r3, #0
 8008562:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008564:	2300      	movs	r3, #0
 8008566:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800856e:	893b      	ldrh	r3, [r7, #8]
 8008570:	7af9      	ldrb	r1, [r7, #11]
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	f7f9 f8cc 	bl	8001710 <HAL_PCD_EP_Transmit>
 8008578:	4603      	mov	r3, r0
 800857a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800857c:	7dfb      	ldrb	r3, [r7, #23]
 800857e:	4618      	mov	r0, r3
 8008580:	f000 f85e 	bl	8008640 <USBD_Get_USB_Status>
 8008584:	4603      	mov	r3, r0
 8008586:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008588:	7dbb      	ldrb	r3, [r7, #22]
}
 800858a:	4618      	mov	r0, r3
 800858c:	3718      	adds	r7, #24
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b086      	sub	sp, #24
 8008596:	af00      	add	r7, sp, #0
 8008598:	60f8      	str	r0, [r7, #12]
 800859a:	607a      	str	r2, [r7, #4]
 800859c:	461a      	mov	r2, r3
 800859e:	460b      	mov	r3, r1
 80085a0:	72fb      	strb	r3, [r7, #11]
 80085a2:	4613      	mov	r3, r2
 80085a4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085a6:	2300      	movs	r3, #0
 80085a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085aa:	2300      	movs	r3, #0
 80085ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80085b4:	893b      	ldrh	r3, [r7, #8]
 80085b6:	7af9      	ldrb	r1, [r7, #11]
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	f7f9 f861 	bl	8001680 <HAL_PCD_EP_Receive>
 80085be:	4603      	mov	r3, r0
 80085c0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085c2:	7dfb      	ldrb	r3, [r7, #23]
 80085c4:	4618      	mov	r0, r3
 80085c6:	f000 f83b 	bl	8008640 <USBD_Get_USB_Status>
 80085ca:	4603      	mov	r3, r0
 80085cc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80085ce:	7dbb      	ldrb	r3, [r7, #22]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3718      	adds	r7, #24
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	460b      	mov	r3, r1
 80085e2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80085ea:	78fa      	ldrb	r2, [r7, #3]
 80085ec:	4611      	mov	r1, r2
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7f9 f877 	bl	80016e2 <HAL_PCD_EP_GetRxCount>
 80085f4:	4603      	mov	r3, r0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3708      	adds	r7, #8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
	...

08008600 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008608:	4b02      	ldr	r3, [pc, #8]	@ (8008614 <USBD_static_malloc+0x14>)
}
 800860a:	4618      	mov	r0, r3
 800860c:	370c      	adds	r7, #12
 800860e:	46bd      	mov	sp, r7
 8008610:	bc80      	pop	{r7}
 8008612:	4770      	bx	lr
 8008614:	20001a40 	.word	0x20001a40

08008618 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]

}
 8008620:	bf00      	nop
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	bc80      	pop	{r7}
 8008628:	4770      	bx	lr

0800862a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800862a:	b480      	push	{r7}
 800862c:	b083      	sub	sp, #12
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
 8008632:	460b      	mov	r3, r1
 8008634:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008636:	bf00      	nop
 8008638:	370c      	adds	r7, #12
 800863a:	46bd      	mov	sp, r7
 800863c:	bc80      	pop	{r7}
 800863e:	4770      	bx	lr

08008640 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008640:	b480      	push	{r7}
 8008642:	b085      	sub	sp, #20
 8008644:	af00      	add	r7, sp, #0
 8008646:	4603      	mov	r3, r0
 8008648:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800864a:	2300      	movs	r3, #0
 800864c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800864e:	79fb      	ldrb	r3, [r7, #7]
 8008650:	2b03      	cmp	r3, #3
 8008652:	d817      	bhi.n	8008684 <USBD_Get_USB_Status+0x44>
 8008654:	a201      	add	r2, pc, #4	@ (adr r2, 800865c <USBD_Get_USB_Status+0x1c>)
 8008656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800865a:	bf00      	nop
 800865c:	0800866d 	.word	0x0800866d
 8008660:	08008673 	.word	0x08008673
 8008664:	08008679 	.word	0x08008679
 8008668:	0800867f 	.word	0x0800867f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800866c:	2300      	movs	r3, #0
 800866e:	73fb      	strb	r3, [r7, #15]
    break;
 8008670:	e00b      	b.n	800868a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008672:	2302      	movs	r3, #2
 8008674:	73fb      	strb	r3, [r7, #15]
    break;
 8008676:	e008      	b.n	800868a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008678:	2301      	movs	r3, #1
 800867a:	73fb      	strb	r3, [r7, #15]
    break;
 800867c:	e005      	b.n	800868a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800867e:	2302      	movs	r3, #2
 8008680:	73fb      	strb	r3, [r7, #15]
    break;
 8008682:	e002      	b.n	800868a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008684:	2302      	movs	r3, #2
 8008686:	73fb      	strb	r3, [r7, #15]
    break;
 8008688:	bf00      	nop
  }
  return usb_status;
 800868a:	7bfb      	ldrb	r3, [r7, #15]
}
 800868c:	4618      	mov	r0, r3
 800868e:	3714      	adds	r7, #20
 8008690:	46bd      	mov	sp, r7
 8008692:	bc80      	pop	{r7}
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop

08008698 <memset>:
 8008698:	4603      	mov	r3, r0
 800869a:	4402      	add	r2, r0
 800869c:	4293      	cmp	r3, r2
 800869e:	d100      	bne.n	80086a2 <memset+0xa>
 80086a0:	4770      	bx	lr
 80086a2:	f803 1b01 	strb.w	r1, [r3], #1
 80086a6:	e7f9      	b.n	800869c <memset+0x4>

080086a8 <__libc_init_array>:
 80086a8:	b570      	push	{r4, r5, r6, lr}
 80086aa:	2600      	movs	r6, #0
 80086ac:	4d0c      	ldr	r5, [pc, #48]	@ (80086e0 <__libc_init_array+0x38>)
 80086ae:	4c0d      	ldr	r4, [pc, #52]	@ (80086e4 <__libc_init_array+0x3c>)
 80086b0:	1b64      	subs	r4, r4, r5
 80086b2:	10a4      	asrs	r4, r4, #2
 80086b4:	42a6      	cmp	r6, r4
 80086b6:	d109      	bne.n	80086cc <__libc_init_array+0x24>
 80086b8:	f000 f81a 	bl	80086f0 <_init>
 80086bc:	2600      	movs	r6, #0
 80086be:	4d0a      	ldr	r5, [pc, #40]	@ (80086e8 <__libc_init_array+0x40>)
 80086c0:	4c0a      	ldr	r4, [pc, #40]	@ (80086ec <__libc_init_array+0x44>)
 80086c2:	1b64      	subs	r4, r4, r5
 80086c4:	10a4      	asrs	r4, r4, #2
 80086c6:	42a6      	cmp	r6, r4
 80086c8:	d105      	bne.n	80086d6 <__libc_init_array+0x2e>
 80086ca:	bd70      	pop	{r4, r5, r6, pc}
 80086cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80086d0:	4798      	blx	r3
 80086d2:	3601      	adds	r6, #1
 80086d4:	e7ee      	b.n	80086b4 <__libc_init_array+0xc>
 80086d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80086da:	4798      	blx	r3
 80086dc:	3601      	adds	r6, #1
 80086de:	e7f2      	b.n	80086c6 <__libc_init_array+0x1e>
 80086e0:	0800877c 	.word	0x0800877c
 80086e4:	0800877c 	.word	0x0800877c
 80086e8:	0800877c 	.word	0x0800877c
 80086ec:	08008780 	.word	0x08008780

080086f0 <_init>:
 80086f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086f2:	bf00      	nop
 80086f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086f6:	bc08      	pop	{r3}
 80086f8:	469e      	mov	lr, r3
 80086fa:	4770      	bx	lr

080086fc <_fini>:
 80086fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fe:	bf00      	nop
 8008700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008702:	bc08      	pop	{r3}
 8008704:	469e      	mov	lr, r3
 8008706:	4770      	bx	lr
